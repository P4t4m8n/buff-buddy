generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseMuscle {
  abs
  back
  biceps
  calves
  chest
  core
  forearms
  glutes
  hamstrings
  hip_flexors
  lower_back
  neck
  obliques
  quads
  shoulders
  shins
  traps
  triceps
  upper_back
}

enum ExerciseEquipment {
  barbell
  body_weight
  cable
  dumbbell
  kettlebell
  medicine_ball
  none
  resistance_band
}

enum ExerciseType {
  strength
  cardio
  flexibility
  balance
}

enum DaysOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String?
  googleId     String?   @unique
  firstName    String?
  lastName     String?
  programs     Program[]
  userSets     UserSet[]
  workouts     Workout[]
  imgUrl       String?
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Exercise {
  id               String              @id @default(cuid())
  name             String              @unique
  youtubeUrl       String
  types            ExerciseType[]
  equipment        ExerciseEquipment[]
  muscles          ExerciseMuscle[]
  workoutExercises WorkoutExercise[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model CoreSet {
  id           String  @id @default(cuid())
  restTime     Int     @default(60)
  numberOfSets Int     @default(1)
  hasWarmup    Boolean @default(false)
  workoutExercise WorkoutExercise[]
  userSets        UserSet[]
  reps            CoreSetReps[]
  weight          CoreSetWeight[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model CoreSetReps {
  id        String   @id @default(cuid())
  coreSetId String
  coreSet   CoreSet  @relation(fields: [coreSetId], references: [id], onDelete: Cascade)
  reps      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoreSetWeight {
  id           String   @id @default(cuid())
  coreSetId    String
  coreSet      CoreSet  @relation(fields: [coreSetId], references: [id], onDelete: Cascade)
  isBodyWeight Boolean  @default(false)
  weight       Float?   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserSet {
  id              String   @id @default(cuid())
  reps            Int      @default(0)
  weight          Float?   @default(0)
  isBodyWeight    Boolean  @default(false)
  restTime        Int      @default(60)
  isCompleted     Boolean  @default(false)
  isMuscleFailure Boolean  @default(false)
  isJointPain     Boolean  @default(false)
  coreSetId       String?
  coreSet         CoreSet? @relation(fields: [coreSetId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Program {
  id              String           @id @default(cuid())
  name            String
  notes           String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean          @default(true)
  ownerId         String
  programWorkouts ProgramWorkout[]
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProgramWorkout {
  id         String       @id @default(cuid())
  programId  String
  program    Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  workoutId  String
  workout    Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  daysOfWeek DaysOfWeek[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([programId, workoutId])
}

model Workout {
  id               String            @id @default(cuid())
  name             String?           @default("New Workout")
  notes            String?
  ownerId          String?
  owner            User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  programWorkouts  ProgramWorkout[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  order      Int      @default(0)
  notes      String?
  coreSetsId String
  coreSets   CoreSet  @relation(fields: [coreSetsId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// model WorkoutExerciseSuperSet {
//   id        String     @id @default(cuid())
//   order     Int
//   notes     String?
//   coreSets  CoreSet[]
//   exercises Exercise[]
//   workoutId String
//   workout   Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
// }

// model WorkoutSet {
//   id                String          @id @default(cuid())
//   WorkoutExerciseId String
//   workout           WorkoutExercise @relation(fields: [WorkoutExerciseId], references: [id], onDelete: Cascade)
//   coreSetId         String
//   coreSet           CoreSet         @relation(fields: [coreSetId], references: [id], onDelete: Cascade)
//   userSetId         String          @unique
//   userSet           UserSet         @relation(fields: [userSetId], references: [id], onDelete: Cascade)
//   createdAt         DateTime        @default(now())
//   updatedAt         DateTime        @updatedAt
// }
