generator client {
  provider        = "prisma-client-js"
  output          = "generated/prisma"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseType {
  strength
  cardio
  flexibility
  miscellaneous
}

enum DaysOfWeek {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

enum WorkoutGoal {
  hypertrophy
}

enum WorkoutLevel {
  beginner
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String?
  googleId     String?       @unique
  firstName    String?
  lastName     String?
  programs     Program[]
  workouts     Workout[]
  userWorkout  UserWorkout[]
  meals        Meal[]
  userMeals    UserMeal[]
  exercises    Exercise[]
  imgUrl       String?
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Exercise {
  id               String            @id @default(cuid())
  name             String            @unique
  youtubeUrl       String
  notes            String?
  isCompounded     Boolean           @default(false)
  type             ExerciseType      @default(strength)
  equipment        Equipment[]
  muscles          Muscle[]
  workoutExercises WorkoutExercise[]
  ownerId          String?
  owner            User?             @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Muscle {
  id        String        @id @default(cuid())
  name      String        @unique
  order     Int           @default(0)
  exercises Exercise[]
  aliases   MuscleAlias[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model MuscleAlias {
  id        String   @id @default(cuid())
  name      String   @unique
  language  String?  @default("en")
  muscleId  String
  muscle    Muscle   @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id         String              @id @default(cuid())
  name       String              @unique
  exercises  Exercise[]
  categories EquipmentCategory[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model EquipmentCategory {
  id         String      @id @default(cuid())
  name       String      @unique
  equipments Equipment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model UserCardioSet {
  id                    String              @id @default(cuid())
  warmupTime            Int?                @default(0)
  workTime              Int?
  avgHeartRate          Int?
  avgSpeed              Float?
  distance              Float?
  order                 Int                 @default(1)
  isCompleted           Boolean             @default(false)
  caloriesBurned        Int?
  userWorkoutExerciseId String
  skippedReason         String?
  userWorkoutExercise   UserWorkoutExercise @relation(fields: [userWorkoutExerciseId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model UserStrengthSet {
  id                    String              @id @default(cuid())
  reps                  Int?
  weight                Float?
  isBodyWeight          Boolean             @default(false)
  restTime              Int                 @default(60)
  order                 Int                 @default(1)
  isCompleted           Boolean             @default(false)
  isWarmup              Boolean             @default(false)
  isMuscleFailure       Boolean             @default(false)
  isJointPain           Boolean             @default(false)
  skippedReason         String?
  userWorkoutExerciseId String
  userWorkoutExercise   UserWorkoutExercise @relation(fields: [userWorkoutExerciseId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Program {
  id              String           @id @default(cuid())
  name            String
  notes           String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean          @default(true)
  ownerId         String
  programWorkouts ProgramWorkout[]
  userWorkout     UserWorkout[]
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProgramWorkout {
  id           String       @id @default(cuid())
  programId    String
  program      Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  workoutId    String
  workout      Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutLevel WorkoutLevel @default(beginner) //Planer algorithm will use this to suggest appropriate workouts
  workoutGoal  WorkoutGoal  @default(hypertrophy) //Planer algorithm will use this to suggest appropriate workouts
  daysOfWeek   DaysOfWeek[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([programId, workoutId])
}

model Workout {
  id               String            @id @default(cuid())
  name             String?           @default("New Workout")
  isTemplate       Boolean           @default(false)
  notes            String?
  ownerId          String?
  owner            User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  programWorkouts  ProgramWorkout[]
  userWorkouts     UserWorkout[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  /**
   * Manually added to migration
   * CREATE UNIQUE INDEX
   * IF NOT EXISTS uniq_workout_name_template
   * ON "Workout"
   * (name)
   * WHERE "isTemplate" = true AND name IS NOT NULL;
   */
}

model WorkoutExercise {
  id                   String                @id @default(cuid())
  order                Int                   @default(0)
  notes                String?
  hasWarmup            Boolean               @default(false)
  isBodyWeight         Boolean               @default(false)
  restTime             Int                   @default(60)
  exerciseId           String
  exercise             Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutId            String
  workout              Workout               @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userWorkoutExercises UserWorkoutExercise[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model UserWorkoutExercise {
  id                String            @id @default(cuid())
  skippedReason     String?
  workoutExerciseId String
  workoutExercise   WorkoutExercise   @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  userWorkoutId     String
  userWorkout       UserWorkout       @relation(fields: [userWorkoutId], references: [id], onDelete: Cascade)
  userStrengthSets  UserStrengthSet[]
  userCardioSets    UserCardioSet[]
}

model UserWorkout {
  id                   String                @id @default(cuid())
  dateCompleted        DateTime?             @default(now())
  ownerId              String
  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  userWorkoutExercises UserWorkoutExercise[]
  programId            String?
  program              Program?              @relation(fields: [programId], references: [id], onDelete: Cascade)
  workoutId            String?
  workout              Workout?              @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
}

model FoodItem {
  id            String             @id @default(cuid())
  barcode       String             @unique
  name          String             @unique
  servingSize   Float?
  calories      Float?
  proteins      Float?
  carbohydrates Float?
  sugars        Float?
  fat           Float?
  saturatedFat  Float?
  fiber         Float?
  salt          Float?
  cholesterol   Float?
  brandId       String?
  brand         FoodItemBrand?     @relation(fields: [brandId], references: [id], onDelete: SetNull)
  categories    FoodItemCategory[]
  labels        FoodItemLabel[]
  mealFoodItem  MealFoodItem[]
  userMealItem  UserMealItem[]
  images        FoodItemImg[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model FoodItemLabel {
  id        String     @id @default(cuid())
  name      String     @unique
  foodItems FoodItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model FoodItemImg {
  id         String   @id @default(cuid())
  url        String   @unique
  altText    String?  @default("Food Image")
  foodItemId String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FoodItemBrand {
  id        String     @id @default(cuid())
  name      String     @unique
  foodItems FoodItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model FoodItemCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  foodItems FoodItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Meal {
  id            String         @id @default(cuid())
  name          String?
  mealType      MealType       @default(breakfast)
  ownerId       String?
  owner         User?          @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  mealFoodItems MealFoodItem[]
  userMeals     UserMeal[]
  notes         String?
  images        Image[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model MealFoodItem {
  id         String   @id @default(cuid())
  mealId     String
  meal       Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  foodItemId String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  quantity   Int      @default(1) // in grams
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserMeal {
  id            String         @id @default(cuid())
  mealId        String
  dateConsumed  DateTime       @default(now())
  notes         String?
  meal          Meal           @relation(fields: [mealId], references: [id], onDelete: SetNull)
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  userMealItems UserMealItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserMealItem {
  id         String   @id @default(cuid())
  userMealId String
  userMeal   UserMeal @relation(fields: [userMealId], references: [id], onDelete: Cascade)
  foodItemId String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  quantity   Int      @default(1) // in grams
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id          String   @id @default(cuid())
  url         String   @unique
  publicId    String   @unique
  description String?
  altText     String?
  mealId      String?
  meal        Meal?    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
