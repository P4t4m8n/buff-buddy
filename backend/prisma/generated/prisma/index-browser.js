
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  googleId: 'googleId',
  firstName: 'firstName',
  lastName: 'lastName',
  imgUrl: 'imgUrl',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  youtubeUrl: 'youtubeUrl',
  type: 'type',
  notes: 'notes',
  equipment: 'equipment',
  muscles: 'muscles',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetScalarFieldEnum = {
  id: 'id',
  warmupTime: 'warmupTime',
  avgHeartRate: 'avgHeartRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetCalorieTargetScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  calorieTarget: 'calorieTarget',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetDistanceScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  distance: 'distance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetAvgSpeedScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  avgSpeed: 'avgSpeed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetWorkoutTimeScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  workTime: 'workTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCardioSetScalarFieldEnum = {
  id: 'id',
  warmupTime: 'warmupTime',
  workTime: 'workTime',
  avgHeartRate: 'avgHeartRate',
  avgSpeed: 'avgSpeed',
  distance: 'distance',
  order: 'order',
  isCompleted: 'isCompleted',
  caloriesBurned: 'caloriesBurned',
  userWorkoutExerciseId: 'userWorkoutExerciseId',
  skippedReason: 'skippedReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetScalarFieldEnum = {
  id: 'id',
  restTime: 'restTime',
  numberOfSets: 'numberOfSets',
  hasWarmup: 'hasWarmup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetRepsScalarFieldEnum = {
  id: 'id',
  coreStrengthSetId: 'coreStrengthSetId',
  reps: 'reps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetWeightScalarFieldEnum = {
  id: 'id',
  coreStrengthSetId: 'coreStrengthSetId',
  isBodyWeight: 'isBodyWeight',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStrengthSetScalarFieldEnum = {
  id: 'id',
  reps: 'reps',
  weight: 'weight',
  isBodyWeight: 'isBodyWeight',
  restTime: 'restTime',
  order: 'order',
  isCompleted: 'isCompleted',
  isWarmup: 'isWarmup',
  isMuscleFailure: 'isMuscleFailure',
  isJointPain: 'isJointPain',
  skippedReason: 'skippedReason',
  userWorkoutExerciseId: 'userWorkoutExerciseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  notes: 'notes',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramWorkoutScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  workoutId: 'workoutId',
  level: 'level',
  workoutGoal: 'workoutGoal',
  daysOfWeek: 'daysOfWeek',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isTemplate: 'isTemplate',
  notes: 'notes',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutExerciseScalarFieldEnum = {
  id: 'id',
  order: 'order',
  notes: 'notes',
  hasWarmup: 'hasWarmup',
  isBodyWeight: 'isBodyWeight',
  exerciseId: 'exerciseId',
  workoutId: 'workoutId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserWorkoutExerciseScalarFieldEnum = {
  id: 'id',
  skippedReason: 'skippedReason',
  workoutExerciseId: 'workoutExerciseId',
  userWorkoutId: 'userWorkoutId'
};

exports.Prisma.UserWorkoutScalarFieldEnum = {
  id: 'id',
  dateCompleted: 'dateCompleted',
  ownerId: 'ownerId',
  programId: 'programId',
  workoutId: 'workoutId',
  createdAt: 'createdAt'
};

exports.Prisma.FoodItemScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  name: 'name',
  servingSize: 'servingSize',
  calories: 'calories',
  proteins: 'proteins',
  carbohydrates: 'carbohydrates',
  sugars: 'sugars',
  fat: 'fat',
  saturatedFat: 'saturatedFat',
  fiber: 'fiber',
  salt: 'salt',
  cholesterol: 'cholesterol',
  brandId: 'brandId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemLabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemImgScalarFieldEnum = {
  id: 'id',
  url: 'url',
  foodItemId: 'foodItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemBrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  name: 'name',
  mealType: 'mealType',
  ownerId: 'ownerId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealFoodItemScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  foodItemId: 'foodItemId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserMealScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  userId: 'userId',
  dateConsumed: 'dateConsumed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ExerciseType = exports.$Enums.ExerciseType = {
  strength: 'strength',
  cardio: 'cardio',
  flexibility: 'flexibility',
  miscellaneous: 'miscellaneous'
};

exports.ExerciseEquipment = exports.$Enums.ExerciseEquipment = {
  barbell: 'barbell',
  dumbbell: 'dumbbell',
  kettlebell: 'kettlebell',
  weight_plates: 'weight_plates',
  ez_curl_bar: 'ez_curl_bar',
  olympic_bar: 'olympic_bar',
  trap_bar: 'trap_bar',
  medicine_ball: 'medicine_ball',
  flat_bench: 'flat_bench',
  incline_bench: 'incline_bench',
  decline_bench: 'decline_bench',
  adjustable_bench: 'adjustable_bench',
  power_rack: 'power_rack',
  squat_rack: 'squat_rack',
  smith_machine: 'smith_machine',
  preacher_bench: 'preacher_bench',
  cable_machine: 'cable_machine',
  cable_crossover: 'cable_crossover',
  lat_pulldown: 'lat_pulldown',
  low_row: 'low_row',
  cable_column: 'cable_column',
  functional_trainer: 'functional_trainer',
  treadmill: 'treadmill',
  elliptical: 'elliptical',
  stationary_bike: 'stationary_bike',
  rowing_machine: 'rowing_machine',
  stair_climber: 'stair_climber',
  stepper: 'stepper',
  spin_bike: 'spin_bike',
  air_bike: 'air_bike',
  leg_press: 'leg_press',
  hack_squat: 'hack_squat',
  leg_curl: 'leg_curl',
  leg_extension: 'leg_extension',
  calf_raise_machine: 'calf_raise_machine',
  chest_press_machine: 'chest_press_machine',
  shoulder_press_machine: 'shoulder_press_machine',
  pec_deck: 'pec_deck',
  hip_abduction_machine: 'hip_abduction_machine',
  hip_adduction_machine: 'hip_adduction_machine',
  pull_up_bar: 'pull_up_bar',
  dip_station: 'dip_station',
  assisted_pull_up_machine: 'assisted_pull_up_machine',
  captains_chair: 'captains_chair',
  trx_straps: 'trx_straps',
  resistance_bands: 'resistance_bands',
  battle_ropes: 'battle_ropes',
  suspension_trainer: 'suspension_trainer',
  stability_ball: 'stability_ball',
  foam_roller: 'foam_roller',
  yoga_mat: 'yoga_mat',
  gymnastics_rings: 'gymnastics_rings',
  plyometric_box: 'plyometric_box',
  agility_ladder: 'agility_ladder',
  speed_rope: 'speed_rope',
  weight_belt: 'weight_belt',
  lifting_straps: 'lifting_straps',
  chalk: 'chalk',
  gloves: 'gloves',
  wrist_wraps: 'wrist_wraps',
  knee_sleeves: 'knee_sleeves'
};

exports.ExerciseMuscle = exports.$Enums.ExerciseMuscle = {
  chest: 'chest',
  front_delts: 'front_delts',
  side_delts: 'side_delts',
  rear_delts: 'rear_delts',
  lats: 'lats',
  traps: 'traps',
  rhomboids: 'rhomboids',
  lower_back: 'lower_back',
  biceps: 'biceps',
  triceps: 'triceps',
  forearms: 'forearms',
  abs: 'abs',
  obliques: 'obliques',
  quads: 'quads',
  hamstrings: 'hamstrings',
  glutes: 'glutes',
  calves: 'calves',
  hip_flexors: 'hip_flexors',
  adductors: 'adductors',
  abductors: 'abductors',
  rotator_cuff: 'rotator_cuff',
  serratus_anterior: 'serratus_anterior'
};

exports.DaysOfWeek = exports.$Enums.DaysOfWeek = {
  sunday: 'sunday',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday'
};

exports.MealType = exports.$Enums.MealType = {
  breakfast: 'breakfast',
  lunch: 'lunch',
  dinner: 'dinner',
  snack: 'snack'
};

exports.Prisma.ModelName = {
  User: 'User',
  Exercise: 'Exercise',
  CoreCardioSet: 'CoreCardioSet',
  CoreCardioSetCalorieTarget: 'CoreCardioSetCalorieTarget',
  CoreCardioSetDistance: 'CoreCardioSetDistance',
  CoreCardioSetAvgSpeed: 'CoreCardioSetAvgSpeed',
  CoreCardioSetWorkoutTime: 'CoreCardioSetWorkoutTime',
  UserCardioSet: 'UserCardioSet',
  CoreStrengthSet: 'CoreStrengthSet',
  CoreStrengthSetReps: 'CoreStrengthSetReps',
  CoreStrengthSetWeight: 'CoreStrengthSetWeight',
  UserStrengthSet: 'UserStrengthSet',
  Program: 'Program',
  ProgramWorkout: 'ProgramWorkout',
  Workout: 'Workout',
  WorkoutExercise: 'WorkoutExercise',
  UserWorkoutExercise: 'UserWorkoutExercise',
  UserWorkout: 'UserWorkout',
  FoodItem: 'FoodItem',
  FoodItemLabel: 'FoodItemLabel',
  FoodItemImg: 'FoodItemImg',
  FoodItemBrand: 'FoodItemBrand',
  FoodItemCategory: 'FoodItemCategory',
  Meal: 'Meal',
  MealFoodItem: 'MealFoodItem',
  UserMeal: 'UserMeal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
