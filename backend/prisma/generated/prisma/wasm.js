
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  googleId: 'googleId',
  firstName: 'firstName',
  lastName: 'lastName',
  imgUrl: 'imgUrl',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  youtubeUrl: 'youtubeUrl',
  type: 'type',
  notes: 'notes',
  equipment: 'equipment',
  muscles: 'muscles',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetScalarFieldEnum = {
  id: 'id',
  warmupTime: 'warmupTime',
  avgHeartRate: 'avgHeartRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetCalorieTargetScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  calorieTarget: 'calorieTarget',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetDistanceScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  distance: 'distance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetAvgSpeedScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  avgSpeed: 'avgSpeed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreCardioSetWorkoutTimeScalarFieldEnum = {
  id: 'id',
  coreCardioSetId: 'coreCardioSetId',
  workTime: 'workTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCardioSetScalarFieldEnum = {
  id: 'id',
  warmupTime: 'warmupTime',
  workTime: 'workTime',
  avgHeartRate: 'avgHeartRate',
  avgSpeed: 'avgSpeed',
  distance: 'distance',
  order: 'order',
  isCompleted: 'isCompleted',
  caloriesBurned: 'caloriesBurned',
  userWorkoutExerciseId: 'userWorkoutExerciseId',
  skippedReason: 'skippedReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetScalarFieldEnum = {
  id: 'id',
  restTime: 'restTime',
  numberOfSets: 'numberOfSets',
  hasWarmup: 'hasWarmup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetRepsScalarFieldEnum = {
  id: 'id',
  coreStrengthSetId: 'coreStrengthSetId',
  reps: 'reps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoreStrengthSetWeightScalarFieldEnum = {
  id: 'id',
  coreStrengthSetId: 'coreStrengthSetId',
  isBodyWeight: 'isBodyWeight',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStrengthSetScalarFieldEnum = {
  id: 'id',
  reps: 'reps',
  weight: 'weight',
  isBodyWeight: 'isBodyWeight',
  restTime: 'restTime',
  order: 'order',
  isCompleted: 'isCompleted',
  isWarmup: 'isWarmup',
  isMuscleFailure: 'isMuscleFailure',
  isJointPain: 'isJointPain',
  skippedReason: 'skippedReason',
  userWorkoutExerciseId: 'userWorkoutExerciseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  notes: 'notes',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramWorkoutScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  workoutId: 'workoutId',
  level: 'level',
  workoutGoal: 'workoutGoal',
  daysOfWeek: 'daysOfWeek',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isTemplate: 'isTemplate',
  notes: 'notes',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutExerciseScalarFieldEnum = {
  id: 'id',
  order: 'order',
  notes: 'notes',
  hasWarmup: 'hasWarmup',
  isBodyWeight: 'isBodyWeight',
  exerciseId: 'exerciseId',
  workoutId: 'workoutId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserWorkoutExerciseScalarFieldEnum = {
  id: 'id',
  skippedReason: 'skippedReason',
  workoutExerciseId: 'workoutExerciseId',
  userWorkoutId: 'userWorkoutId'
};

exports.Prisma.UserWorkoutScalarFieldEnum = {
  id: 'id',
  dateCompleted: 'dateCompleted',
  ownerId: 'ownerId',
  programId: 'programId',
  workoutId: 'workoutId',
  createdAt: 'createdAt'
};

exports.Prisma.FoodItemScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  name: 'name',
  servingSize: 'servingSize',
  calories: 'calories',
  proteins: 'proteins',
  carbohydrates: 'carbohydrates',
  sugars: 'sugars',
  fat: 'fat',
  saturatedFat: 'saturatedFat',
  fiber: 'fiber',
  salt: 'salt',
  cholesterol: 'cholesterol',
  brandId: 'brandId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemLabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemImgScalarFieldEnum = {
  id: 'id',
  url: 'url',
  foodItemId: 'foodItemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemBrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodItemCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  name: 'name',
  mealType: 'mealType',
  ownerId: 'ownerId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealFoodItemScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  foodItemId: 'foodItemId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserMealScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  userId: 'userId',
  dateConsumed: 'dateConsumed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ExerciseMuscle = exports.$Enums.ExerciseMuscle = {
  chest: 'chest',
  front_delts: 'front_delts',
  side_delts: 'side_delts',
  rear_delts: 'rear_delts',
  lats: 'lats',
  traps: 'traps',
  rhomboids: 'rhomboids',
  lower_back: 'lower_back',
  biceps: 'biceps',
  triceps: 'triceps',
  forearms: 'forearms',
  abs: 'abs',
  obliques: 'obliques',
  quads: 'quads',
  hamstrings: 'hamstrings',
  glutes: 'glutes',
  calves: 'calves',
  hip_flexors: 'hip_flexors',
  adductors: 'adductors',
  abductors: 'abductors',
  rotator_cuff: 'rotator_cuff',
  serratus_anterior: 'serratus_anterior'
};

exports.ExerciseEquipment = exports.$Enums.ExerciseEquipment = {
  barbell: 'barbell',
  dumbbell: 'dumbbell',
  kettlebell: 'kettlebell',
  weight_plates: 'weight_plates',
  ez_curl_bar: 'ez_curl_bar',
  olympic_bar: 'olympic_bar',
  trap_bar: 'trap_bar',
  medicine_ball: 'medicine_ball',
  flat_bench: 'flat_bench',
  incline_bench: 'incline_bench',
  decline_bench: 'decline_bench',
  adjustable_bench: 'adjustable_bench',
  power_rack: 'power_rack',
  squat_rack: 'squat_rack',
  smith_machine: 'smith_machine',
  preacher_bench: 'preacher_bench',
  cable_machine: 'cable_machine',
  cable_crossover: 'cable_crossover',
  lat_pulldown: 'lat_pulldown',
  low_row: 'low_row',
  cable_column: 'cable_column',
  functional_trainer: 'functional_trainer',
  treadmill: 'treadmill',
  elliptical: 'elliptical',
  stationary_bike: 'stationary_bike',
  rowing_machine: 'rowing_machine',
  stair_climber: 'stair_climber',
  stepper: 'stepper',
  spin_bike: 'spin_bike',
  air_bike: 'air_bike',
  leg_press: 'leg_press',
  hack_squat: 'hack_squat',
  leg_curl: 'leg_curl',
  leg_extension: 'leg_extension',
  calf_raise_machine: 'calf_raise_machine',
  chest_press_machine: 'chest_press_machine',
  shoulder_press_machine: 'shoulder_press_machine',
  pec_deck: 'pec_deck',
  hip_abduction_machine: 'hip_abduction_machine',
  hip_adduction_machine: 'hip_adduction_machine',
  pull_up_bar: 'pull_up_bar',
  dip_station: 'dip_station',
  assisted_pull_up_machine: 'assisted_pull_up_machine',
  captains_chair: 'captains_chair',
  trx_straps: 'trx_straps',
  resistance_bands: 'resistance_bands',
  battle_ropes: 'battle_ropes',
  suspension_trainer: 'suspension_trainer',
  stability_ball: 'stability_ball',
  foam_roller: 'foam_roller',
  yoga_mat: 'yoga_mat',
  gymnastics_rings: 'gymnastics_rings',
  plyometric_box: 'plyometric_box',
  agility_ladder: 'agility_ladder',
  speed_rope: 'speed_rope',
  weight_belt: 'weight_belt',
  lifting_straps: 'lifting_straps',
  chalk: 'chalk',
  gloves: 'gloves',
  wrist_wraps: 'wrist_wraps',
  knee_sleeves: 'knee_sleeves'
};

exports.ExerciseType = exports.$Enums.ExerciseType = {
  strength: 'strength',
  cardio: 'cardio',
  flexibility: 'flexibility',
  miscellaneous: 'miscellaneous'
};

exports.DaysOfWeek = exports.$Enums.DaysOfWeek = {
  sunday: 'sunday',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday'
};

exports.MealType = exports.$Enums.MealType = {
  breakfast: 'breakfast',
  lunch: 'lunch',
  dinner: 'dinner',
  snack: 'snack'
};

exports.Prisma.ModelName = {
  User: 'User',
  Exercise: 'Exercise',
  CoreCardioSet: 'CoreCardioSet',
  CoreCardioSetCalorieTarget: 'CoreCardioSetCalorieTarget',
  CoreCardioSetDistance: 'CoreCardioSetDistance',
  CoreCardioSetAvgSpeed: 'CoreCardioSetAvgSpeed',
  CoreCardioSetWorkoutTime: 'CoreCardioSetWorkoutTime',
  UserCardioSet: 'UserCardioSet',
  CoreStrengthSet: 'CoreStrengthSet',
  CoreStrengthSetReps: 'CoreStrengthSetReps',
  CoreStrengthSetWeight: 'CoreStrengthSetWeight',
  UserStrengthSet: 'UserStrengthSet',
  Program: 'Program',
  ProgramWorkout: 'ProgramWorkout',
  Workout: 'Workout',
  WorkoutExercise: 'WorkoutExercise',
  UserWorkoutExercise: 'UserWorkoutExercise',
  UserWorkout: 'UserWorkout',
  FoodItem: 'FoodItem',
  FoodItemLabel: 'FoodItemLabel',
  FoodItemImg: 'FoodItemImg',
  FoodItemBrand: 'FoodItemBrand',
  FoodItemCategory: 'FoodItemCategory',
  Meal: 'Meal',
  MealFoodItem: 'MealFoodItem',
  UserMeal: 'UserMeal'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\micha\\Desktop\\Projects\\buff-buddy\\backend\\prisma\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\micha\\Desktop\\Projects\\buff-buddy\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum ExerciseMuscle {\n  // Chest\n  chest\n\n  // Shoulders\n  front_delts\n  side_delts\n  rear_delts\n\n  // Back\n  lats\n  traps\n  rhomboids\n  lower_back\n\n  // Arms\n  biceps\n  triceps\n  forearms\n\n  // Core\n  abs\n  obliques\n\n  // Legs\n  quads\n  hamstrings\n  glutes\n  calves\n  hip_flexors\n  adductors\n  abductors\n\n  // Stabilizers\n  rotator_cuff\n  serratus_anterior\n}\n\nenum ExerciseEquipment {\n  // Free Weights\n  barbell\n  dumbbell\n  kettlebell\n  weight_plates\n  ez_curl_bar\n  olympic_bar\n  trap_bar\n  medicine_ball\n\n  // Benches & Racks\n  flat_bench\n  incline_bench\n  decline_bench\n  adjustable_bench\n  power_rack\n  squat_rack\n  smith_machine\n  preacher_bench\n\n  // Cable Machines\n  cable_machine\n  cable_crossover\n  lat_pulldown\n  low_row\n  cable_column\n  functional_trainer\n\n  // Cardio Equipment\n  treadmill\n  elliptical\n  stationary_bike\n  rowing_machine\n  stair_climber\n  stepper\n  spin_bike\n  air_bike\n\n  // Specialized Machines\n  leg_press\n  hack_squat\n  leg_curl\n  leg_extension\n  calf_raise_machine\n  chest_press_machine\n  shoulder_press_machine\n  pec_deck\n  hip_abduction_machine\n  hip_adduction_machine\n\n  // Pull-up & Dip Equipment\n  pull_up_bar\n  dip_station\n  assisted_pull_up_machine\n  captains_chair\n\n  // Functional Training\n  trx_straps\n  resistance_bands\n  battle_ropes\n  suspension_trainer\n  stability_ball\n  foam_roller\n  yoga_mat\n\n  // Bodyweight/Calisthenics\n  gymnastics_rings\n  plyometric_box\n  agility_ladder\n  speed_rope\n\n  // Miscellaneous\n  weight_belt\n  lifting_straps\n  chalk\n  gloves\n  wrist_wraps\n  knee_sleeves\n}\n\nenum ExerciseType {\n  strength\n  cardio\n  flexibility\n  miscellaneous\n}\n\nenum DaysOfWeek {\n  sunday\n  monday\n  tuesday\n  wednesday\n  thursday\n  friday\n  saturday\n}\n\nenum MealType {\n  breakfast\n  lunch\n  dinner\n  snack\n}\n\nmodel User {\n  id           String        @id @default(cuid())\n  email        String        @unique\n  passwordHash String?\n  googleId     String?       @unique\n  firstName    String?\n  lastName     String?\n  programs     Program[]\n  workouts     Workout[]\n  userWorkout  UserWorkout[]\n  meals        Meal[]\n  userMeals    UserMeal[]\n  imgUrl       String?\n  isAdmin      Boolean       @default(false)\n  createdAt    DateTime      @default(now())\n  updatedAt    DateTime      @updatedAt\n}\n\nmodel Exercise {\n  id               String              @id @default(cuid())\n  name             String              @unique\n  youtubeUrl       String\n  type             ExerciseType        @default(strength)\n  notes            String?\n  equipment        ExerciseEquipment[]\n  muscles          ExerciseMuscle[]\n  workoutExercises WorkoutExercise[]\n  createdAt        DateTime            @default(now())\n  updatedAt        DateTime            @updatedAt\n}\n\nmodel CoreCardioSet {\n  id           String @id @default(cuid())\n  warmupTime   Int? //in seconds\n  avgHeartRate Int?\n\n  workTime      CoreCardioSetWorkoutTime[] //in seconds\n  avgSpeed      CoreCardioSetAvgSpeed[] //in km/h\n  distance      CoreCardioSetDistance[] //in meters\n  calorieTarget CoreCardioSetCalorieTarget[]\n  createdAt     DateTime                     @default(now())\n  updatedAt     DateTime                     @updatedAt\n}\n\nmodel CoreCardioSetCalorieTarget {\n  id              String        @id @default(cuid())\n  coreCardioSetId String\n  coreCardioSet   CoreCardioSet @relation(fields: [coreCardioSetId], references: [id], onDelete: Cascade)\n  calorieTarget   Int? // in kcal\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n}\n\nmodel CoreCardioSetDistance {\n  id              String        @id @default(cuid())\n  coreCardioSetId String\n  coreCardioSet   CoreCardioSet @relation(fields: [coreCardioSetId], references: [id], onDelete: Cascade)\n  distance        Float? // in km\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n}\n\nmodel CoreCardioSetAvgSpeed {\n  id              String        @id @default(cuid())\n  coreCardioSetId String\n  coreCardioSet   CoreCardioSet @relation(fields: [coreCardioSetId], references: [id], onDelete: Cascade)\n  avgSpeed        Float? // in km/h\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n}\n\nmodel CoreCardioSetWorkoutTime {\n  id              String        @id @default(cuid())\n  coreCardioSetId String\n  coreCardioSet   CoreCardioSet @relation(fields: [coreCardioSetId], references: [id], onDelete: Cascade)\n  workTime        Int? //in seconds\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n}\n\nmodel UserCardioSet {\n  id                    String              @id @default(cuid())\n  warmupTime            Int?                @default(0)\n  workTime              Int?\n  avgHeartRate          Int?\n  avgSpeed              Float?\n  distance              Float?\n  order                 Int                 @default(1)\n  isCompleted           Boolean             @default(false)\n  caloriesBurned        Int?\n  userWorkoutExerciseId String\n  skippedReason         String?\n  userWorkoutExercise   UserWorkoutExercise @relation(fields: [userWorkoutExerciseId], references: [id], onDelete: Cascade)\n  createdAt             DateTime            @default(now())\n  updatedAt             DateTime            @updatedAt\n}\n\nmodel CoreStrengthSet {\n  id           String  @id @default(cuid())\n  restTime     Int     @default(60)\n  numberOfSets Int     @default(1)\n  hasWarmup    Boolean @default(false)\n\n  reps      CoreStrengthSetReps[]\n  weight    CoreStrengthSetWeight[]\n  createdAt DateTime                @default(now())\n  updatedAt DateTime                @updatedAt\n}\n\nmodel CoreStrengthSetReps {\n  id                String          @id @default(cuid())\n  coreStrengthSetId String\n  coreStrengthSet   CoreStrengthSet @relation(fields: [coreStrengthSetId], references: [id], onDelete: Cascade)\n  reps              Int             @default(0)\n  createdAt         DateTime        @default(now())\n  updatedAt         DateTime        @updatedAt\n}\n\nmodel CoreStrengthSetWeight {\n  id                String          @id @default(cuid())\n  coreStrengthSetId String\n  coreStrengthSet   CoreStrengthSet @relation(fields: [coreStrengthSetId], references: [id], onDelete: Cascade)\n  isBodyWeight      Boolean         @default(false)\n  weight            Float?          @default(0)\n  createdAt         DateTime        @default(now())\n  updatedAt         DateTime        @updatedAt\n}\n\nmodel UserStrengthSet {\n  id                    String              @id @default(cuid())\n  reps                  Int?\n  weight                Float?\n  isBodyWeight          Boolean             @default(false)\n  restTime              Int                 @default(60)\n  order                 Int                 @default(1)\n  isCompleted           Boolean             @default(false)\n  isWarmup              Boolean             @default(false)\n  isMuscleFailure       Boolean             @default(false)\n  isJointPain           Boolean             @default(false)\n  skippedReason         String?\n  userWorkoutExerciseId String\n  userWorkoutExercise   UserWorkoutExercise @relation(fields: [userWorkoutExerciseId], references: [id], onDelete: Cascade)\n  createdAt             DateTime            @default(now())\n  updatedAt             DateTime            @updatedAt\n}\n\nmodel Program {\n  id              String           @id @default(cuid())\n  name            String\n  notes           String?\n  startDate       DateTime\n  endDate         DateTime\n  isActive        Boolean          @default(true)\n  ownerId         String\n  programWorkouts ProgramWorkout[]\n  userWorkout     UserWorkout[]\n  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  createdAt       DateTime         @default(now())\n  updatedAt       DateTime         @updatedAt\n}\n\nmodel ProgramWorkout {\n  id          String       @id @default(cuid())\n  programId   String\n  program     Program      @relation(fields: [programId], references: [id], onDelete: Cascade)\n  workoutId   String\n  workout     Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)\n  level       String       @default(\"beginner\")\n  workoutGoal String       @default(\"hypertrophy\")\n  daysOfWeek  DaysOfWeek[]\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n\n  @@unique([programId, workoutId])\n}\n\nmodel Workout {\n  id               String            @id @default(cuid())\n  name             String?           @default(\"New Workout\")\n  isTemplate       Boolean           @default(false)\n  notes            String?\n  ownerId          String?\n  owner            User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  workoutExercises WorkoutExercise[]\n  programWorkouts  ProgramWorkout[]\n  userWorkouts     UserWorkout[]\n  createdAt        DateTime          @default(now())\n  updatedAt        DateTime          @updatedAt\n\n  /**\n   * Manually added to migration\n   * CREATE UNIQUE INDEX\n   * IF NOT EXISTS uniq_workout_name_template\n   * ON \"Workout\"\n   * (name)\n   * WHERE \"isTemplate\" = true AND name IS NOT NULL;\n   */\n}\n\nmodel WorkoutExercise {\n  id                   String                @id @default(cuid())\n  order                Int                   @default(0)\n  notes                String?\n  hasWarmup            Boolean               @default(false)\n  isBodyWeight         Boolean               @default(false)\n  exerciseId           String\n  exercise             Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade)\n  workoutId            String\n  workout              Workout               @relation(fields: [workoutId], references: [id], onDelete: Cascade)\n  userWorkoutExercises UserWorkoutExercise[]\n  createdAt            DateTime              @default(now())\n  updatedAt            DateTime              @updatedAt\n}\n\nmodel UserWorkoutExercise {\n  id                String            @id @default(cuid())\n  skippedReason     String?\n  workoutExerciseId String\n  workoutExercise   WorkoutExercise   @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)\n  userWorkoutId     String\n  userWorkout       UserWorkout       @relation(fields: [userWorkoutId], references: [id], onDelete: Cascade)\n  userStrengthSets  UserStrengthSet[]\n  userCardioSets    UserCardioSet[]\n}\n\nmodel UserWorkout {\n  id                   String                @id @default(cuid())\n  dateCompleted        DateTime?             @default(now())\n  ownerId              String\n  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  userWorkoutExercises UserWorkoutExercise[]\n  programId            String?\n  program              Program?              @relation(fields: [programId], references: [id], onDelete: Cascade)\n  workoutId            String?\n  workout              Workout?              @relation(fields: [workoutId], references: [id], onDelete: Cascade)\n  createdAt            DateTime              @default(now())\n}\n\nmodel FoodItem {\n  id            String             @id @default(cuid())\n  barcode       String             @unique\n  name          String             @unique\n  servingSize   Float?\n  calories      Float?\n  proteins      Float?\n  carbohydrates Float?\n  sugars        Float?\n  fat           Float?\n  saturatedFat  Float?\n  fiber         Float?\n  salt          Float?\n  cholesterol   Float?\n  brandId       String?\n  brand         FoodItemBrand?     @relation(fields: [brandId], references: [id], onDelete: SetNull)\n  categories    FoodItemCategory[]\n  labels        FoodItemLabel[]\n  mealFoodItem  MealFoodItem[]\n  images        FoodItemImg[]\n  createdAt     DateTime           @default(now())\n  updatedAt     DateTime           @updatedAt\n}\n\nmodel FoodItemLabel {\n  id        String     @id @default(cuid())\n  name      String     @unique\n  foodItems FoodItem[]\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n}\n\nmodel FoodItemImg {\n  id         String   @id @default(cuid())\n  url        String   @unique\n  foodItemId String\n  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n}\n\nmodel FoodItemBrand {\n  id        String     @id @default(cuid())\n  name      String     @unique\n  foodItems FoodItem[]\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n}\n\nmodel FoodItemCategory {\n  id        String     @id @default(cuid())\n  name      String     @unique\n  foodItems FoodItem[]\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n}\n\nmodel Meal {\n  id            String         @id @default(cuid())\n  name          String?\n  mealType      MealType       @default(breakfast)\n  ownerId       String\n  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  mealFoodItems MealFoodItem[]\n  userMeals     UserMeal[]\n  notes         String?\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n}\n\nmodel MealFoodItem {\n  id         String   @id @default(cuid())\n  mealId     String\n  meal       Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)\n  foodItemId String\n  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)\n  quantity   Int      @default(1) // in grams\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n}\n\nmodel UserMeal {\n  id           String   @id @default(cuid())\n  mealId       String\n  meal         Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)\n  userId       String\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  dateConsumed DateTime @default(now())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n}\n",
  "inlineSchemaHash": "fed7d6d994ace30afa4147a9b58bbf53c70eb593b0ae2f377af4b85d2cc52f83",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programs\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"ProgramToUser\"},{\"name\":\"workouts\",\"kind\":\"object\",\"type\":\"Workout\",\"relationName\":\"UserToWorkout\"},{\"name\":\"userWorkout\",\"kind\":\"object\",\"type\":\"UserWorkout\",\"relationName\":\"UserToUserWorkout\"},{\"name\":\"meals\",\"kind\":\"object\",\"type\":\"Meal\",\"relationName\":\"MealToUser\"},{\"name\":\"userMeals\",\"kind\":\"object\",\"type\":\"UserMeal\",\"relationName\":\"UserToUserMeal\"},{\"name\":\"imgUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAdmin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Exercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"youtubeUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ExerciseType\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"equipment\",\"kind\":\"enum\",\"type\":\"ExerciseEquipment\"},{\"name\":\"muscles\",\"kind\":\"enum\",\"type\":\"ExerciseMuscle\"},{\"name\":\"workoutExercises\",\"kind\":\"object\",\"type\":\"WorkoutExercise\",\"relationName\":\"ExerciseToWorkoutExercise\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreCardioSet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"warmupTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avgHeartRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"workTime\",\"kind\":\"object\",\"type\":\"CoreCardioSetWorkoutTime\",\"relationName\":\"CoreCardioSetToCoreCardioSetWorkoutTime\"},{\"name\":\"avgSpeed\",\"kind\":\"object\",\"type\":\"CoreCardioSetAvgSpeed\",\"relationName\":\"CoreCardioSetToCoreCardioSetAvgSpeed\"},{\"name\":\"distance\",\"kind\":\"object\",\"type\":\"CoreCardioSetDistance\",\"relationName\":\"CoreCardioSetToCoreCardioSetDistance\"},{\"name\":\"calorieTarget\",\"kind\":\"object\",\"type\":\"CoreCardioSetCalorieTarget\",\"relationName\":\"CoreCardioSetToCoreCardioSetCalorieTarget\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreCardioSetCalorieTarget\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSet\",\"kind\":\"object\",\"type\":\"CoreCardioSet\",\"relationName\":\"CoreCardioSetToCoreCardioSetCalorieTarget\"},{\"name\":\"calorieTarget\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreCardioSetDistance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSet\",\"kind\":\"object\",\"type\":\"CoreCardioSet\",\"relationName\":\"CoreCardioSetToCoreCardioSetDistance\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreCardioSetAvgSpeed\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSet\",\"kind\":\"object\",\"type\":\"CoreCardioSet\",\"relationName\":\"CoreCardioSetToCoreCardioSetAvgSpeed\"},{\"name\":\"avgSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreCardioSetWorkoutTime\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreCardioSet\",\"kind\":\"object\",\"type\":\"CoreCardioSet\",\"relationName\":\"CoreCardioSetToCoreCardioSetWorkoutTime\"},{\"name\":\"workTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserCardioSet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"warmupTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"workTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avgHeartRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avgSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"caloriesBurned\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userWorkoutExerciseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skippedReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userWorkoutExercise\",\"kind\":\"object\",\"type\":\"UserWorkoutExercise\",\"relationName\":\"UserCardioSetToUserWorkoutExercise\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreStrengthSet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"restTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"numberOfSets\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hasWarmup\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"reps\",\"kind\":\"object\",\"type\":\"CoreStrengthSetReps\",\"relationName\":\"CoreStrengthSetToCoreStrengthSetReps\"},{\"name\":\"weight\",\"kind\":\"object\",\"type\":\"CoreStrengthSetWeight\",\"relationName\":\"CoreStrengthSetToCoreStrengthSetWeight\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreStrengthSetReps\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreStrengthSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreStrengthSet\",\"kind\":\"object\",\"type\":\"CoreStrengthSet\",\"relationName\":\"CoreStrengthSetToCoreStrengthSetReps\"},{\"name\":\"reps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CoreStrengthSetWeight\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreStrengthSetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coreStrengthSet\",\"kind\":\"object\",\"type\":\"CoreStrengthSet\",\"relationName\":\"CoreStrengthSetToCoreStrengthSetWeight\"},{\"name\":\"isBodyWeight\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserStrengthSet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isBodyWeight\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"restTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isWarmup\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isMuscleFailure\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isJointPain\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"skippedReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userWorkoutExerciseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userWorkoutExercise\",\"kind\":\"object\",\"type\":\"UserWorkoutExercise\",\"relationName\":\"UserStrengthSetToUserWorkoutExercise\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Program\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programWorkouts\",\"kind\":\"object\",\"type\":\"ProgramWorkout\",\"relationName\":\"ProgramToProgramWorkout\"},{\"name\":\"userWorkout\",\"kind\":\"object\",\"type\":\"UserWorkout\",\"relationName\":\"ProgramToUserWorkout\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProgramToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ProgramWorkout\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"ProgramToProgramWorkout\"},{\"name\":\"workoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workout\",\"kind\":\"object\",\"type\":\"Workout\",\"relationName\":\"ProgramWorkoutToWorkout\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workoutGoal\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"daysOfWeek\",\"kind\":\"enum\",\"type\":\"DaysOfWeek\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Workout\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isTemplate\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkout\"},{\"name\":\"workoutExercises\",\"kind\":\"object\",\"type\":\"WorkoutExercise\",\"relationName\":\"WorkoutToWorkoutExercise\"},{\"name\":\"programWorkouts\",\"kind\":\"object\",\"type\":\"ProgramWorkout\",\"relationName\":\"ProgramWorkoutToWorkout\"},{\"name\":\"userWorkouts\",\"kind\":\"object\",\"type\":\"UserWorkout\",\"relationName\":\"UserWorkoutToWorkout\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"WorkoutExercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hasWarmup\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isBodyWeight\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"exerciseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exercise\",\"kind\":\"object\",\"type\":\"Exercise\",\"relationName\":\"ExerciseToWorkoutExercise\"},{\"name\":\"workoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workout\",\"kind\":\"object\",\"type\":\"Workout\",\"relationName\":\"WorkoutToWorkoutExercise\"},{\"name\":\"userWorkoutExercises\",\"kind\":\"object\",\"type\":\"UserWorkoutExercise\",\"relationName\":\"UserWorkoutExerciseToWorkoutExercise\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserWorkoutExercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skippedReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workoutExerciseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workoutExercise\",\"kind\":\"object\",\"type\":\"WorkoutExercise\",\"relationName\":\"UserWorkoutExerciseToWorkoutExercise\"},{\"name\":\"userWorkoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userWorkout\",\"kind\":\"object\",\"type\":\"UserWorkout\",\"relationName\":\"UserWorkoutToUserWorkoutExercise\"},{\"name\":\"userStrengthSets\",\"kind\":\"object\",\"type\":\"UserStrengthSet\",\"relationName\":\"UserStrengthSetToUserWorkoutExercise\"},{\"name\":\"userCardioSets\",\"kind\":\"object\",\"type\":\"UserCardioSet\",\"relationName\":\"UserCardioSetToUserWorkoutExercise\"}],\"dbName\":null},\"UserWorkout\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateCompleted\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserWorkout\"},{\"name\":\"userWorkoutExercises\",\"kind\":\"object\",\"type\":\"UserWorkoutExercise\",\"relationName\":\"UserWorkoutToUserWorkoutExercise\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"ProgramToUserWorkout\"},{\"name\":\"workoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workout\",\"kind\":\"object\",\"type\":\"Workout\",\"relationName\":\"UserWorkoutToWorkout\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FoodItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"barcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"servingSize\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"calories\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"proteins\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"carbohydrates\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sugars\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"fat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"saturatedFat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"fiber\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"salt\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"cholesterol\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"brandId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brand\",\"kind\":\"object\",\"type\":\"FoodItemBrand\",\"relationName\":\"FoodItemToFoodItemBrand\"},{\"name\":\"categories\",\"kind\":\"object\",\"type\":\"FoodItemCategory\",\"relationName\":\"FoodItemToFoodItemCategory\"},{\"name\":\"labels\",\"kind\":\"object\",\"type\":\"FoodItemLabel\",\"relationName\":\"FoodItemToFoodItemLabel\"},{\"name\":\"mealFoodItem\",\"kind\":\"object\",\"type\":\"MealFoodItem\",\"relationName\":\"FoodItemToMealFoodItem\"},{\"name\":\"images\",\"kind\":\"object\",\"type\":\"FoodItemImg\",\"relationName\":\"FoodItemToFoodItemImg\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FoodItemLabel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItems\",\"kind\":\"object\",\"type\":\"FoodItem\",\"relationName\":\"FoodItemToFoodItemLabel\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FoodItemImg\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItem\",\"kind\":\"object\",\"type\":\"FoodItem\",\"relationName\":\"FoodItemToFoodItemImg\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FoodItemBrand\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItems\",\"kind\":\"object\",\"type\":\"FoodItem\",\"relationName\":\"FoodItemToFoodItemBrand\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FoodItemCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItems\",\"kind\":\"object\",\"type\":\"FoodItem\",\"relationName\":\"FoodItemToFoodItemCategory\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Meal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mealType\",\"kind\":\"enum\",\"type\":\"MealType\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MealToUser\"},{\"name\":\"mealFoodItems\",\"kind\":\"object\",\"type\":\"MealFoodItem\",\"relationName\":\"MealToMealFoodItem\"},{\"name\":\"userMeals\",\"kind\":\"object\",\"type\":\"UserMeal\",\"relationName\":\"MealToUserMeal\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"MealFoodItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mealId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meal\",\"kind\":\"object\",\"type\":\"Meal\",\"relationName\":\"MealToMealFoodItem\"},{\"name\":\"foodItemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"foodItem\",\"kind\":\"object\",\"type\":\"FoodItem\",\"relationName\":\"FoodItemToMealFoodItem\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserMeal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mealId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meal\",\"kind\":\"object\",\"type\":\"Meal\",\"relationName\":\"MealToUserMeal\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserMeal\"},{\"name\":\"dateConsumed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

