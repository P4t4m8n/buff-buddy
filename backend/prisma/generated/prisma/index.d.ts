
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model CoreCardioSet
 * 
 */
export type CoreCardioSet = $Result.DefaultSelection<Prisma.$CoreCardioSetPayload>
/**
 * Model CoreCardioSetCalorieTarget
 * 
 */
export type CoreCardioSetCalorieTarget = $Result.DefaultSelection<Prisma.$CoreCardioSetCalorieTargetPayload>
/**
 * Model CoreCardioSetDistance
 * 
 */
export type CoreCardioSetDistance = $Result.DefaultSelection<Prisma.$CoreCardioSetDistancePayload>
/**
 * Model CoreCardioSetAvgSpeed
 * 
 */
export type CoreCardioSetAvgSpeed = $Result.DefaultSelection<Prisma.$CoreCardioSetAvgSpeedPayload>
/**
 * Model CoreCardioSetWorkoutTime
 * 
 */
export type CoreCardioSetWorkoutTime = $Result.DefaultSelection<Prisma.$CoreCardioSetWorkoutTimePayload>
/**
 * Model UserCardioSet
 * 
 */
export type UserCardioSet = $Result.DefaultSelection<Prisma.$UserCardioSetPayload>
/**
 * Model CoreStrengthSet
 * 
 */
export type CoreStrengthSet = $Result.DefaultSelection<Prisma.$CoreStrengthSetPayload>
/**
 * Model CoreStrengthSetReps
 * 
 */
export type CoreStrengthSetReps = $Result.DefaultSelection<Prisma.$CoreStrengthSetRepsPayload>
/**
 * Model CoreStrengthSetWeight
 * 
 */
export type CoreStrengthSetWeight = $Result.DefaultSelection<Prisma.$CoreStrengthSetWeightPayload>
/**
 * Model UserStrengthSet
 * 
 */
export type UserStrengthSet = $Result.DefaultSelection<Prisma.$UserStrengthSetPayload>
/**
 * Model Program
 * 
 */
export type Program = $Result.DefaultSelection<Prisma.$ProgramPayload>
/**
 * Model ProgramWorkout
 * 
 */
export type ProgramWorkout = $Result.DefaultSelection<Prisma.$ProgramWorkoutPayload>
/**
 * Model Workout
 * 
 */
export type Workout = $Result.DefaultSelection<Prisma.$WorkoutPayload>
/**
 * Model WorkoutExercise
 * 
 */
export type WorkoutExercise = $Result.DefaultSelection<Prisma.$WorkoutExercisePayload>
/**
 * Model UserWorkoutExercise
 * 
 */
export type UserWorkoutExercise = $Result.DefaultSelection<Prisma.$UserWorkoutExercisePayload>
/**
 * Model UserWorkout
 * 
 */
export type UserWorkout = $Result.DefaultSelection<Prisma.$UserWorkoutPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ExerciseMuscle: {
  chest: 'chest',
  front_delts: 'front_delts',
  side_delts: 'side_delts',
  rear_delts: 'rear_delts',
  lats: 'lats',
  traps: 'traps',
  rhomboids: 'rhomboids',
  lower_back: 'lower_back',
  biceps: 'biceps',
  triceps: 'triceps',
  forearms: 'forearms',
  abs: 'abs',
  obliques: 'obliques',
  quads: 'quads',
  hamstrings: 'hamstrings',
  glutes: 'glutes',
  calves: 'calves',
  hip_flexors: 'hip_flexors',
  adductors: 'adductors',
  abductors: 'abductors',
  rotator_cuff: 'rotator_cuff',
  serratus_anterior: 'serratus_anterior'
};

export type ExerciseMuscle = (typeof ExerciseMuscle)[keyof typeof ExerciseMuscle]


export const ExerciseEquipment: {
  barbell: 'barbell',
  dumbbell: 'dumbbell',
  kettlebell: 'kettlebell',
  weight_plates: 'weight_plates',
  ez_curl_bar: 'ez_curl_bar',
  olympic_bar: 'olympic_bar',
  trap_bar: 'trap_bar',
  medicine_ball: 'medicine_ball',
  flat_bench: 'flat_bench',
  incline_bench: 'incline_bench',
  decline_bench: 'decline_bench',
  adjustable_bench: 'adjustable_bench',
  power_rack: 'power_rack',
  squat_rack: 'squat_rack',
  smith_machine: 'smith_machine',
  preacher_bench: 'preacher_bench',
  cable_machine: 'cable_machine',
  cable_crossover: 'cable_crossover',
  lat_pulldown: 'lat_pulldown',
  low_row: 'low_row',
  cable_column: 'cable_column',
  functional_trainer: 'functional_trainer',
  treadmill: 'treadmill',
  elliptical: 'elliptical',
  stationary_bike: 'stationary_bike',
  rowing_machine: 'rowing_machine',
  stair_climber: 'stair_climber',
  stepper: 'stepper',
  spin_bike: 'spin_bike',
  air_bike: 'air_bike',
  leg_press: 'leg_press',
  hack_squat: 'hack_squat',
  leg_curl: 'leg_curl',
  leg_extension: 'leg_extension',
  calf_raise_machine: 'calf_raise_machine',
  chest_press_machine: 'chest_press_machine',
  shoulder_press_machine: 'shoulder_press_machine',
  pec_deck: 'pec_deck',
  hip_abduction_machine: 'hip_abduction_machine',
  hip_adduction_machine: 'hip_adduction_machine',
  pull_up_bar: 'pull_up_bar',
  dip_station: 'dip_station',
  assisted_pull_up_machine: 'assisted_pull_up_machine',
  captains_chair: 'captains_chair',
  trx_straps: 'trx_straps',
  resistance_bands: 'resistance_bands',
  battle_ropes: 'battle_ropes',
  suspension_trainer: 'suspension_trainer',
  stability_ball: 'stability_ball',
  foam_roller: 'foam_roller',
  yoga_mat: 'yoga_mat',
  gymnastics_rings: 'gymnastics_rings',
  plyometric_box: 'plyometric_box',
  agility_ladder: 'agility_ladder',
  speed_rope: 'speed_rope',
  weight_belt: 'weight_belt',
  lifting_straps: 'lifting_straps',
  chalk: 'chalk',
  gloves: 'gloves',
  wrist_wraps: 'wrist_wraps',
  knee_sleeves: 'knee_sleeves'
};

export type ExerciseEquipment = (typeof ExerciseEquipment)[keyof typeof ExerciseEquipment]


export const ExerciseType: {
  strength: 'strength',
  cardio: 'cardio',
  flexibility: 'flexibility',
  miscellaneous: 'miscellaneous'
};

export type ExerciseType = (typeof ExerciseType)[keyof typeof ExerciseType]


export const DaysOfWeek: {
  sunday: 'sunday',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday'
};

export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek]

}

export type ExerciseMuscle = $Enums.ExerciseMuscle

export const ExerciseMuscle: typeof $Enums.ExerciseMuscle

export type ExerciseEquipment = $Enums.ExerciseEquipment

export const ExerciseEquipment: typeof $Enums.ExerciseEquipment

export type ExerciseType = $Enums.ExerciseType

export const ExerciseType: typeof $Enums.ExerciseType

export type DaysOfWeek = $Enums.DaysOfWeek

export const DaysOfWeek: typeof $Enums.DaysOfWeek

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreCardioSet`: Exposes CRUD operations for the **CoreCardioSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreCardioSets
    * const coreCardioSets = await prisma.coreCardioSet.findMany()
    * ```
    */
  get coreCardioSet(): Prisma.CoreCardioSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreCardioSetCalorieTarget`: Exposes CRUD operations for the **CoreCardioSetCalorieTarget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreCardioSetCalorieTargets
    * const coreCardioSetCalorieTargets = await prisma.coreCardioSetCalorieTarget.findMany()
    * ```
    */
  get coreCardioSetCalorieTarget(): Prisma.CoreCardioSetCalorieTargetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreCardioSetDistance`: Exposes CRUD operations for the **CoreCardioSetDistance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreCardioSetDistances
    * const coreCardioSetDistances = await prisma.coreCardioSetDistance.findMany()
    * ```
    */
  get coreCardioSetDistance(): Prisma.CoreCardioSetDistanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreCardioSetAvgSpeed`: Exposes CRUD operations for the **CoreCardioSetAvgSpeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreCardioSetAvgSpeeds
    * const coreCardioSetAvgSpeeds = await prisma.coreCardioSetAvgSpeed.findMany()
    * ```
    */
  get coreCardioSetAvgSpeed(): Prisma.CoreCardioSetAvgSpeedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreCardioSetWorkoutTime`: Exposes CRUD operations for the **CoreCardioSetWorkoutTime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreCardioSetWorkoutTimes
    * const coreCardioSetWorkoutTimes = await prisma.coreCardioSetWorkoutTime.findMany()
    * ```
    */
  get coreCardioSetWorkoutTime(): Prisma.CoreCardioSetWorkoutTimeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCardioSet`: Exposes CRUD operations for the **UserCardioSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCardioSets
    * const userCardioSets = await prisma.userCardioSet.findMany()
    * ```
    */
  get userCardioSet(): Prisma.UserCardioSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreStrengthSet`: Exposes CRUD operations for the **CoreStrengthSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreStrengthSets
    * const coreStrengthSets = await prisma.coreStrengthSet.findMany()
    * ```
    */
  get coreStrengthSet(): Prisma.CoreStrengthSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreStrengthSetReps`: Exposes CRUD operations for the **CoreStrengthSetReps** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreStrengthSetReps
    * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findMany()
    * ```
    */
  get coreStrengthSetReps(): Prisma.CoreStrengthSetRepsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coreStrengthSetWeight`: Exposes CRUD operations for the **CoreStrengthSetWeight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoreStrengthSetWeights
    * const coreStrengthSetWeights = await prisma.coreStrengthSetWeight.findMany()
    * ```
    */
  get coreStrengthSetWeight(): Prisma.CoreStrengthSetWeightDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStrengthSet`: Exposes CRUD operations for the **UserStrengthSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStrengthSets
    * const userStrengthSets = await prisma.userStrengthSet.findMany()
    * ```
    */
  get userStrengthSet(): Prisma.UserStrengthSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programs
    * const programs = await prisma.program.findMany()
    * ```
    */
  get program(): Prisma.ProgramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.programWorkout`: Exposes CRUD operations for the **ProgramWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProgramWorkouts
    * const programWorkouts = await prisma.programWorkout.findMany()
    * ```
    */
  get programWorkout(): Prisma.ProgramWorkoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **Workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.WorkoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutExercise`: Exposes CRUD operations for the **WorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutExercises
    * const workoutExercises = await prisma.workoutExercise.findMany()
    * ```
    */
  get workoutExercise(): Prisma.WorkoutExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userWorkoutExercise`: Exposes CRUD operations for the **UserWorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWorkoutExercises
    * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany()
    * ```
    */
  get userWorkoutExercise(): Prisma.UserWorkoutExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userWorkout`: Exposes CRUD operations for the **UserWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWorkouts
    * const userWorkouts = await prisma.userWorkout.findMany()
    * ```
    */
  get userWorkout(): Prisma.UserWorkoutDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Exercise: 'Exercise',
    CoreCardioSet: 'CoreCardioSet',
    CoreCardioSetCalorieTarget: 'CoreCardioSetCalorieTarget',
    CoreCardioSetDistance: 'CoreCardioSetDistance',
    CoreCardioSetAvgSpeed: 'CoreCardioSetAvgSpeed',
    CoreCardioSetWorkoutTime: 'CoreCardioSetWorkoutTime',
    UserCardioSet: 'UserCardioSet',
    CoreStrengthSet: 'CoreStrengthSet',
    CoreStrengthSetReps: 'CoreStrengthSetReps',
    CoreStrengthSetWeight: 'CoreStrengthSetWeight',
    UserStrengthSet: 'UserStrengthSet',
    Program: 'Program',
    ProgramWorkout: 'ProgramWorkout',
    Workout: 'Workout',
    WorkoutExercise: 'WorkoutExercise',
    UserWorkoutExercise: 'UserWorkoutExercise',
    UserWorkout: 'UserWorkout'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "exercise" | "coreCardioSet" | "coreCardioSetCalorieTarget" | "coreCardioSetDistance" | "coreCardioSetAvgSpeed" | "coreCardioSetWorkoutTime" | "userCardioSet" | "coreStrengthSet" | "coreStrengthSetReps" | "coreStrengthSetWeight" | "userStrengthSet" | "program" | "programWorkout" | "workout" | "workoutExercise" | "userWorkoutExercise" | "userWorkout"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      CoreCardioSet: {
        payload: Prisma.$CoreCardioSetPayload<ExtArgs>
        fields: Prisma.CoreCardioSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreCardioSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreCardioSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          findFirst: {
            args: Prisma.CoreCardioSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreCardioSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          findMany: {
            args: Prisma.CoreCardioSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>[]
          }
          create: {
            args: Prisma.CoreCardioSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          createMany: {
            args: Prisma.CoreCardioSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreCardioSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>[]
          }
          delete: {
            args: Prisma.CoreCardioSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          update: {
            args: Prisma.CoreCardioSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          deleteMany: {
            args: Prisma.CoreCardioSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreCardioSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreCardioSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>[]
          }
          upsert: {
            args: Prisma.CoreCardioSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetPayload>
          }
          aggregate: {
            args: Prisma.CoreCardioSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreCardioSet>
          }
          groupBy: {
            args: Prisma.CoreCardioSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreCardioSetCountArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetCountAggregateOutputType> | number
          }
        }
      }
      CoreCardioSetCalorieTarget: {
        payload: Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>
        fields: Prisma.CoreCardioSetCalorieTargetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreCardioSetCalorieTargetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreCardioSetCalorieTargetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          findFirst: {
            args: Prisma.CoreCardioSetCalorieTargetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreCardioSetCalorieTargetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          findMany: {
            args: Prisma.CoreCardioSetCalorieTargetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>[]
          }
          create: {
            args: Prisma.CoreCardioSetCalorieTargetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          createMany: {
            args: Prisma.CoreCardioSetCalorieTargetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreCardioSetCalorieTargetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>[]
          }
          delete: {
            args: Prisma.CoreCardioSetCalorieTargetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          update: {
            args: Prisma.CoreCardioSetCalorieTargetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          deleteMany: {
            args: Prisma.CoreCardioSetCalorieTargetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreCardioSetCalorieTargetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreCardioSetCalorieTargetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>[]
          }
          upsert: {
            args: Prisma.CoreCardioSetCalorieTargetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetCalorieTargetPayload>
          }
          aggregate: {
            args: Prisma.CoreCardioSetCalorieTargetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreCardioSetCalorieTarget>
          }
          groupBy: {
            args: Prisma.CoreCardioSetCalorieTargetGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetCalorieTargetGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreCardioSetCalorieTargetCountArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetCalorieTargetCountAggregateOutputType> | number
          }
        }
      }
      CoreCardioSetDistance: {
        payload: Prisma.$CoreCardioSetDistancePayload<ExtArgs>
        fields: Prisma.CoreCardioSetDistanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreCardioSetDistanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreCardioSetDistanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          findFirst: {
            args: Prisma.CoreCardioSetDistanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreCardioSetDistanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          findMany: {
            args: Prisma.CoreCardioSetDistanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>[]
          }
          create: {
            args: Prisma.CoreCardioSetDistanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          createMany: {
            args: Prisma.CoreCardioSetDistanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreCardioSetDistanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>[]
          }
          delete: {
            args: Prisma.CoreCardioSetDistanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          update: {
            args: Prisma.CoreCardioSetDistanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          deleteMany: {
            args: Prisma.CoreCardioSetDistanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreCardioSetDistanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreCardioSetDistanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>[]
          }
          upsert: {
            args: Prisma.CoreCardioSetDistanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetDistancePayload>
          }
          aggregate: {
            args: Prisma.CoreCardioSetDistanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreCardioSetDistance>
          }
          groupBy: {
            args: Prisma.CoreCardioSetDistanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetDistanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreCardioSetDistanceCountArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetDistanceCountAggregateOutputType> | number
          }
        }
      }
      CoreCardioSetAvgSpeed: {
        payload: Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>
        fields: Prisma.CoreCardioSetAvgSpeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreCardioSetAvgSpeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreCardioSetAvgSpeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          findFirst: {
            args: Prisma.CoreCardioSetAvgSpeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreCardioSetAvgSpeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          findMany: {
            args: Prisma.CoreCardioSetAvgSpeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>[]
          }
          create: {
            args: Prisma.CoreCardioSetAvgSpeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          createMany: {
            args: Prisma.CoreCardioSetAvgSpeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreCardioSetAvgSpeedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>[]
          }
          delete: {
            args: Prisma.CoreCardioSetAvgSpeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          update: {
            args: Prisma.CoreCardioSetAvgSpeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          deleteMany: {
            args: Prisma.CoreCardioSetAvgSpeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreCardioSetAvgSpeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreCardioSetAvgSpeedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>[]
          }
          upsert: {
            args: Prisma.CoreCardioSetAvgSpeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetAvgSpeedPayload>
          }
          aggregate: {
            args: Prisma.CoreCardioSetAvgSpeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreCardioSetAvgSpeed>
          }
          groupBy: {
            args: Prisma.CoreCardioSetAvgSpeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetAvgSpeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreCardioSetAvgSpeedCountArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetAvgSpeedCountAggregateOutputType> | number
          }
        }
      }
      CoreCardioSetWorkoutTime: {
        payload: Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>
        fields: Prisma.CoreCardioSetWorkoutTimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreCardioSetWorkoutTimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreCardioSetWorkoutTimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          findFirst: {
            args: Prisma.CoreCardioSetWorkoutTimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreCardioSetWorkoutTimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          findMany: {
            args: Prisma.CoreCardioSetWorkoutTimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>[]
          }
          create: {
            args: Prisma.CoreCardioSetWorkoutTimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          createMany: {
            args: Prisma.CoreCardioSetWorkoutTimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreCardioSetWorkoutTimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>[]
          }
          delete: {
            args: Prisma.CoreCardioSetWorkoutTimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          update: {
            args: Prisma.CoreCardioSetWorkoutTimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          deleteMany: {
            args: Prisma.CoreCardioSetWorkoutTimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreCardioSetWorkoutTimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreCardioSetWorkoutTimeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>[]
          }
          upsert: {
            args: Prisma.CoreCardioSetWorkoutTimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreCardioSetWorkoutTimePayload>
          }
          aggregate: {
            args: Prisma.CoreCardioSetWorkoutTimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreCardioSetWorkoutTime>
          }
          groupBy: {
            args: Prisma.CoreCardioSetWorkoutTimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetWorkoutTimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreCardioSetWorkoutTimeCountArgs<ExtArgs>
            result: $Utils.Optional<CoreCardioSetWorkoutTimeCountAggregateOutputType> | number
          }
        }
      }
      UserCardioSet: {
        payload: Prisma.$UserCardioSetPayload<ExtArgs>
        fields: Prisma.UserCardioSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCardioSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCardioSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          findFirst: {
            args: Prisma.UserCardioSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCardioSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          findMany: {
            args: Prisma.UserCardioSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          create: {
            args: Prisma.UserCardioSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          createMany: {
            args: Prisma.UserCardioSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCardioSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          delete: {
            args: Prisma.UserCardioSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          update: {
            args: Prisma.UserCardioSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          deleteMany: {
            args: Prisma.UserCardioSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCardioSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCardioSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          upsert: {
            args: Prisma.UserCardioSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          aggregate: {
            args: Prisma.UserCardioSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCardioSet>
          }
          groupBy: {
            args: Prisma.UserCardioSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCardioSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCardioSetCountArgs<ExtArgs>
            result: $Utils.Optional<UserCardioSetCountAggregateOutputType> | number
          }
        }
      }
      CoreStrengthSet: {
        payload: Prisma.$CoreStrengthSetPayload<ExtArgs>
        fields: Prisma.CoreStrengthSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreStrengthSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreStrengthSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          findFirst: {
            args: Prisma.CoreStrengthSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreStrengthSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          findMany: {
            args: Prisma.CoreStrengthSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>[]
          }
          create: {
            args: Prisma.CoreStrengthSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          createMany: {
            args: Prisma.CoreStrengthSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreStrengthSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>[]
          }
          delete: {
            args: Prisma.CoreStrengthSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          update: {
            args: Prisma.CoreStrengthSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          deleteMany: {
            args: Prisma.CoreStrengthSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreStrengthSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreStrengthSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>[]
          }
          upsert: {
            args: Prisma.CoreStrengthSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetPayload>
          }
          aggregate: {
            args: Prisma.CoreStrengthSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreStrengthSet>
          }
          groupBy: {
            args: Prisma.CoreStrengthSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreStrengthSetCountArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetCountAggregateOutputType> | number
          }
        }
      }
      CoreStrengthSetReps: {
        payload: Prisma.$CoreStrengthSetRepsPayload<ExtArgs>
        fields: Prisma.CoreStrengthSetRepsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreStrengthSetRepsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreStrengthSetRepsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          findFirst: {
            args: Prisma.CoreStrengthSetRepsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreStrengthSetRepsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          findMany: {
            args: Prisma.CoreStrengthSetRepsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>[]
          }
          create: {
            args: Prisma.CoreStrengthSetRepsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          createMany: {
            args: Prisma.CoreStrengthSetRepsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreStrengthSetRepsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>[]
          }
          delete: {
            args: Prisma.CoreStrengthSetRepsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          update: {
            args: Prisma.CoreStrengthSetRepsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          deleteMany: {
            args: Prisma.CoreStrengthSetRepsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreStrengthSetRepsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreStrengthSetRepsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>[]
          }
          upsert: {
            args: Prisma.CoreStrengthSetRepsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetRepsPayload>
          }
          aggregate: {
            args: Prisma.CoreStrengthSetRepsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreStrengthSetReps>
          }
          groupBy: {
            args: Prisma.CoreStrengthSetRepsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetRepsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreStrengthSetRepsCountArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetRepsCountAggregateOutputType> | number
          }
        }
      }
      CoreStrengthSetWeight: {
        payload: Prisma.$CoreStrengthSetWeightPayload<ExtArgs>
        fields: Prisma.CoreStrengthSetWeightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoreStrengthSetWeightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoreStrengthSetWeightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          findFirst: {
            args: Prisma.CoreStrengthSetWeightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoreStrengthSetWeightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          findMany: {
            args: Prisma.CoreStrengthSetWeightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>[]
          }
          create: {
            args: Prisma.CoreStrengthSetWeightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          createMany: {
            args: Prisma.CoreStrengthSetWeightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoreStrengthSetWeightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>[]
          }
          delete: {
            args: Prisma.CoreStrengthSetWeightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          update: {
            args: Prisma.CoreStrengthSetWeightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          deleteMany: {
            args: Prisma.CoreStrengthSetWeightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoreStrengthSetWeightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoreStrengthSetWeightUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>[]
          }
          upsert: {
            args: Prisma.CoreStrengthSetWeightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoreStrengthSetWeightPayload>
          }
          aggregate: {
            args: Prisma.CoreStrengthSetWeightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoreStrengthSetWeight>
          }
          groupBy: {
            args: Prisma.CoreStrengthSetWeightGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetWeightGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoreStrengthSetWeightCountArgs<ExtArgs>
            result: $Utils.Optional<CoreStrengthSetWeightCountAggregateOutputType> | number
          }
        }
      }
      UserStrengthSet: {
        payload: Prisma.$UserStrengthSetPayload<ExtArgs>
        fields: Prisma.UserStrengthSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStrengthSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStrengthSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          findFirst: {
            args: Prisma.UserStrengthSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStrengthSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          findMany: {
            args: Prisma.UserStrengthSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          create: {
            args: Prisma.UserStrengthSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          createMany: {
            args: Prisma.UserStrengthSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStrengthSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          delete: {
            args: Prisma.UserStrengthSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          update: {
            args: Prisma.UserStrengthSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          deleteMany: {
            args: Prisma.UserStrengthSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStrengthSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStrengthSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          upsert: {
            args: Prisma.UserStrengthSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          aggregate: {
            args: Prisma.UserStrengthSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStrengthSet>
          }
          groupBy: {
            args: Prisma.UserStrengthSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStrengthSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStrengthSetCountArgs<ExtArgs>
            result: $Utils.Optional<UserStrengthSetCountAggregateOutputType> | number
          }
        }
      }
      Program: {
        payload: Prisma.$ProgramPayload<ExtArgs>
        fields: Prisma.ProgramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findFirst: {
            args: Prisma.ProgramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findMany: {
            args: Prisma.ProgramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          create: {
            args: Prisma.ProgramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          createMany: {
            args: Prisma.ProgramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          delete: {
            args: Prisma.ProgramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          update: {
            args: Prisma.ProgramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          deleteMany: {
            args: Prisma.ProgramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          upsert: {
            args: Prisma.ProgramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          aggregate: {
            args: Prisma.ProgramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgram>
          }
          groupBy: {
            args: Prisma.ProgramGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramCountAggregateOutputType> | number
          }
        }
      }
      ProgramWorkout: {
        payload: Prisma.$ProgramWorkoutPayload<ExtArgs>
        fields: Prisma.ProgramWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramWorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          findFirst: {
            args: Prisma.ProgramWorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramWorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          findMany: {
            args: Prisma.ProgramWorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          create: {
            args: Prisma.ProgramWorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          createMany: {
            args: Prisma.ProgramWorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramWorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          delete: {
            args: Prisma.ProgramWorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          update: {
            args: Prisma.ProgramWorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.ProgramWorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramWorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          upsert: {
            args: Prisma.ProgramWorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          aggregate: {
            args: Prisma.ProgramWorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgramWorkout>
          }
          groupBy: {
            args: Prisma.ProgramWorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramWorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramWorkoutCountAggregateOutputType> | number
          }
        }
      }
      Workout: {
        payload: Prisma.$WorkoutPayload<ExtArgs>
        fields: Prisma.WorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findFirst: {
            args: Prisma.WorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findMany: {
            args: Prisma.WorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          create: {
            args: Prisma.WorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          createMany: {
            args: Prisma.WorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          delete: {
            args: Prisma.WorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          update: {
            args: Prisma.WorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          upsert: {
            args: Prisma.WorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.WorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      WorkoutExercise: {
        payload: Prisma.$WorkoutExercisePayload<ExtArgs>
        fields: Prisma.WorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          update: {
            args: Prisma.WorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          upsert: {
            args: Prisma.WorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutExercise>
          }
          groupBy: {
            args: Prisma.WorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      UserWorkoutExercise: {
        payload: Prisma.$UserWorkoutExercisePayload<ExtArgs>
        fields: Prisma.UserWorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserWorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.UserWorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.UserWorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.UserWorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.UserWorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.UserWorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          update: {
            args: Prisma.UserWorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.UserWorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserWorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          upsert: {
            args: Prisma.UserWorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.UserWorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserWorkoutExercise>
          }
          groupBy: {
            args: Prisma.UserWorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserWorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      UserWorkout: {
        payload: Prisma.$UserWorkoutPayload<ExtArgs>
        fields: Prisma.UserWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserWorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserWorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          findFirst: {
            args: Prisma.UserWorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserWorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          findMany: {
            args: Prisma.UserWorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          create: {
            args: Prisma.UserWorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          createMany: {
            args: Prisma.UserWorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserWorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          delete: {
            args: Prisma.UserWorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          update: {
            args: Prisma.UserWorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.UserWorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserWorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserWorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          upsert: {
            args: Prisma.UserWorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          aggregate: {
            args: Prisma.UserWorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserWorkout>
          }
          groupBy: {
            args: Prisma.UserWorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserWorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    exercise?: ExerciseOmit
    coreCardioSet?: CoreCardioSetOmit
    coreCardioSetCalorieTarget?: CoreCardioSetCalorieTargetOmit
    coreCardioSetDistance?: CoreCardioSetDistanceOmit
    coreCardioSetAvgSpeed?: CoreCardioSetAvgSpeedOmit
    coreCardioSetWorkoutTime?: CoreCardioSetWorkoutTimeOmit
    userCardioSet?: UserCardioSetOmit
    coreStrengthSet?: CoreStrengthSetOmit
    coreStrengthSetReps?: CoreStrengthSetRepsOmit
    coreStrengthSetWeight?: CoreStrengthSetWeightOmit
    userStrengthSet?: UserStrengthSetOmit
    program?: ProgramOmit
    programWorkout?: ProgramWorkoutOmit
    workout?: WorkoutOmit
    workoutExercise?: WorkoutExerciseOmit
    userWorkoutExercise?: UserWorkoutExerciseOmit
    userWorkout?: UserWorkoutOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    programs: number
    workouts: number
    userWorkout: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programs?: boolean | UserCountOutputTypeCountProgramsArgs
    workouts?: boolean | UserCountOutputTypeCountWorkoutsArgs
    userWorkout?: boolean | UserCountOutputTypeCountUserWorkoutArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProgramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    workoutExercises: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercises?: boolean | ExerciseCountOutputTypeCountWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }


  /**
   * Count Type CoreCardioSetCountOutputType
   */

  export type CoreCardioSetCountOutputType = {
    workoutExercise: number
    workTime: number
    avgSpeed: number
    distance: number
    calorieTarget: number
  }

  export type CoreCardioSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | CoreCardioSetCountOutputTypeCountWorkoutExerciseArgs
    workTime?: boolean | CoreCardioSetCountOutputTypeCountWorkTimeArgs
    avgSpeed?: boolean | CoreCardioSetCountOutputTypeCountAvgSpeedArgs
    distance?: boolean | CoreCardioSetCountOutputTypeCountDistanceArgs
    calorieTarget?: boolean | CoreCardioSetCountOutputTypeCountCalorieTargetArgs
  }

  // Custom InputTypes
  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCountOutputType
     */
    select?: CoreCardioSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeCountWorkoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }

  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeCountWorkTimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetWorkoutTimeWhereInput
  }

  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeCountAvgSpeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetAvgSpeedWhereInput
  }

  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeCountDistanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetDistanceWhereInput
  }

  /**
   * CoreCardioSetCountOutputType without action
   */
  export type CoreCardioSetCountOutputTypeCountCalorieTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetCalorieTargetWhereInput
  }


  /**
   * Count Type CoreStrengthSetCountOutputType
   */

  export type CoreStrengthSetCountOutputType = {
    workoutExercise: number
    reps: number
    weight: number
  }

  export type CoreStrengthSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | CoreStrengthSetCountOutputTypeCountWorkoutExerciseArgs
    reps?: boolean | CoreStrengthSetCountOutputTypeCountRepsArgs
    weight?: boolean | CoreStrengthSetCountOutputTypeCountWeightArgs
  }

  // Custom InputTypes
  /**
   * CoreStrengthSetCountOutputType without action
   */
  export type CoreStrengthSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetCountOutputType
     */
    select?: CoreStrengthSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoreStrengthSetCountOutputType without action
   */
  export type CoreStrengthSetCountOutputTypeCountWorkoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }

  /**
   * CoreStrengthSetCountOutputType without action
   */
  export type CoreStrengthSetCountOutputTypeCountRepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreStrengthSetRepsWhereInput
  }

  /**
   * CoreStrengthSetCountOutputType without action
   */
  export type CoreStrengthSetCountOutputTypeCountWeightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreStrengthSetWeightWhereInput
  }


  /**
   * Count Type ProgramCountOutputType
   */

  export type ProgramCountOutputType = {
    programWorkouts: number
    userWorkout: number
  }

  export type ProgramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programWorkouts?: boolean | ProgramCountOutputTypeCountProgramWorkoutsArgs
    userWorkout?: boolean | ProgramCountOutputTypeCountUserWorkoutArgs
  }

  // Custom InputTypes
  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramCountOutputType
     */
    select?: ProgramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountProgramWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountUserWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }


  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    workoutExercises: number
    programWorkouts: number
    userWorkouts: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercises?: boolean | WorkoutCountOutputTypeCountWorkoutExercisesArgs
    programWorkouts?: boolean | WorkoutCountOutputTypeCountProgramWorkoutsArgs
    userWorkouts?: boolean | WorkoutCountOutputTypeCountUserWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountProgramWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountUserWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }


  /**
   * Count Type WorkoutExerciseCountOutputType
   */

  export type WorkoutExerciseCountOutputType = {
    userWorkoutExercises: number
  }

  export type WorkoutExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercises?: boolean | WorkoutExerciseCountOutputTypeCountUserWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExerciseCountOutputType
     */
    select?: WorkoutExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeCountUserWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
  }


  /**
   * Count Type UserWorkoutExerciseCountOutputType
   */

  export type UserWorkoutExerciseCountOutputType = {
    userStrengthSet: number
    userCardioSet: number
  }

  export type UserWorkoutExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStrengthSet?: boolean | UserWorkoutExerciseCountOutputTypeCountUserStrengthSetArgs
    userCardioSet?: boolean | UserWorkoutExerciseCountOutputTypeCountUserCardioSetArgs
  }

  // Custom InputTypes
  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExerciseCountOutputType
     */
    select?: UserWorkoutExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeCountUserStrengthSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStrengthSetWhereInput
  }

  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeCountUserCardioSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardioSetWhereInput
  }


  /**
   * Count Type UserWorkoutCountOutputType
   */

  export type UserWorkoutCountOutputType = {
    userWorkoutExercises: number
  }

  export type UserWorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercises?: boolean | UserWorkoutCountOutputTypeCountUserWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * UserWorkoutCountOutputType without action
   */
  export type UserWorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutCountOutputType
     */
    select?: UserWorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserWorkoutCountOutputType without action
   */
  export type UserWorkoutCountOutputTypeCountUserWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    googleId: number
    firstName: number
    lastName: number
    imgUrl: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    programs?: boolean | User$programsArgs<ExtArgs>
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    userWorkout?: boolean | User$userWorkoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "googleId" | "firstName" | "lastName" | "imgUrl" | "isAdmin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programs?: boolean | User$programsArgs<ExtArgs>
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    userWorkout?: boolean | User$userWorkoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      programs: Prisma.$ProgramPayload<ExtArgs>[]
      workouts: Prisma.$WorkoutPayload<ExtArgs>[]
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string | null
      googleId: string | null
      firstName: string | null
      lastName: string | null
      imgUrl: string | null
      isAdmin: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programs<T extends User$programsArgs<ExtArgs> = {}>(args?: Subset<T, User$programsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workouts<T extends User$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkout<T extends User$userWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, User$userWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly imgUrl: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.programs
   */
  export type User$programsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    cursor?: ProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * User.workouts
   */
  export type User$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * User.userWorkout
   */
  export type User$userWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    youtubeUrl: string | null
    type: $Enums.ExerciseType | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    youtubeUrl: string | null
    type: $Enums.ExerciseType | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    youtubeUrl: number
    type: number
    notes: number
    equipment: number
    muscles: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    type?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    type?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    type?: true
    notes?: true
    equipment?: true
    muscles?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    youtubeUrl: string
    type: $Enums.ExerciseType
    notes: string | null
    equipment: $Enums.ExerciseEquipment[]
    muscles: $Enums.ExerciseMuscle[]
    createdAt: Date
    updatedAt: Date
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    type?: boolean
    notes?: boolean
    equipment?: boolean
    muscles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workoutExercises?: boolean | Exercise$workoutExercisesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    type?: boolean
    notes?: boolean
    equipment?: boolean
    muscles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    type?: boolean
    notes?: boolean
    equipment?: boolean
    muscles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    type?: boolean
    notes?: boolean
    equipment?: boolean
    muscles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "youtubeUrl" | "type" | "notes" | "equipment" | "muscles" | "createdAt" | "updatedAt", ExtArgs["result"]["exercise"]>
  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercises?: boolean | Exercise$workoutExercisesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      workoutExercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      youtubeUrl: string
      type: $Enums.ExerciseType
      notes: string | null
      equipment: $Enums.ExerciseEquipment[]
      muscles: $Enums.ExerciseMuscle[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutExercises<T extends Exercise$workoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly youtubeUrl: FieldRef<"Exercise", 'String'>
    readonly type: FieldRef<"Exercise", 'ExerciseType'>
    readonly notes: FieldRef<"Exercise", 'String'>
    readonly equipment: FieldRef<"Exercise", 'ExerciseEquipment[]'>
    readonly muscles: FieldRef<"Exercise", 'ExerciseMuscle[]'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedAt: FieldRef<"Exercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise updateManyAndReturn
   */
  export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to delete.
     */
    limit?: number
  }

  /**
   * Exercise.workoutExercises
   */
  export type Exercise$workoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model CoreCardioSet
   */

  export type AggregateCoreCardioSet = {
    _count: CoreCardioSetCountAggregateOutputType | null
    _avg: CoreCardioSetAvgAggregateOutputType | null
    _sum: CoreCardioSetSumAggregateOutputType | null
    _min: CoreCardioSetMinAggregateOutputType | null
    _max: CoreCardioSetMaxAggregateOutputType | null
  }

  export type CoreCardioSetAvgAggregateOutputType = {
    warmupTime: number | null
    avgHeartRate: number | null
  }

  export type CoreCardioSetSumAggregateOutputType = {
    warmupTime: number | null
    avgHeartRate: number | null
  }

  export type CoreCardioSetMinAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    avgHeartRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetMaxAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    avgHeartRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetCountAggregateOutputType = {
    id: number
    warmupTime: number
    avgHeartRate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreCardioSetAvgAggregateInputType = {
    warmupTime?: true
    avgHeartRate?: true
  }

  export type CoreCardioSetSumAggregateInputType = {
    warmupTime?: true
    avgHeartRate?: true
  }

  export type CoreCardioSetMinAggregateInputType = {
    id?: true
    warmupTime?: true
    avgHeartRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetMaxAggregateInputType = {
    id?: true
    warmupTime?: true
    avgHeartRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetCountAggregateInputType = {
    id?: true
    warmupTime?: true
    avgHeartRate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreCardioSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSet to aggregate.
     */
    where?: CoreCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSets to fetch.
     */
    orderBy?: CoreCardioSetOrderByWithRelationInput | CoreCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreCardioSets
    **/
    _count?: true | CoreCardioSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreCardioSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreCardioSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreCardioSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreCardioSetMaxAggregateInputType
  }

  export type GetCoreCardioSetAggregateType<T extends CoreCardioSetAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreCardioSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreCardioSet[P]>
      : GetScalarType<T[P], AggregateCoreCardioSet[P]>
  }




  export type CoreCardioSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetWhereInput
    orderBy?: CoreCardioSetOrderByWithAggregationInput | CoreCardioSetOrderByWithAggregationInput[]
    by: CoreCardioSetScalarFieldEnum[] | CoreCardioSetScalarFieldEnum
    having?: CoreCardioSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreCardioSetCountAggregateInputType | true
    _avg?: CoreCardioSetAvgAggregateInputType
    _sum?: CoreCardioSetSumAggregateInputType
    _min?: CoreCardioSetMinAggregateInputType
    _max?: CoreCardioSetMaxAggregateInputType
  }

  export type CoreCardioSetGroupByOutputType = {
    id: string
    warmupTime: number | null
    avgHeartRate: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreCardioSetCountAggregateOutputType | null
    _avg: CoreCardioSetAvgAggregateOutputType | null
    _sum: CoreCardioSetSumAggregateOutputType | null
    _min: CoreCardioSetMinAggregateOutputType | null
    _max: CoreCardioSetMaxAggregateOutputType | null
  }

  type GetCoreCardioSetGroupByPayload<T extends CoreCardioSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreCardioSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreCardioSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreCardioSetGroupByOutputType[P]>
            : GetScalarType<T[P], CoreCardioSetGroupByOutputType[P]>
        }
      >
    >


  export type CoreCardioSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    avgHeartRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workoutExercise?: boolean | CoreCardioSet$workoutExerciseArgs<ExtArgs>
    workTime?: boolean | CoreCardioSet$workTimeArgs<ExtArgs>
    avgSpeed?: boolean | CoreCardioSet$avgSpeedArgs<ExtArgs>
    distance?: boolean | CoreCardioSet$distanceArgs<ExtArgs>
    calorieTarget?: boolean | CoreCardioSet$calorieTargetArgs<ExtArgs>
    _count?: boolean | CoreCardioSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSet"]>

  export type CoreCardioSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    avgHeartRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coreCardioSet"]>

  export type CoreCardioSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    avgHeartRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coreCardioSet"]>

  export type CoreCardioSetSelectScalar = {
    id?: boolean
    warmupTime?: boolean
    avgHeartRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreCardioSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "warmupTime" | "avgHeartRate" | "createdAt" | "updatedAt", ExtArgs["result"]["coreCardioSet"]>
  export type CoreCardioSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | CoreCardioSet$workoutExerciseArgs<ExtArgs>
    workTime?: boolean | CoreCardioSet$workTimeArgs<ExtArgs>
    avgSpeed?: boolean | CoreCardioSet$avgSpeedArgs<ExtArgs>
    distance?: boolean | CoreCardioSet$distanceArgs<ExtArgs>
    calorieTarget?: boolean | CoreCardioSet$calorieTargetArgs<ExtArgs>
    _count?: boolean | CoreCardioSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoreCardioSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoreCardioSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreCardioSet"
    objects: {
      workoutExercise: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      workTime: Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>[]
      avgSpeed: Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>[]
      distance: Prisma.$CoreCardioSetDistancePayload<ExtArgs>[]
      calorieTarget: Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      warmupTime: number | null
      avgHeartRate: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreCardioSet"]>
    composites: {}
  }

  type CoreCardioSetGetPayload<S extends boolean | null | undefined | CoreCardioSetDefaultArgs> = $Result.GetResult<Prisma.$CoreCardioSetPayload, S>

  type CoreCardioSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreCardioSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreCardioSetCountAggregateInputType | true
    }

  export interface CoreCardioSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreCardioSet'], meta: { name: 'CoreCardioSet' } }
    /**
     * Find zero or one CoreCardioSet that matches the filter.
     * @param {CoreCardioSetFindUniqueArgs} args - Arguments to find a CoreCardioSet
     * @example
     * // Get one CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreCardioSetFindUniqueArgs>(args: SelectSubset<T, CoreCardioSetFindUniqueArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreCardioSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreCardioSetFindUniqueOrThrowArgs} args - Arguments to find a CoreCardioSet
     * @example
     * // Get one CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreCardioSetFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreCardioSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetFindFirstArgs} args - Arguments to find a CoreCardioSet
     * @example
     * // Get one CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreCardioSetFindFirstArgs>(args?: SelectSubset<T, CoreCardioSetFindFirstArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetFindFirstOrThrowArgs} args - Arguments to find a CoreCardioSet
     * @example
     * // Get one CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreCardioSetFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreCardioSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreCardioSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreCardioSets
     * const coreCardioSets = await prisma.coreCardioSet.findMany()
     * 
     * // Get first 10 CoreCardioSets
     * const coreCardioSets = await prisma.coreCardioSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreCardioSetWithIdOnly = await prisma.coreCardioSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreCardioSetFindManyArgs>(args?: SelectSubset<T, CoreCardioSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreCardioSet.
     * @param {CoreCardioSetCreateArgs} args - Arguments to create a CoreCardioSet.
     * @example
     * // Create one CoreCardioSet
     * const CoreCardioSet = await prisma.coreCardioSet.create({
     *   data: {
     *     // ... data to create a CoreCardioSet
     *   }
     * })
     * 
     */
    create<T extends CoreCardioSetCreateArgs>(args: SelectSubset<T, CoreCardioSetCreateArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreCardioSets.
     * @param {CoreCardioSetCreateManyArgs} args - Arguments to create many CoreCardioSets.
     * @example
     * // Create many CoreCardioSets
     * const coreCardioSet = await prisma.coreCardioSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreCardioSetCreateManyArgs>(args?: SelectSubset<T, CoreCardioSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreCardioSets and returns the data saved in the database.
     * @param {CoreCardioSetCreateManyAndReturnArgs} args - Arguments to create many CoreCardioSets.
     * @example
     * // Create many CoreCardioSets
     * const coreCardioSet = await prisma.coreCardioSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreCardioSets and only return the `id`
     * const coreCardioSetWithIdOnly = await prisma.coreCardioSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreCardioSetCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreCardioSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreCardioSet.
     * @param {CoreCardioSetDeleteArgs} args - Arguments to delete one CoreCardioSet.
     * @example
     * // Delete one CoreCardioSet
     * const CoreCardioSet = await prisma.coreCardioSet.delete({
     *   where: {
     *     // ... filter to delete one CoreCardioSet
     *   }
     * })
     * 
     */
    delete<T extends CoreCardioSetDeleteArgs>(args: SelectSubset<T, CoreCardioSetDeleteArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreCardioSet.
     * @param {CoreCardioSetUpdateArgs} args - Arguments to update one CoreCardioSet.
     * @example
     * // Update one CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreCardioSetUpdateArgs>(args: SelectSubset<T, CoreCardioSetUpdateArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreCardioSets.
     * @param {CoreCardioSetDeleteManyArgs} args - Arguments to filter CoreCardioSets to delete.
     * @example
     * // Delete a few CoreCardioSets
     * const { count } = await prisma.coreCardioSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreCardioSetDeleteManyArgs>(args?: SelectSubset<T, CoreCardioSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreCardioSets
     * const coreCardioSet = await prisma.coreCardioSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreCardioSetUpdateManyArgs>(args: SelectSubset<T, CoreCardioSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSets and returns the data updated in the database.
     * @param {CoreCardioSetUpdateManyAndReturnArgs} args - Arguments to update many CoreCardioSets.
     * @example
     * // Update many CoreCardioSets
     * const coreCardioSet = await prisma.coreCardioSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreCardioSets and only return the `id`
     * const coreCardioSetWithIdOnly = await prisma.coreCardioSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreCardioSetUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreCardioSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreCardioSet.
     * @param {CoreCardioSetUpsertArgs} args - Arguments to update or create a CoreCardioSet.
     * @example
     * // Update or create a CoreCardioSet
     * const coreCardioSet = await prisma.coreCardioSet.upsert({
     *   create: {
     *     // ... data to create a CoreCardioSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreCardioSet we want to update
     *   }
     * })
     */
    upsert<T extends CoreCardioSetUpsertArgs>(args: SelectSubset<T, CoreCardioSetUpsertArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCountArgs} args - Arguments to filter CoreCardioSets to count.
     * @example
     * // Count the number of CoreCardioSets
     * const count = await prisma.coreCardioSet.count({
     *   where: {
     *     // ... the filter for the CoreCardioSets we want to count
     *   }
     * })
    **/
    count<T extends CoreCardioSetCountArgs>(
      args?: Subset<T, CoreCardioSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreCardioSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreCardioSetAggregateArgs>(args: Subset<T, CoreCardioSetAggregateArgs>): Prisma.PrismaPromise<GetCoreCardioSetAggregateType<T>>

    /**
     * Group by CoreCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreCardioSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreCardioSetGroupByArgs['orderBy'] }
        : { orderBy?: CoreCardioSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreCardioSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreCardioSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreCardioSet model
   */
  readonly fields: CoreCardioSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreCardioSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreCardioSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutExercise<T extends CoreCardioSet$workoutExerciseArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSet$workoutExerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workTime<T extends CoreCardioSet$workTimeArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSet$workTimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    avgSpeed<T extends CoreCardioSet$avgSpeedArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSet$avgSpeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    distance<T extends CoreCardioSet$distanceArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSet$distanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    calorieTarget<T extends CoreCardioSet$calorieTargetArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSet$calorieTargetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreCardioSet model
   */
  interface CoreCardioSetFieldRefs {
    readonly id: FieldRef<"CoreCardioSet", 'String'>
    readonly warmupTime: FieldRef<"CoreCardioSet", 'Int'>
    readonly avgHeartRate: FieldRef<"CoreCardioSet", 'Int'>
    readonly createdAt: FieldRef<"CoreCardioSet", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreCardioSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreCardioSet findUnique
   */
  export type CoreCardioSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSet to fetch.
     */
    where: CoreCardioSetWhereUniqueInput
  }

  /**
   * CoreCardioSet findUniqueOrThrow
   */
  export type CoreCardioSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSet to fetch.
     */
    where: CoreCardioSetWhereUniqueInput
  }

  /**
   * CoreCardioSet findFirst
   */
  export type CoreCardioSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSet to fetch.
     */
    where?: CoreCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSets to fetch.
     */
    orderBy?: CoreCardioSetOrderByWithRelationInput | CoreCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSets.
     */
    cursor?: CoreCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSets.
     */
    distinct?: CoreCardioSetScalarFieldEnum | CoreCardioSetScalarFieldEnum[]
  }

  /**
   * CoreCardioSet findFirstOrThrow
   */
  export type CoreCardioSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSet to fetch.
     */
    where?: CoreCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSets to fetch.
     */
    orderBy?: CoreCardioSetOrderByWithRelationInput | CoreCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSets.
     */
    cursor?: CoreCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSets.
     */
    distinct?: CoreCardioSetScalarFieldEnum | CoreCardioSetScalarFieldEnum[]
  }

  /**
   * CoreCardioSet findMany
   */
  export type CoreCardioSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSets to fetch.
     */
    where?: CoreCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSets to fetch.
     */
    orderBy?: CoreCardioSetOrderByWithRelationInput | CoreCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreCardioSets.
     */
    cursor?: CoreCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSets.
     */
    skip?: number
    distinct?: CoreCardioSetScalarFieldEnum | CoreCardioSetScalarFieldEnum[]
  }

  /**
   * CoreCardioSet create
   */
  export type CoreCardioSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreCardioSet.
     */
    data: XOR<CoreCardioSetCreateInput, CoreCardioSetUncheckedCreateInput>
  }

  /**
   * CoreCardioSet createMany
   */
  export type CoreCardioSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreCardioSets.
     */
    data: CoreCardioSetCreateManyInput | CoreCardioSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSet createManyAndReturn
   */
  export type CoreCardioSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * The data used to create many CoreCardioSets.
     */
    data: CoreCardioSetCreateManyInput | CoreCardioSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSet update
   */
  export type CoreCardioSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreCardioSet.
     */
    data: XOR<CoreCardioSetUpdateInput, CoreCardioSetUncheckedUpdateInput>
    /**
     * Choose, which CoreCardioSet to update.
     */
    where: CoreCardioSetWhereUniqueInput
  }

  /**
   * CoreCardioSet updateMany
   */
  export type CoreCardioSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreCardioSets.
     */
    data: XOR<CoreCardioSetUpdateManyMutationInput, CoreCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSets to update
     */
    where?: CoreCardioSetWhereInput
    /**
     * Limit how many CoreCardioSets to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSet updateManyAndReturn
   */
  export type CoreCardioSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * The data used to update CoreCardioSets.
     */
    data: XOR<CoreCardioSetUpdateManyMutationInput, CoreCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSets to update
     */
    where?: CoreCardioSetWhereInput
    /**
     * Limit how many CoreCardioSets to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSet upsert
   */
  export type CoreCardioSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreCardioSet to update in case it exists.
     */
    where: CoreCardioSetWhereUniqueInput
    /**
     * In case the CoreCardioSet found by the `where` argument doesn't exist, create a new CoreCardioSet with this data.
     */
    create: XOR<CoreCardioSetCreateInput, CoreCardioSetUncheckedCreateInput>
    /**
     * In case the CoreCardioSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreCardioSetUpdateInput, CoreCardioSetUncheckedUpdateInput>
  }

  /**
   * CoreCardioSet delete
   */
  export type CoreCardioSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    /**
     * Filter which CoreCardioSet to delete.
     */
    where: CoreCardioSetWhereUniqueInput
  }

  /**
   * CoreCardioSet deleteMany
   */
  export type CoreCardioSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSets to delete
     */
    where?: CoreCardioSetWhereInput
    /**
     * Limit how many CoreCardioSets to delete.
     */
    limit?: number
  }

  /**
   * CoreCardioSet.workoutExercise
   */
  export type CoreCardioSet$workoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * CoreCardioSet.workTime
   */
  export type CoreCardioSet$workTimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    where?: CoreCardioSetWorkoutTimeWhereInput
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithRelationInput | CoreCardioSetWorkoutTimeOrderByWithRelationInput[]
    cursor?: CoreCardioSetWorkoutTimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreCardioSetWorkoutTimeScalarFieldEnum | CoreCardioSetWorkoutTimeScalarFieldEnum[]
  }

  /**
   * CoreCardioSet.avgSpeed
   */
  export type CoreCardioSet$avgSpeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    where?: CoreCardioSetAvgSpeedWhereInput
    orderBy?: CoreCardioSetAvgSpeedOrderByWithRelationInput | CoreCardioSetAvgSpeedOrderByWithRelationInput[]
    cursor?: CoreCardioSetAvgSpeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreCardioSetAvgSpeedScalarFieldEnum | CoreCardioSetAvgSpeedScalarFieldEnum[]
  }

  /**
   * CoreCardioSet.distance
   */
  export type CoreCardioSet$distanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    where?: CoreCardioSetDistanceWhereInput
    orderBy?: CoreCardioSetDistanceOrderByWithRelationInput | CoreCardioSetDistanceOrderByWithRelationInput[]
    cursor?: CoreCardioSetDistanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreCardioSetDistanceScalarFieldEnum | CoreCardioSetDistanceScalarFieldEnum[]
  }

  /**
   * CoreCardioSet.calorieTarget
   */
  export type CoreCardioSet$calorieTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    where?: CoreCardioSetCalorieTargetWhereInput
    orderBy?: CoreCardioSetCalorieTargetOrderByWithRelationInput | CoreCardioSetCalorieTargetOrderByWithRelationInput[]
    cursor?: CoreCardioSetCalorieTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreCardioSetCalorieTargetScalarFieldEnum | CoreCardioSetCalorieTargetScalarFieldEnum[]
  }

  /**
   * CoreCardioSet without action
   */
  export type CoreCardioSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
  }


  /**
   * Model CoreCardioSetCalorieTarget
   */

  export type AggregateCoreCardioSetCalorieTarget = {
    _count: CoreCardioSetCalorieTargetCountAggregateOutputType | null
    _avg: CoreCardioSetCalorieTargetAvgAggregateOutputType | null
    _sum: CoreCardioSetCalorieTargetSumAggregateOutputType | null
    _min: CoreCardioSetCalorieTargetMinAggregateOutputType | null
    _max: CoreCardioSetCalorieTargetMaxAggregateOutputType | null
  }

  export type CoreCardioSetCalorieTargetAvgAggregateOutputType = {
    calorieTarget: number | null
  }

  export type CoreCardioSetCalorieTargetSumAggregateOutputType = {
    calorieTarget: number | null
  }

  export type CoreCardioSetCalorieTargetMinAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    calorieTarget: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetCalorieTargetMaxAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    calorieTarget: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetCalorieTargetCountAggregateOutputType = {
    id: number
    coreCardioSetId: number
    calorieTarget: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreCardioSetCalorieTargetAvgAggregateInputType = {
    calorieTarget?: true
  }

  export type CoreCardioSetCalorieTargetSumAggregateInputType = {
    calorieTarget?: true
  }

  export type CoreCardioSetCalorieTargetMinAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    calorieTarget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetCalorieTargetMaxAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    calorieTarget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetCalorieTargetCountAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    calorieTarget?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreCardioSetCalorieTargetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetCalorieTarget to aggregate.
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetCalorieTargets to fetch.
     */
    orderBy?: CoreCardioSetCalorieTargetOrderByWithRelationInput | CoreCardioSetCalorieTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreCardioSetCalorieTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetCalorieTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetCalorieTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreCardioSetCalorieTargets
    **/
    _count?: true | CoreCardioSetCalorieTargetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreCardioSetCalorieTargetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreCardioSetCalorieTargetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreCardioSetCalorieTargetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreCardioSetCalorieTargetMaxAggregateInputType
  }

  export type GetCoreCardioSetCalorieTargetAggregateType<T extends CoreCardioSetCalorieTargetAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreCardioSetCalorieTarget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreCardioSetCalorieTarget[P]>
      : GetScalarType<T[P], AggregateCoreCardioSetCalorieTarget[P]>
  }




  export type CoreCardioSetCalorieTargetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetCalorieTargetWhereInput
    orderBy?: CoreCardioSetCalorieTargetOrderByWithAggregationInput | CoreCardioSetCalorieTargetOrderByWithAggregationInput[]
    by: CoreCardioSetCalorieTargetScalarFieldEnum[] | CoreCardioSetCalorieTargetScalarFieldEnum
    having?: CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreCardioSetCalorieTargetCountAggregateInputType | true
    _avg?: CoreCardioSetCalorieTargetAvgAggregateInputType
    _sum?: CoreCardioSetCalorieTargetSumAggregateInputType
    _min?: CoreCardioSetCalorieTargetMinAggregateInputType
    _max?: CoreCardioSetCalorieTargetMaxAggregateInputType
  }

  export type CoreCardioSetCalorieTargetGroupByOutputType = {
    id: string
    coreCardioSetId: string
    calorieTarget: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreCardioSetCalorieTargetCountAggregateOutputType | null
    _avg: CoreCardioSetCalorieTargetAvgAggregateOutputType | null
    _sum: CoreCardioSetCalorieTargetSumAggregateOutputType | null
    _min: CoreCardioSetCalorieTargetMinAggregateOutputType | null
    _max: CoreCardioSetCalorieTargetMaxAggregateOutputType | null
  }

  type GetCoreCardioSetCalorieTargetGroupByPayload<T extends CoreCardioSetCalorieTargetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreCardioSetCalorieTargetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreCardioSetCalorieTargetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreCardioSetCalorieTargetGroupByOutputType[P]>
            : GetScalarType<T[P], CoreCardioSetCalorieTargetGroupByOutputType[P]>
        }
      >
    >


  export type CoreCardioSetCalorieTargetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    calorieTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetCalorieTarget"]>

  export type CoreCardioSetCalorieTargetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    calorieTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetCalorieTarget"]>

  export type CoreCardioSetCalorieTargetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    calorieTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetCalorieTarget"]>

  export type CoreCardioSetCalorieTargetSelectScalar = {
    id?: boolean
    coreCardioSetId?: boolean
    calorieTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreCardioSetCalorieTargetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreCardioSetId" | "calorieTarget" | "createdAt" | "updatedAt", ExtArgs["result"]["coreCardioSetCalorieTarget"]>
  export type CoreCardioSetCalorieTargetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetCalorieTargetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetCalorieTargetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }

  export type $CoreCardioSetCalorieTargetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreCardioSetCalorieTarget"
    objects: {
      coreCardioSet: Prisma.$CoreCardioSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreCardioSetId: string
      calorieTarget: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreCardioSetCalorieTarget"]>
    composites: {}
  }

  type CoreCardioSetCalorieTargetGetPayload<S extends boolean | null | undefined | CoreCardioSetCalorieTargetDefaultArgs> = $Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload, S>

  type CoreCardioSetCalorieTargetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreCardioSetCalorieTargetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreCardioSetCalorieTargetCountAggregateInputType | true
    }

  export interface CoreCardioSetCalorieTargetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreCardioSetCalorieTarget'], meta: { name: 'CoreCardioSetCalorieTarget' } }
    /**
     * Find zero or one CoreCardioSetCalorieTarget that matches the filter.
     * @param {CoreCardioSetCalorieTargetFindUniqueArgs} args - Arguments to find a CoreCardioSetCalorieTarget
     * @example
     * // Get one CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreCardioSetCalorieTargetFindUniqueArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetFindUniqueArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreCardioSetCalorieTarget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreCardioSetCalorieTargetFindUniqueOrThrowArgs} args - Arguments to find a CoreCardioSetCalorieTarget
     * @example
     * // Get one CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreCardioSetCalorieTargetFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetCalorieTarget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetFindFirstArgs} args - Arguments to find a CoreCardioSetCalorieTarget
     * @example
     * // Get one CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreCardioSetCalorieTargetFindFirstArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetFindFirstArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetCalorieTarget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetFindFirstOrThrowArgs} args - Arguments to find a CoreCardioSetCalorieTarget
     * @example
     * // Get one CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreCardioSetCalorieTargetFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreCardioSetCalorieTargets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTargets = await prisma.coreCardioSetCalorieTarget.findMany()
     * 
     * // Get first 10 CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTargets = await prisma.coreCardioSetCalorieTarget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreCardioSetCalorieTargetWithIdOnly = await prisma.coreCardioSetCalorieTarget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreCardioSetCalorieTargetFindManyArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreCardioSetCalorieTarget.
     * @param {CoreCardioSetCalorieTargetCreateArgs} args - Arguments to create a CoreCardioSetCalorieTarget.
     * @example
     * // Create one CoreCardioSetCalorieTarget
     * const CoreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.create({
     *   data: {
     *     // ... data to create a CoreCardioSetCalorieTarget
     *   }
     * })
     * 
     */
    create<T extends CoreCardioSetCalorieTargetCreateArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetCreateArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreCardioSetCalorieTargets.
     * @param {CoreCardioSetCalorieTargetCreateManyArgs} args - Arguments to create many CoreCardioSetCalorieTargets.
     * @example
     * // Create many CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreCardioSetCalorieTargetCreateManyArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreCardioSetCalorieTargets and returns the data saved in the database.
     * @param {CoreCardioSetCalorieTargetCreateManyAndReturnArgs} args - Arguments to create many CoreCardioSetCalorieTargets.
     * @example
     * // Create many CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreCardioSetCalorieTargets and only return the `id`
     * const coreCardioSetCalorieTargetWithIdOnly = await prisma.coreCardioSetCalorieTarget.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreCardioSetCalorieTargetCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreCardioSetCalorieTarget.
     * @param {CoreCardioSetCalorieTargetDeleteArgs} args - Arguments to delete one CoreCardioSetCalorieTarget.
     * @example
     * // Delete one CoreCardioSetCalorieTarget
     * const CoreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.delete({
     *   where: {
     *     // ... filter to delete one CoreCardioSetCalorieTarget
     *   }
     * })
     * 
     */
    delete<T extends CoreCardioSetCalorieTargetDeleteArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetDeleteArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreCardioSetCalorieTarget.
     * @param {CoreCardioSetCalorieTargetUpdateArgs} args - Arguments to update one CoreCardioSetCalorieTarget.
     * @example
     * // Update one CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreCardioSetCalorieTargetUpdateArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetUpdateArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreCardioSetCalorieTargets.
     * @param {CoreCardioSetCalorieTargetDeleteManyArgs} args - Arguments to filter CoreCardioSetCalorieTargets to delete.
     * @example
     * // Delete a few CoreCardioSetCalorieTargets
     * const { count } = await prisma.coreCardioSetCalorieTarget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreCardioSetCalorieTargetDeleteManyArgs>(args?: SelectSubset<T, CoreCardioSetCalorieTargetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetCalorieTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreCardioSetCalorieTargetUpdateManyArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetCalorieTargets and returns the data updated in the database.
     * @param {CoreCardioSetCalorieTargetUpdateManyAndReturnArgs} args - Arguments to update many CoreCardioSetCalorieTargets.
     * @example
     * // Update many CoreCardioSetCalorieTargets
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreCardioSetCalorieTargets and only return the `id`
     * const coreCardioSetCalorieTargetWithIdOnly = await prisma.coreCardioSetCalorieTarget.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreCardioSetCalorieTargetUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreCardioSetCalorieTarget.
     * @param {CoreCardioSetCalorieTargetUpsertArgs} args - Arguments to update or create a CoreCardioSetCalorieTarget.
     * @example
     * // Update or create a CoreCardioSetCalorieTarget
     * const coreCardioSetCalorieTarget = await prisma.coreCardioSetCalorieTarget.upsert({
     *   create: {
     *     // ... data to create a CoreCardioSetCalorieTarget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreCardioSetCalorieTarget we want to update
     *   }
     * })
     */
    upsert<T extends CoreCardioSetCalorieTargetUpsertArgs>(args: SelectSubset<T, CoreCardioSetCalorieTargetUpsertArgs<ExtArgs>>): Prisma__CoreCardioSetCalorieTargetClient<$Result.GetResult<Prisma.$CoreCardioSetCalorieTargetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreCardioSetCalorieTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetCountArgs} args - Arguments to filter CoreCardioSetCalorieTargets to count.
     * @example
     * // Count the number of CoreCardioSetCalorieTargets
     * const count = await prisma.coreCardioSetCalorieTarget.count({
     *   where: {
     *     // ... the filter for the CoreCardioSetCalorieTargets we want to count
     *   }
     * })
    **/
    count<T extends CoreCardioSetCalorieTargetCountArgs>(
      args?: Subset<T, CoreCardioSetCalorieTargetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreCardioSetCalorieTargetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreCardioSetCalorieTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreCardioSetCalorieTargetAggregateArgs>(args: Subset<T, CoreCardioSetCalorieTargetAggregateArgs>): Prisma.PrismaPromise<GetCoreCardioSetCalorieTargetAggregateType<T>>

    /**
     * Group by CoreCardioSetCalorieTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetCalorieTargetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreCardioSetCalorieTargetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreCardioSetCalorieTargetGroupByArgs['orderBy'] }
        : { orderBy?: CoreCardioSetCalorieTargetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreCardioSetCalorieTargetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreCardioSetCalorieTargetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreCardioSetCalorieTarget model
   */
  readonly fields: CoreCardioSetCalorieTargetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreCardioSetCalorieTarget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreCardioSetCalorieTargetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreCardioSet<T extends CoreCardioSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSetDefaultArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreCardioSetCalorieTarget model
   */
  interface CoreCardioSetCalorieTargetFieldRefs {
    readonly id: FieldRef<"CoreCardioSetCalorieTarget", 'String'>
    readonly coreCardioSetId: FieldRef<"CoreCardioSetCalorieTarget", 'String'>
    readonly calorieTarget: FieldRef<"CoreCardioSetCalorieTarget", 'Int'>
    readonly createdAt: FieldRef<"CoreCardioSetCalorieTarget", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreCardioSetCalorieTarget", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreCardioSetCalorieTarget findUnique
   */
  export type CoreCardioSetCalorieTargetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetCalorieTarget to fetch.
     */
    where: CoreCardioSetCalorieTargetWhereUniqueInput
  }

  /**
   * CoreCardioSetCalorieTarget findUniqueOrThrow
   */
  export type CoreCardioSetCalorieTargetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetCalorieTarget to fetch.
     */
    where: CoreCardioSetCalorieTargetWhereUniqueInput
  }

  /**
   * CoreCardioSetCalorieTarget findFirst
   */
  export type CoreCardioSetCalorieTargetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetCalorieTarget to fetch.
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetCalorieTargets to fetch.
     */
    orderBy?: CoreCardioSetCalorieTargetOrderByWithRelationInput | CoreCardioSetCalorieTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetCalorieTargets.
     */
    cursor?: CoreCardioSetCalorieTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetCalorieTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetCalorieTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetCalorieTargets.
     */
    distinct?: CoreCardioSetCalorieTargetScalarFieldEnum | CoreCardioSetCalorieTargetScalarFieldEnum[]
  }

  /**
   * CoreCardioSetCalorieTarget findFirstOrThrow
   */
  export type CoreCardioSetCalorieTargetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetCalorieTarget to fetch.
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetCalorieTargets to fetch.
     */
    orderBy?: CoreCardioSetCalorieTargetOrderByWithRelationInput | CoreCardioSetCalorieTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetCalorieTargets.
     */
    cursor?: CoreCardioSetCalorieTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetCalorieTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetCalorieTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetCalorieTargets.
     */
    distinct?: CoreCardioSetCalorieTargetScalarFieldEnum | CoreCardioSetCalorieTargetScalarFieldEnum[]
  }

  /**
   * CoreCardioSetCalorieTarget findMany
   */
  export type CoreCardioSetCalorieTargetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetCalorieTargets to fetch.
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetCalorieTargets to fetch.
     */
    orderBy?: CoreCardioSetCalorieTargetOrderByWithRelationInput | CoreCardioSetCalorieTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreCardioSetCalorieTargets.
     */
    cursor?: CoreCardioSetCalorieTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetCalorieTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetCalorieTargets.
     */
    skip?: number
    distinct?: CoreCardioSetCalorieTargetScalarFieldEnum | CoreCardioSetCalorieTargetScalarFieldEnum[]
  }

  /**
   * CoreCardioSetCalorieTarget create
   */
  export type CoreCardioSetCalorieTargetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreCardioSetCalorieTarget.
     */
    data: XOR<CoreCardioSetCalorieTargetCreateInput, CoreCardioSetCalorieTargetUncheckedCreateInput>
  }

  /**
   * CoreCardioSetCalorieTarget createMany
   */
  export type CoreCardioSetCalorieTargetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreCardioSetCalorieTargets.
     */
    data: CoreCardioSetCalorieTargetCreateManyInput | CoreCardioSetCalorieTargetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSetCalorieTarget createManyAndReturn
   */
  export type CoreCardioSetCalorieTargetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * The data used to create many CoreCardioSetCalorieTargets.
     */
    data: CoreCardioSetCalorieTargetCreateManyInput | CoreCardioSetCalorieTargetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetCalorieTarget update
   */
  export type CoreCardioSetCalorieTargetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreCardioSetCalorieTarget.
     */
    data: XOR<CoreCardioSetCalorieTargetUpdateInput, CoreCardioSetCalorieTargetUncheckedUpdateInput>
    /**
     * Choose, which CoreCardioSetCalorieTarget to update.
     */
    where: CoreCardioSetCalorieTargetWhereUniqueInput
  }

  /**
   * CoreCardioSetCalorieTarget updateMany
   */
  export type CoreCardioSetCalorieTargetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreCardioSetCalorieTargets.
     */
    data: XOR<CoreCardioSetCalorieTargetUpdateManyMutationInput, CoreCardioSetCalorieTargetUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetCalorieTargets to update
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * Limit how many CoreCardioSetCalorieTargets to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSetCalorieTarget updateManyAndReturn
   */
  export type CoreCardioSetCalorieTargetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * The data used to update CoreCardioSetCalorieTargets.
     */
    data: XOR<CoreCardioSetCalorieTargetUpdateManyMutationInput, CoreCardioSetCalorieTargetUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetCalorieTargets to update
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * Limit how many CoreCardioSetCalorieTargets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetCalorieTarget upsert
   */
  export type CoreCardioSetCalorieTargetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreCardioSetCalorieTarget to update in case it exists.
     */
    where: CoreCardioSetCalorieTargetWhereUniqueInput
    /**
     * In case the CoreCardioSetCalorieTarget found by the `where` argument doesn't exist, create a new CoreCardioSetCalorieTarget with this data.
     */
    create: XOR<CoreCardioSetCalorieTargetCreateInput, CoreCardioSetCalorieTargetUncheckedCreateInput>
    /**
     * In case the CoreCardioSetCalorieTarget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreCardioSetCalorieTargetUpdateInput, CoreCardioSetCalorieTargetUncheckedUpdateInput>
  }

  /**
   * CoreCardioSetCalorieTarget delete
   */
  export type CoreCardioSetCalorieTargetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
    /**
     * Filter which CoreCardioSetCalorieTarget to delete.
     */
    where: CoreCardioSetCalorieTargetWhereUniqueInput
  }

  /**
   * CoreCardioSetCalorieTarget deleteMany
   */
  export type CoreCardioSetCalorieTargetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetCalorieTargets to delete
     */
    where?: CoreCardioSetCalorieTargetWhereInput
    /**
     * Limit how many CoreCardioSetCalorieTargets to delete.
     */
    limit?: number
  }

  /**
   * CoreCardioSetCalorieTarget without action
   */
  export type CoreCardioSetCalorieTargetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetCalorieTarget
     */
    select?: CoreCardioSetCalorieTargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetCalorieTarget
     */
    omit?: CoreCardioSetCalorieTargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetCalorieTargetInclude<ExtArgs> | null
  }


  /**
   * Model CoreCardioSetDistance
   */

  export type AggregateCoreCardioSetDistance = {
    _count: CoreCardioSetDistanceCountAggregateOutputType | null
    _avg: CoreCardioSetDistanceAvgAggregateOutputType | null
    _sum: CoreCardioSetDistanceSumAggregateOutputType | null
    _min: CoreCardioSetDistanceMinAggregateOutputType | null
    _max: CoreCardioSetDistanceMaxAggregateOutputType | null
  }

  export type CoreCardioSetDistanceAvgAggregateOutputType = {
    distance: number | null
  }

  export type CoreCardioSetDistanceSumAggregateOutputType = {
    distance: number | null
  }

  export type CoreCardioSetDistanceMinAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    distance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetDistanceMaxAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    distance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetDistanceCountAggregateOutputType = {
    id: number
    coreCardioSetId: number
    distance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreCardioSetDistanceAvgAggregateInputType = {
    distance?: true
  }

  export type CoreCardioSetDistanceSumAggregateInputType = {
    distance?: true
  }

  export type CoreCardioSetDistanceMinAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    distance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetDistanceMaxAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    distance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetDistanceCountAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    distance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreCardioSetDistanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetDistance to aggregate.
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetDistances to fetch.
     */
    orderBy?: CoreCardioSetDistanceOrderByWithRelationInput | CoreCardioSetDistanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreCardioSetDistanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetDistances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetDistances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreCardioSetDistances
    **/
    _count?: true | CoreCardioSetDistanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreCardioSetDistanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreCardioSetDistanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreCardioSetDistanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreCardioSetDistanceMaxAggregateInputType
  }

  export type GetCoreCardioSetDistanceAggregateType<T extends CoreCardioSetDistanceAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreCardioSetDistance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreCardioSetDistance[P]>
      : GetScalarType<T[P], AggregateCoreCardioSetDistance[P]>
  }




  export type CoreCardioSetDistanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetDistanceWhereInput
    orderBy?: CoreCardioSetDistanceOrderByWithAggregationInput | CoreCardioSetDistanceOrderByWithAggregationInput[]
    by: CoreCardioSetDistanceScalarFieldEnum[] | CoreCardioSetDistanceScalarFieldEnum
    having?: CoreCardioSetDistanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreCardioSetDistanceCountAggregateInputType | true
    _avg?: CoreCardioSetDistanceAvgAggregateInputType
    _sum?: CoreCardioSetDistanceSumAggregateInputType
    _min?: CoreCardioSetDistanceMinAggregateInputType
    _max?: CoreCardioSetDistanceMaxAggregateInputType
  }

  export type CoreCardioSetDistanceGroupByOutputType = {
    id: string
    coreCardioSetId: string
    distance: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreCardioSetDistanceCountAggregateOutputType | null
    _avg: CoreCardioSetDistanceAvgAggregateOutputType | null
    _sum: CoreCardioSetDistanceSumAggregateOutputType | null
    _min: CoreCardioSetDistanceMinAggregateOutputType | null
    _max: CoreCardioSetDistanceMaxAggregateOutputType | null
  }

  type GetCoreCardioSetDistanceGroupByPayload<T extends CoreCardioSetDistanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreCardioSetDistanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreCardioSetDistanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreCardioSetDistanceGroupByOutputType[P]>
            : GetScalarType<T[P], CoreCardioSetDistanceGroupByOutputType[P]>
        }
      >
    >


  export type CoreCardioSetDistanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    distance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetDistance"]>

  export type CoreCardioSetDistanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    distance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetDistance"]>

  export type CoreCardioSetDistanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    distance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetDistance"]>

  export type CoreCardioSetDistanceSelectScalar = {
    id?: boolean
    coreCardioSetId?: boolean
    distance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreCardioSetDistanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreCardioSetId" | "distance" | "createdAt" | "updatedAt", ExtArgs["result"]["coreCardioSetDistance"]>
  export type CoreCardioSetDistanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetDistanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetDistanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }

  export type $CoreCardioSetDistancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreCardioSetDistance"
    objects: {
      coreCardioSet: Prisma.$CoreCardioSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreCardioSetId: string
      distance: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreCardioSetDistance"]>
    composites: {}
  }

  type CoreCardioSetDistanceGetPayload<S extends boolean | null | undefined | CoreCardioSetDistanceDefaultArgs> = $Result.GetResult<Prisma.$CoreCardioSetDistancePayload, S>

  type CoreCardioSetDistanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreCardioSetDistanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreCardioSetDistanceCountAggregateInputType | true
    }

  export interface CoreCardioSetDistanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreCardioSetDistance'], meta: { name: 'CoreCardioSetDistance' } }
    /**
     * Find zero or one CoreCardioSetDistance that matches the filter.
     * @param {CoreCardioSetDistanceFindUniqueArgs} args - Arguments to find a CoreCardioSetDistance
     * @example
     * // Get one CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreCardioSetDistanceFindUniqueArgs>(args: SelectSubset<T, CoreCardioSetDistanceFindUniqueArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreCardioSetDistance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreCardioSetDistanceFindUniqueOrThrowArgs} args - Arguments to find a CoreCardioSetDistance
     * @example
     * // Get one CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreCardioSetDistanceFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreCardioSetDistanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetDistance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceFindFirstArgs} args - Arguments to find a CoreCardioSetDistance
     * @example
     * // Get one CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreCardioSetDistanceFindFirstArgs>(args?: SelectSubset<T, CoreCardioSetDistanceFindFirstArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetDistance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceFindFirstOrThrowArgs} args - Arguments to find a CoreCardioSetDistance
     * @example
     * // Get one CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreCardioSetDistanceFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreCardioSetDistanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreCardioSetDistances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreCardioSetDistances
     * const coreCardioSetDistances = await prisma.coreCardioSetDistance.findMany()
     * 
     * // Get first 10 CoreCardioSetDistances
     * const coreCardioSetDistances = await prisma.coreCardioSetDistance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreCardioSetDistanceWithIdOnly = await prisma.coreCardioSetDistance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreCardioSetDistanceFindManyArgs>(args?: SelectSubset<T, CoreCardioSetDistanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreCardioSetDistance.
     * @param {CoreCardioSetDistanceCreateArgs} args - Arguments to create a CoreCardioSetDistance.
     * @example
     * // Create one CoreCardioSetDistance
     * const CoreCardioSetDistance = await prisma.coreCardioSetDistance.create({
     *   data: {
     *     // ... data to create a CoreCardioSetDistance
     *   }
     * })
     * 
     */
    create<T extends CoreCardioSetDistanceCreateArgs>(args: SelectSubset<T, CoreCardioSetDistanceCreateArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreCardioSetDistances.
     * @param {CoreCardioSetDistanceCreateManyArgs} args - Arguments to create many CoreCardioSetDistances.
     * @example
     * // Create many CoreCardioSetDistances
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreCardioSetDistanceCreateManyArgs>(args?: SelectSubset<T, CoreCardioSetDistanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreCardioSetDistances and returns the data saved in the database.
     * @param {CoreCardioSetDistanceCreateManyAndReturnArgs} args - Arguments to create many CoreCardioSetDistances.
     * @example
     * // Create many CoreCardioSetDistances
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreCardioSetDistances and only return the `id`
     * const coreCardioSetDistanceWithIdOnly = await prisma.coreCardioSetDistance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreCardioSetDistanceCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreCardioSetDistanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreCardioSetDistance.
     * @param {CoreCardioSetDistanceDeleteArgs} args - Arguments to delete one CoreCardioSetDistance.
     * @example
     * // Delete one CoreCardioSetDistance
     * const CoreCardioSetDistance = await prisma.coreCardioSetDistance.delete({
     *   where: {
     *     // ... filter to delete one CoreCardioSetDistance
     *   }
     * })
     * 
     */
    delete<T extends CoreCardioSetDistanceDeleteArgs>(args: SelectSubset<T, CoreCardioSetDistanceDeleteArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreCardioSetDistance.
     * @param {CoreCardioSetDistanceUpdateArgs} args - Arguments to update one CoreCardioSetDistance.
     * @example
     * // Update one CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreCardioSetDistanceUpdateArgs>(args: SelectSubset<T, CoreCardioSetDistanceUpdateArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreCardioSetDistances.
     * @param {CoreCardioSetDistanceDeleteManyArgs} args - Arguments to filter CoreCardioSetDistances to delete.
     * @example
     * // Delete a few CoreCardioSetDistances
     * const { count } = await prisma.coreCardioSetDistance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreCardioSetDistanceDeleteManyArgs>(args?: SelectSubset<T, CoreCardioSetDistanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetDistances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreCardioSetDistances
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreCardioSetDistanceUpdateManyArgs>(args: SelectSubset<T, CoreCardioSetDistanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetDistances and returns the data updated in the database.
     * @param {CoreCardioSetDistanceUpdateManyAndReturnArgs} args - Arguments to update many CoreCardioSetDistances.
     * @example
     * // Update many CoreCardioSetDistances
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreCardioSetDistances and only return the `id`
     * const coreCardioSetDistanceWithIdOnly = await prisma.coreCardioSetDistance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreCardioSetDistanceUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreCardioSetDistanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreCardioSetDistance.
     * @param {CoreCardioSetDistanceUpsertArgs} args - Arguments to update or create a CoreCardioSetDistance.
     * @example
     * // Update or create a CoreCardioSetDistance
     * const coreCardioSetDistance = await prisma.coreCardioSetDistance.upsert({
     *   create: {
     *     // ... data to create a CoreCardioSetDistance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreCardioSetDistance we want to update
     *   }
     * })
     */
    upsert<T extends CoreCardioSetDistanceUpsertArgs>(args: SelectSubset<T, CoreCardioSetDistanceUpsertArgs<ExtArgs>>): Prisma__CoreCardioSetDistanceClient<$Result.GetResult<Prisma.$CoreCardioSetDistancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreCardioSetDistances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceCountArgs} args - Arguments to filter CoreCardioSetDistances to count.
     * @example
     * // Count the number of CoreCardioSetDistances
     * const count = await prisma.coreCardioSetDistance.count({
     *   where: {
     *     // ... the filter for the CoreCardioSetDistances we want to count
     *   }
     * })
    **/
    count<T extends CoreCardioSetDistanceCountArgs>(
      args?: Subset<T, CoreCardioSetDistanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreCardioSetDistanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreCardioSetDistance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreCardioSetDistanceAggregateArgs>(args: Subset<T, CoreCardioSetDistanceAggregateArgs>): Prisma.PrismaPromise<GetCoreCardioSetDistanceAggregateType<T>>

    /**
     * Group by CoreCardioSetDistance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetDistanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreCardioSetDistanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreCardioSetDistanceGroupByArgs['orderBy'] }
        : { orderBy?: CoreCardioSetDistanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreCardioSetDistanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreCardioSetDistanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreCardioSetDistance model
   */
  readonly fields: CoreCardioSetDistanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreCardioSetDistance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreCardioSetDistanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreCardioSet<T extends CoreCardioSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSetDefaultArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreCardioSetDistance model
   */
  interface CoreCardioSetDistanceFieldRefs {
    readonly id: FieldRef<"CoreCardioSetDistance", 'String'>
    readonly coreCardioSetId: FieldRef<"CoreCardioSetDistance", 'String'>
    readonly distance: FieldRef<"CoreCardioSetDistance", 'Float'>
    readonly createdAt: FieldRef<"CoreCardioSetDistance", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreCardioSetDistance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreCardioSetDistance findUnique
   */
  export type CoreCardioSetDistanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetDistance to fetch.
     */
    where: CoreCardioSetDistanceWhereUniqueInput
  }

  /**
   * CoreCardioSetDistance findUniqueOrThrow
   */
  export type CoreCardioSetDistanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetDistance to fetch.
     */
    where: CoreCardioSetDistanceWhereUniqueInput
  }

  /**
   * CoreCardioSetDistance findFirst
   */
  export type CoreCardioSetDistanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetDistance to fetch.
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetDistances to fetch.
     */
    orderBy?: CoreCardioSetDistanceOrderByWithRelationInput | CoreCardioSetDistanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetDistances.
     */
    cursor?: CoreCardioSetDistanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetDistances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetDistances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetDistances.
     */
    distinct?: CoreCardioSetDistanceScalarFieldEnum | CoreCardioSetDistanceScalarFieldEnum[]
  }

  /**
   * CoreCardioSetDistance findFirstOrThrow
   */
  export type CoreCardioSetDistanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetDistance to fetch.
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetDistances to fetch.
     */
    orderBy?: CoreCardioSetDistanceOrderByWithRelationInput | CoreCardioSetDistanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetDistances.
     */
    cursor?: CoreCardioSetDistanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetDistances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetDistances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetDistances.
     */
    distinct?: CoreCardioSetDistanceScalarFieldEnum | CoreCardioSetDistanceScalarFieldEnum[]
  }

  /**
   * CoreCardioSetDistance findMany
   */
  export type CoreCardioSetDistanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetDistances to fetch.
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetDistances to fetch.
     */
    orderBy?: CoreCardioSetDistanceOrderByWithRelationInput | CoreCardioSetDistanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreCardioSetDistances.
     */
    cursor?: CoreCardioSetDistanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetDistances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetDistances.
     */
    skip?: number
    distinct?: CoreCardioSetDistanceScalarFieldEnum | CoreCardioSetDistanceScalarFieldEnum[]
  }

  /**
   * CoreCardioSetDistance create
   */
  export type CoreCardioSetDistanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreCardioSetDistance.
     */
    data: XOR<CoreCardioSetDistanceCreateInput, CoreCardioSetDistanceUncheckedCreateInput>
  }

  /**
   * CoreCardioSetDistance createMany
   */
  export type CoreCardioSetDistanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreCardioSetDistances.
     */
    data: CoreCardioSetDistanceCreateManyInput | CoreCardioSetDistanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSetDistance createManyAndReturn
   */
  export type CoreCardioSetDistanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * The data used to create many CoreCardioSetDistances.
     */
    data: CoreCardioSetDistanceCreateManyInput | CoreCardioSetDistanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetDistance update
   */
  export type CoreCardioSetDistanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreCardioSetDistance.
     */
    data: XOR<CoreCardioSetDistanceUpdateInput, CoreCardioSetDistanceUncheckedUpdateInput>
    /**
     * Choose, which CoreCardioSetDistance to update.
     */
    where: CoreCardioSetDistanceWhereUniqueInput
  }

  /**
   * CoreCardioSetDistance updateMany
   */
  export type CoreCardioSetDistanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreCardioSetDistances.
     */
    data: XOR<CoreCardioSetDistanceUpdateManyMutationInput, CoreCardioSetDistanceUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetDistances to update
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * Limit how many CoreCardioSetDistances to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSetDistance updateManyAndReturn
   */
  export type CoreCardioSetDistanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * The data used to update CoreCardioSetDistances.
     */
    data: XOR<CoreCardioSetDistanceUpdateManyMutationInput, CoreCardioSetDistanceUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetDistances to update
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * Limit how many CoreCardioSetDistances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetDistance upsert
   */
  export type CoreCardioSetDistanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreCardioSetDistance to update in case it exists.
     */
    where: CoreCardioSetDistanceWhereUniqueInput
    /**
     * In case the CoreCardioSetDistance found by the `where` argument doesn't exist, create a new CoreCardioSetDistance with this data.
     */
    create: XOR<CoreCardioSetDistanceCreateInput, CoreCardioSetDistanceUncheckedCreateInput>
    /**
     * In case the CoreCardioSetDistance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreCardioSetDistanceUpdateInput, CoreCardioSetDistanceUncheckedUpdateInput>
  }

  /**
   * CoreCardioSetDistance delete
   */
  export type CoreCardioSetDistanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
    /**
     * Filter which CoreCardioSetDistance to delete.
     */
    where: CoreCardioSetDistanceWhereUniqueInput
  }

  /**
   * CoreCardioSetDistance deleteMany
   */
  export type CoreCardioSetDistanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetDistances to delete
     */
    where?: CoreCardioSetDistanceWhereInput
    /**
     * Limit how many CoreCardioSetDistances to delete.
     */
    limit?: number
  }

  /**
   * CoreCardioSetDistance without action
   */
  export type CoreCardioSetDistanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetDistance
     */
    select?: CoreCardioSetDistanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetDistance
     */
    omit?: CoreCardioSetDistanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetDistanceInclude<ExtArgs> | null
  }


  /**
   * Model CoreCardioSetAvgSpeed
   */

  export type AggregateCoreCardioSetAvgSpeed = {
    _count: CoreCardioSetAvgSpeedCountAggregateOutputType | null
    _avg: CoreCardioSetAvgSpeedAvgAggregateOutputType | null
    _sum: CoreCardioSetAvgSpeedSumAggregateOutputType | null
    _min: CoreCardioSetAvgSpeedMinAggregateOutputType | null
    _max: CoreCardioSetAvgSpeedMaxAggregateOutputType | null
  }

  export type CoreCardioSetAvgSpeedAvgAggregateOutputType = {
    avgSpeed: number | null
  }

  export type CoreCardioSetAvgSpeedSumAggregateOutputType = {
    avgSpeed: number | null
  }

  export type CoreCardioSetAvgSpeedMinAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    avgSpeed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetAvgSpeedMaxAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    avgSpeed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetAvgSpeedCountAggregateOutputType = {
    id: number
    coreCardioSetId: number
    avgSpeed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreCardioSetAvgSpeedAvgAggregateInputType = {
    avgSpeed?: true
  }

  export type CoreCardioSetAvgSpeedSumAggregateInputType = {
    avgSpeed?: true
  }

  export type CoreCardioSetAvgSpeedMinAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    avgSpeed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetAvgSpeedMaxAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    avgSpeed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetAvgSpeedCountAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    avgSpeed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreCardioSetAvgSpeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetAvgSpeed to aggregate.
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetAvgSpeeds to fetch.
     */
    orderBy?: CoreCardioSetAvgSpeedOrderByWithRelationInput | CoreCardioSetAvgSpeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreCardioSetAvgSpeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetAvgSpeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetAvgSpeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreCardioSetAvgSpeeds
    **/
    _count?: true | CoreCardioSetAvgSpeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreCardioSetAvgSpeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreCardioSetAvgSpeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreCardioSetAvgSpeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreCardioSetAvgSpeedMaxAggregateInputType
  }

  export type GetCoreCardioSetAvgSpeedAggregateType<T extends CoreCardioSetAvgSpeedAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreCardioSetAvgSpeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreCardioSetAvgSpeed[P]>
      : GetScalarType<T[P], AggregateCoreCardioSetAvgSpeed[P]>
  }




  export type CoreCardioSetAvgSpeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetAvgSpeedWhereInput
    orderBy?: CoreCardioSetAvgSpeedOrderByWithAggregationInput | CoreCardioSetAvgSpeedOrderByWithAggregationInput[]
    by: CoreCardioSetAvgSpeedScalarFieldEnum[] | CoreCardioSetAvgSpeedScalarFieldEnum
    having?: CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreCardioSetAvgSpeedCountAggregateInputType | true
    _avg?: CoreCardioSetAvgSpeedAvgAggregateInputType
    _sum?: CoreCardioSetAvgSpeedSumAggregateInputType
    _min?: CoreCardioSetAvgSpeedMinAggregateInputType
    _max?: CoreCardioSetAvgSpeedMaxAggregateInputType
  }

  export type CoreCardioSetAvgSpeedGroupByOutputType = {
    id: string
    coreCardioSetId: string
    avgSpeed: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreCardioSetAvgSpeedCountAggregateOutputType | null
    _avg: CoreCardioSetAvgSpeedAvgAggregateOutputType | null
    _sum: CoreCardioSetAvgSpeedSumAggregateOutputType | null
    _min: CoreCardioSetAvgSpeedMinAggregateOutputType | null
    _max: CoreCardioSetAvgSpeedMaxAggregateOutputType | null
  }

  type GetCoreCardioSetAvgSpeedGroupByPayload<T extends CoreCardioSetAvgSpeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreCardioSetAvgSpeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreCardioSetAvgSpeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreCardioSetAvgSpeedGroupByOutputType[P]>
            : GetScalarType<T[P], CoreCardioSetAvgSpeedGroupByOutputType[P]>
        }
      >
    >


  export type CoreCardioSetAvgSpeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    avgSpeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetAvgSpeed"]>

  export type CoreCardioSetAvgSpeedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    avgSpeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetAvgSpeed"]>

  export type CoreCardioSetAvgSpeedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    avgSpeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetAvgSpeed"]>

  export type CoreCardioSetAvgSpeedSelectScalar = {
    id?: boolean
    coreCardioSetId?: boolean
    avgSpeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreCardioSetAvgSpeedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreCardioSetId" | "avgSpeed" | "createdAt" | "updatedAt", ExtArgs["result"]["coreCardioSetAvgSpeed"]>
  export type CoreCardioSetAvgSpeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetAvgSpeedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetAvgSpeedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }

  export type $CoreCardioSetAvgSpeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreCardioSetAvgSpeed"
    objects: {
      coreCardioSet: Prisma.$CoreCardioSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreCardioSetId: string
      avgSpeed: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreCardioSetAvgSpeed"]>
    composites: {}
  }

  type CoreCardioSetAvgSpeedGetPayload<S extends boolean | null | undefined | CoreCardioSetAvgSpeedDefaultArgs> = $Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload, S>

  type CoreCardioSetAvgSpeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreCardioSetAvgSpeedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreCardioSetAvgSpeedCountAggregateInputType | true
    }

  export interface CoreCardioSetAvgSpeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreCardioSetAvgSpeed'], meta: { name: 'CoreCardioSetAvgSpeed' } }
    /**
     * Find zero or one CoreCardioSetAvgSpeed that matches the filter.
     * @param {CoreCardioSetAvgSpeedFindUniqueArgs} args - Arguments to find a CoreCardioSetAvgSpeed
     * @example
     * // Get one CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreCardioSetAvgSpeedFindUniqueArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedFindUniqueArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreCardioSetAvgSpeed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreCardioSetAvgSpeedFindUniqueOrThrowArgs} args - Arguments to find a CoreCardioSetAvgSpeed
     * @example
     * // Get one CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreCardioSetAvgSpeedFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetAvgSpeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedFindFirstArgs} args - Arguments to find a CoreCardioSetAvgSpeed
     * @example
     * // Get one CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreCardioSetAvgSpeedFindFirstArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedFindFirstArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetAvgSpeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedFindFirstOrThrowArgs} args - Arguments to find a CoreCardioSetAvgSpeed
     * @example
     * // Get one CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreCardioSetAvgSpeedFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreCardioSetAvgSpeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeeds = await prisma.coreCardioSetAvgSpeed.findMany()
     * 
     * // Get first 10 CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeeds = await prisma.coreCardioSetAvgSpeed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreCardioSetAvgSpeedWithIdOnly = await prisma.coreCardioSetAvgSpeed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreCardioSetAvgSpeedFindManyArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreCardioSetAvgSpeed.
     * @param {CoreCardioSetAvgSpeedCreateArgs} args - Arguments to create a CoreCardioSetAvgSpeed.
     * @example
     * // Create one CoreCardioSetAvgSpeed
     * const CoreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.create({
     *   data: {
     *     // ... data to create a CoreCardioSetAvgSpeed
     *   }
     * })
     * 
     */
    create<T extends CoreCardioSetAvgSpeedCreateArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedCreateArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreCardioSetAvgSpeeds.
     * @param {CoreCardioSetAvgSpeedCreateManyArgs} args - Arguments to create many CoreCardioSetAvgSpeeds.
     * @example
     * // Create many CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreCardioSetAvgSpeedCreateManyArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreCardioSetAvgSpeeds and returns the data saved in the database.
     * @param {CoreCardioSetAvgSpeedCreateManyAndReturnArgs} args - Arguments to create many CoreCardioSetAvgSpeeds.
     * @example
     * // Create many CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreCardioSetAvgSpeeds and only return the `id`
     * const coreCardioSetAvgSpeedWithIdOnly = await prisma.coreCardioSetAvgSpeed.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreCardioSetAvgSpeedCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreCardioSetAvgSpeed.
     * @param {CoreCardioSetAvgSpeedDeleteArgs} args - Arguments to delete one CoreCardioSetAvgSpeed.
     * @example
     * // Delete one CoreCardioSetAvgSpeed
     * const CoreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.delete({
     *   where: {
     *     // ... filter to delete one CoreCardioSetAvgSpeed
     *   }
     * })
     * 
     */
    delete<T extends CoreCardioSetAvgSpeedDeleteArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedDeleteArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreCardioSetAvgSpeed.
     * @param {CoreCardioSetAvgSpeedUpdateArgs} args - Arguments to update one CoreCardioSetAvgSpeed.
     * @example
     * // Update one CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreCardioSetAvgSpeedUpdateArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedUpdateArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreCardioSetAvgSpeeds.
     * @param {CoreCardioSetAvgSpeedDeleteManyArgs} args - Arguments to filter CoreCardioSetAvgSpeeds to delete.
     * @example
     * // Delete a few CoreCardioSetAvgSpeeds
     * const { count } = await prisma.coreCardioSetAvgSpeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreCardioSetAvgSpeedDeleteManyArgs>(args?: SelectSubset<T, CoreCardioSetAvgSpeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetAvgSpeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreCardioSetAvgSpeedUpdateManyArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetAvgSpeeds and returns the data updated in the database.
     * @param {CoreCardioSetAvgSpeedUpdateManyAndReturnArgs} args - Arguments to update many CoreCardioSetAvgSpeeds.
     * @example
     * // Update many CoreCardioSetAvgSpeeds
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreCardioSetAvgSpeeds and only return the `id`
     * const coreCardioSetAvgSpeedWithIdOnly = await prisma.coreCardioSetAvgSpeed.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreCardioSetAvgSpeedUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreCardioSetAvgSpeed.
     * @param {CoreCardioSetAvgSpeedUpsertArgs} args - Arguments to update or create a CoreCardioSetAvgSpeed.
     * @example
     * // Update or create a CoreCardioSetAvgSpeed
     * const coreCardioSetAvgSpeed = await prisma.coreCardioSetAvgSpeed.upsert({
     *   create: {
     *     // ... data to create a CoreCardioSetAvgSpeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreCardioSetAvgSpeed we want to update
     *   }
     * })
     */
    upsert<T extends CoreCardioSetAvgSpeedUpsertArgs>(args: SelectSubset<T, CoreCardioSetAvgSpeedUpsertArgs<ExtArgs>>): Prisma__CoreCardioSetAvgSpeedClient<$Result.GetResult<Prisma.$CoreCardioSetAvgSpeedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreCardioSetAvgSpeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedCountArgs} args - Arguments to filter CoreCardioSetAvgSpeeds to count.
     * @example
     * // Count the number of CoreCardioSetAvgSpeeds
     * const count = await prisma.coreCardioSetAvgSpeed.count({
     *   where: {
     *     // ... the filter for the CoreCardioSetAvgSpeeds we want to count
     *   }
     * })
    **/
    count<T extends CoreCardioSetAvgSpeedCountArgs>(
      args?: Subset<T, CoreCardioSetAvgSpeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreCardioSetAvgSpeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreCardioSetAvgSpeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreCardioSetAvgSpeedAggregateArgs>(args: Subset<T, CoreCardioSetAvgSpeedAggregateArgs>): Prisma.PrismaPromise<GetCoreCardioSetAvgSpeedAggregateType<T>>

    /**
     * Group by CoreCardioSetAvgSpeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetAvgSpeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreCardioSetAvgSpeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreCardioSetAvgSpeedGroupByArgs['orderBy'] }
        : { orderBy?: CoreCardioSetAvgSpeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreCardioSetAvgSpeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreCardioSetAvgSpeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreCardioSetAvgSpeed model
   */
  readonly fields: CoreCardioSetAvgSpeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreCardioSetAvgSpeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreCardioSetAvgSpeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreCardioSet<T extends CoreCardioSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSetDefaultArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreCardioSetAvgSpeed model
   */
  interface CoreCardioSetAvgSpeedFieldRefs {
    readonly id: FieldRef<"CoreCardioSetAvgSpeed", 'String'>
    readonly coreCardioSetId: FieldRef<"CoreCardioSetAvgSpeed", 'String'>
    readonly avgSpeed: FieldRef<"CoreCardioSetAvgSpeed", 'Float'>
    readonly createdAt: FieldRef<"CoreCardioSetAvgSpeed", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreCardioSetAvgSpeed", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreCardioSetAvgSpeed findUnique
   */
  export type CoreCardioSetAvgSpeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetAvgSpeed to fetch.
     */
    where: CoreCardioSetAvgSpeedWhereUniqueInput
  }

  /**
   * CoreCardioSetAvgSpeed findUniqueOrThrow
   */
  export type CoreCardioSetAvgSpeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetAvgSpeed to fetch.
     */
    where: CoreCardioSetAvgSpeedWhereUniqueInput
  }

  /**
   * CoreCardioSetAvgSpeed findFirst
   */
  export type CoreCardioSetAvgSpeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetAvgSpeed to fetch.
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetAvgSpeeds to fetch.
     */
    orderBy?: CoreCardioSetAvgSpeedOrderByWithRelationInput | CoreCardioSetAvgSpeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetAvgSpeeds.
     */
    cursor?: CoreCardioSetAvgSpeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetAvgSpeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetAvgSpeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetAvgSpeeds.
     */
    distinct?: CoreCardioSetAvgSpeedScalarFieldEnum | CoreCardioSetAvgSpeedScalarFieldEnum[]
  }

  /**
   * CoreCardioSetAvgSpeed findFirstOrThrow
   */
  export type CoreCardioSetAvgSpeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetAvgSpeed to fetch.
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetAvgSpeeds to fetch.
     */
    orderBy?: CoreCardioSetAvgSpeedOrderByWithRelationInput | CoreCardioSetAvgSpeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetAvgSpeeds.
     */
    cursor?: CoreCardioSetAvgSpeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetAvgSpeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetAvgSpeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetAvgSpeeds.
     */
    distinct?: CoreCardioSetAvgSpeedScalarFieldEnum | CoreCardioSetAvgSpeedScalarFieldEnum[]
  }

  /**
   * CoreCardioSetAvgSpeed findMany
   */
  export type CoreCardioSetAvgSpeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetAvgSpeeds to fetch.
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetAvgSpeeds to fetch.
     */
    orderBy?: CoreCardioSetAvgSpeedOrderByWithRelationInput | CoreCardioSetAvgSpeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreCardioSetAvgSpeeds.
     */
    cursor?: CoreCardioSetAvgSpeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetAvgSpeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetAvgSpeeds.
     */
    skip?: number
    distinct?: CoreCardioSetAvgSpeedScalarFieldEnum | CoreCardioSetAvgSpeedScalarFieldEnum[]
  }

  /**
   * CoreCardioSetAvgSpeed create
   */
  export type CoreCardioSetAvgSpeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreCardioSetAvgSpeed.
     */
    data: XOR<CoreCardioSetAvgSpeedCreateInput, CoreCardioSetAvgSpeedUncheckedCreateInput>
  }

  /**
   * CoreCardioSetAvgSpeed createMany
   */
  export type CoreCardioSetAvgSpeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreCardioSetAvgSpeeds.
     */
    data: CoreCardioSetAvgSpeedCreateManyInput | CoreCardioSetAvgSpeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSetAvgSpeed createManyAndReturn
   */
  export type CoreCardioSetAvgSpeedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * The data used to create many CoreCardioSetAvgSpeeds.
     */
    data: CoreCardioSetAvgSpeedCreateManyInput | CoreCardioSetAvgSpeedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetAvgSpeed update
   */
  export type CoreCardioSetAvgSpeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreCardioSetAvgSpeed.
     */
    data: XOR<CoreCardioSetAvgSpeedUpdateInput, CoreCardioSetAvgSpeedUncheckedUpdateInput>
    /**
     * Choose, which CoreCardioSetAvgSpeed to update.
     */
    where: CoreCardioSetAvgSpeedWhereUniqueInput
  }

  /**
   * CoreCardioSetAvgSpeed updateMany
   */
  export type CoreCardioSetAvgSpeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreCardioSetAvgSpeeds.
     */
    data: XOR<CoreCardioSetAvgSpeedUpdateManyMutationInput, CoreCardioSetAvgSpeedUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetAvgSpeeds to update
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * Limit how many CoreCardioSetAvgSpeeds to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSetAvgSpeed updateManyAndReturn
   */
  export type CoreCardioSetAvgSpeedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * The data used to update CoreCardioSetAvgSpeeds.
     */
    data: XOR<CoreCardioSetAvgSpeedUpdateManyMutationInput, CoreCardioSetAvgSpeedUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetAvgSpeeds to update
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * Limit how many CoreCardioSetAvgSpeeds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetAvgSpeed upsert
   */
  export type CoreCardioSetAvgSpeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreCardioSetAvgSpeed to update in case it exists.
     */
    where: CoreCardioSetAvgSpeedWhereUniqueInput
    /**
     * In case the CoreCardioSetAvgSpeed found by the `where` argument doesn't exist, create a new CoreCardioSetAvgSpeed with this data.
     */
    create: XOR<CoreCardioSetAvgSpeedCreateInput, CoreCardioSetAvgSpeedUncheckedCreateInput>
    /**
     * In case the CoreCardioSetAvgSpeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreCardioSetAvgSpeedUpdateInput, CoreCardioSetAvgSpeedUncheckedUpdateInput>
  }

  /**
   * CoreCardioSetAvgSpeed delete
   */
  export type CoreCardioSetAvgSpeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
    /**
     * Filter which CoreCardioSetAvgSpeed to delete.
     */
    where: CoreCardioSetAvgSpeedWhereUniqueInput
  }

  /**
   * CoreCardioSetAvgSpeed deleteMany
   */
  export type CoreCardioSetAvgSpeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetAvgSpeeds to delete
     */
    where?: CoreCardioSetAvgSpeedWhereInput
    /**
     * Limit how many CoreCardioSetAvgSpeeds to delete.
     */
    limit?: number
  }

  /**
   * CoreCardioSetAvgSpeed without action
   */
  export type CoreCardioSetAvgSpeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetAvgSpeed
     */
    select?: CoreCardioSetAvgSpeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetAvgSpeed
     */
    omit?: CoreCardioSetAvgSpeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetAvgSpeedInclude<ExtArgs> | null
  }


  /**
   * Model CoreCardioSetWorkoutTime
   */

  export type AggregateCoreCardioSetWorkoutTime = {
    _count: CoreCardioSetWorkoutTimeCountAggregateOutputType | null
    _avg: CoreCardioSetWorkoutTimeAvgAggregateOutputType | null
    _sum: CoreCardioSetWorkoutTimeSumAggregateOutputType | null
    _min: CoreCardioSetWorkoutTimeMinAggregateOutputType | null
    _max: CoreCardioSetWorkoutTimeMaxAggregateOutputType | null
  }

  export type CoreCardioSetWorkoutTimeAvgAggregateOutputType = {
    workTime: number | null
  }

  export type CoreCardioSetWorkoutTimeSumAggregateOutputType = {
    workTime: number | null
  }

  export type CoreCardioSetWorkoutTimeMinAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    workTime: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetWorkoutTimeMaxAggregateOutputType = {
    id: string | null
    coreCardioSetId: string | null
    workTime: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreCardioSetWorkoutTimeCountAggregateOutputType = {
    id: number
    coreCardioSetId: number
    workTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreCardioSetWorkoutTimeAvgAggregateInputType = {
    workTime?: true
  }

  export type CoreCardioSetWorkoutTimeSumAggregateInputType = {
    workTime?: true
  }

  export type CoreCardioSetWorkoutTimeMinAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    workTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetWorkoutTimeMaxAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    workTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreCardioSetWorkoutTimeCountAggregateInputType = {
    id?: true
    coreCardioSetId?: true
    workTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreCardioSetWorkoutTimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetWorkoutTime to aggregate.
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetWorkoutTimes to fetch.
     */
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithRelationInput | CoreCardioSetWorkoutTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreCardioSetWorkoutTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetWorkoutTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetWorkoutTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreCardioSetWorkoutTimes
    **/
    _count?: true | CoreCardioSetWorkoutTimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreCardioSetWorkoutTimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreCardioSetWorkoutTimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreCardioSetWorkoutTimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreCardioSetWorkoutTimeMaxAggregateInputType
  }

  export type GetCoreCardioSetWorkoutTimeAggregateType<T extends CoreCardioSetWorkoutTimeAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreCardioSetWorkoutTime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreCardioSetWorkoutTime[P]>
      : GetScalarType<T[P], AggregateCoreCardioSetWorkoutTime[P]>
  }




  export type CoreCardioSetWorkoutTimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreCardioSetWorkoutTimeWhereInput
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithAggregationInput | CoreCardioSetWorkoutTimeOrderByWithAggregationInput[]
    by: CoreCardioSetWorkoutTimeScalarFieldEnum[] | CoreCardioSetWorkoutTimeScalarFieldEnum
    having?: CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreCardioSetWorkoutTimeCountAggregateInputType | true
    _avg?: CoreCardioSetWorkoutTimeAvgAggregateInputType
    _sum?: CoreCardioSetWorkoutTimeSumAggregateInputType
    _min?: CoreCardioSetWorkoutTimeMinAggregateInputType
    _max?: CoreCardioSetWorkoutTimeMaxAggregateInputType
  }

  export type CoreCardioSetWorkoutTimeGroupByOutputType = {
    id: string
    coreCardioSetId: string
    workTime: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreCardioSetWorkoutTimeCountAggregateOutputType | null
    _avg: CoreCardioSetWorkoutTimeAvgAggregateOutputType | null
    _sum: CoreCardioSetWorkoutTimeSumAggregateOutputType | null
    _min: CoreCardioSetWorkoutTimeMinAggregateOutputType | null
    _max: CoreCardioSetWorkoutTimeMaxAggregateOutputType | null
  }

  type GetCoreCardioSetWorkoutTimeGroupByPayload<T extends CoreCardioSetWorkoutTimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreCardioSetWorkoutTimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreCardioSetWorkoutTimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreCardioSetWorkoutTimeGroupByOutputType[P]>
            : GetScalarType<T[P], CoreCardioSetWorkoutTimeGroupByOutputType[P]>
        }
      >
    >


  export type CoreCardioSetWorkoutTimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    workTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetWorkoutTime"]>

  export type CoreCardioSetWorkoutTimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    workTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetWorkoutTime"]>

  export type CoreCardioSetWorkoutTimeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreCardioSetId?: boolean
    workTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreCardioSetWorkoutTime"]>

  export type CoreCardioSetWorkoutTimeSelectScalar = {
    id?: boolean
    coreCardioSetId?: boolean
    workTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreCardioSetWorkoutTimeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreCardioSetId" | "workTime" | "createdAt" | "updatedAt", ExtArgs["result"]["coreCardioSetWorkoutTime"]>
  export type CoreCardioSetWorkoutTimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetWorkoutTimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }
  export type CoreCardioSetWorkoutTimeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreCardioSet?: boolean | CoreCardioSetDefaultArgs<ExtArgs>
  }

  export type $CoreCardioSetWorkoutTimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreCardioSetWorkoutTime"
    objects: {
      coreCardioSet: Prisma.$CoreCardioSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreCardioSetId: string
      workTime: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreCardioSetWorkoutTime"]>
    composites: {}
  }

  type CoreCardioSetWorkoutTimeGetPayload<S extends boolean | null | undefined | CoreCardioSetWorkoutTimeDefaultArgs> = $Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload, S>

  type CoreCardioSetWorkoutTimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreCardioSetWorkoutTimeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreCardioSetWorkoutTimeCountAggregateInputType | true
    }

  export interface CoreCardioSetWorkoutTimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreCardioSetWorkoutTime'], meta: { name: 'CoreCardioSetWorkoutTime' } }
    /**
     * Find zero or one CoreCardioSetWorkoutTime that matches the filter.
     * @param {CoreCardioSetWorkoutTimeFindUniqueArgs} args - Arguments to find a CoreCardioSetWorkoutTime
     * @example
     * // Get one CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreCardioSetWorkoutTimeFindUniqueArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeFindUniqueArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreCardioSetWorkoutTime that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreCardioSetWorkoutTimeFindUniqueOrThrowArgs} args - Arguments to find a CoreCardioSetWorkoutTime
     * @example
     * // Get one CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreCardioSetWorkoutTimeFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetWorkoutTime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeFindFirstArgs} args - Arguments to find a CoreCardioSetWorkoutTime
     * @example
     * // Get one CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreCardioSetWorkoutTimeFindFirstArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeFindFirstArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreCardioSetWorkoutTime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeFindFirstOrThrowArgs} args - Arguments to find a CoreCardioSetWorkoutTime
     * @example
     * // Get one CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreCardioSetWorkoutTimeFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreCardioSetWorkoutTimes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTimes = await prisma.coreCardioSetWorkoutTime.findMany()
     * 
     * // Get first 10 CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTimes = await prisma.coreCardioSetWorkoutTime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreCardioSetWorkoutTimeWithIdOnly = await prisma.coreCardioSetWorkoutTime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreCardioSetWorkoutTimeFindManyArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreCardioSetWorkoutTime.
     * @param {CoreCardioSetWorkoutTimeCreateArgs} args - Arguments to create a CoreCardioSetWorkoutTime.
     * @example
     * // Create one CoreCardioSetWorkoutTime
     * const CoreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.create({
     *   data: {
     *     // ... data to create a CoreCardioSetWorkoutTime
     *   }
     * })
     * 
     */
    create<T extends CoreCardioSetWorkoutTimeCreateArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeCreateArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreCardioSetWorkoutTimes.
     * @param {CoreCardioSetWorkoutTimeCreateManyArgs} args - Arguments to create many CoreCardioSetWorkoutTimes.
     * @example
     * // Create many CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreCardioSetWorkoutTimeCreateManyArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreCardioSetWorkoutTimes and returns the data saved in the database.
     * @param {CoreCardioSetWorkoutTimeCreateManyAndReturnArgs} args - Arguments to create many CoreCardioSetWorkoutTimes.
     * @example
     * // Create many CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreCardioSetWorkoutTimes and only return the `id`
     * const coreCardioSetWorkoutTimeWithIdOnly = await prisma.coreCardioSetWorkoutTime.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreCardioSetWorkoutTimeCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreCardioSetWorkoutTime.
     * @param {CoreCardioSetWorkoutTimeDeleteArgs} args - Arguments to delete one CoreCardioSetWorkoutTime.
     * @example
     * // Delete one CoreCardioSetWorkoutTime
     * const CoreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.delete({
     *   where: {
     *     // ... filter to delete one CoreCardioSetWorkoutTime
     *   }
     * })
     * 
     */
    delete<T extends CoreCardioSetWorkoutTimeDeleteArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeDeleteArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreCardioSetWorkoutTime.
     * @param {CoreCardioSetWorkoutTimeUpdateArgs} args - Arguments to update one CoreCardioSetWorkoutTime.
     * @example
     * // Update one CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreCardioSetWorkoutTimeUpdateArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeUpdateArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreCardioSetWorkoutTimes.
     * @param {CoreCardioSetWorkoutTimeDeleteManyArgs} args - Arguments to filter CoreCardioSetWorkoutTimes to delete.
     * @example
     * // Delete a few CoreCardioSetWorkoutTimes
     * const { count } = await prisma.coreCardioSetWorkoutTime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreCardioSetWorkoutTimeDeleteManyArgs>(args?: SelectSubset<T, CoreCardioSetWorkoutTimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetWorkoutTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreCardioSetWorkoutTimeUpdateManyArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreCardioSetWorkoutTimes and returns the data updated in the database.
     * @param {CoreCardioSetWorkoutTimeUpdateManyAndReturnArgs} args - Arguments to update many CoreCardioSetWorkoutTimes.
     * @example
     * // Update many CoreCardioSetWorkoutTimes
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreCardioSetWorkoutTimes and only return the `id`
     * const coreCardioSetWorkoutTimeWithIdOnly = await prisma.coreCardioSetWorkoutTime.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreCardioSetWorkoutTimeUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreCardioSetWorkoutTime.
     * @param {CoreCardioSetWorkoutTimeUpsertArgs} args - Arguments to update or create a CoreCardioSetWorkoutTime.
     * @example
     * // Update or create a CoreCardioSetWorkoutTime
     * const coreCardioSetWorkoutTime = await prisma.coreCardioSetWorkoutTime.upsert({
     *   create: {
     *     // ... data to create a CoreCardioSetWorkoutTime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreCardioSetWorkoutTime we want to update
     *   }
     * })
     */
    upsert<T extends CoreCardioSetWorkoutTimeUpsertArgs>(args: SelectSubset<T, CoreCardioSetWorkoutTimeUpsertArgs<ExtArgs>>): Prisma__CoreCardioSetWorkoutTimeClient<$Result.GetResult<Prisma.$CoreCardioSetWorkoutTimePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreCardioSetWorkoutTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeCountArgs} args - Arguments to filter CoreCardioSetWorkoutTimes to count.
     * @example
     * // Count the number of CoreCardioSetWorkoutTimes
     * const count = await prisma.coreCardioSetWorkoutTime.count({
     *   where: {
     *     // ... the filter for the CoreCardioSetWorkoutTimes we want to count
     *   }
     * })
    **/
    count<T extends CoreCardioSetWorkoutTimeCountArgs>(
      args?: Subset<T, CoreCardioSetWorkoutTimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreCardioSetWorkoutTimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreCardioSetWorkoutTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreCardioSetWorkoutTimeAggregateArgs>(args: Subset<T, CoreCardioSetWorkoutTimeAggregateArgs>): Prisma.PrismaPromise<GetCoreCardioSetWorkoutTimeAggregateType<T>>

    /**
     * Group by CoreCardioSetWorkoutTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreCardioSetWorkoutTimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreCardioSetWorkoutTimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreCardioSetWorkoutTimeGroupByArgs['orderBy'] }
        : { orderBy?: CoreCardioSetWorkoutTimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreCardioSetWorkoutTimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreCardioSetWorkoutTimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreCardioSetWorkoutTime model
   */
  readonly fields: CoreCardioSetWorkoutTimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreCardioSetWorkoutTime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreCardioSetWorkoutTimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreCardioSet<T extends CoreCardioSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreCardioSetDefaultArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreCardioSetWorkoutTime model
   */
  interface CoreCardioSetWorkoutTimeFieldRefs {
    readonly id: FieldRef<"CoreCardioSetWorkoutTime", 'String'>
    readonly coreCardioSetId: FieldRef<"CoreCardioSetWorkoutTime", 'String'>
    readonly workTime: FieldRef<"CoreCardioSetWorkoutTime", 'Int'>
    readonly createdAt: FieldRef<"CoreCardioSetWorkoutTime", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreCardioSetWorkoutTime", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreCardioSetWorkoutTime findUnique
   */
  export type CoreCardioSetWorkoutTimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetWorkoutTime to fetch.
     */
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
  }

  /**
   * CoreCardioSetWorkoutTime findUniqueOrThrow
   */
  export type CoreCardioSetWorkoutTimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetWorkoutTime to fetch.
     */
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
  }

  /**
   * CoreCardioSetWorkoutTime findFirst
   */
  export type CoreCardioSetWorkoutTimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetWorkoutTime to fetch.
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetWorkoutTimes to fetch.
     */
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithRelationInput | CoreCardioSetWorkoutTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetWorkoutTimes.
     */
    cursor?: CoreCardioSetWorkoutTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetWorkoutTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetWorkoutTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetWorkoutTimes.
     */
    distinct?: CoreCardioSetWorkoutTimeScalarFieldEnum | CoreCardioSetWorkoutTimeScalarFieldEnum[]
  }

  /**
   * CoreCardioSetWorkoutTime findFirstOrThrow
   */
  export type CoreCardioSetWorkoutTimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetWorkoutTime to fetch.
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetWorkoutTimes to fetch.
     */
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithRelationInput | CoreCardioSetWorkoutTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreCardioSetWorkoutTimes.
     */
    cursor?: CoreCardioSetWorkoutTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetWorkoutTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetWorkoutTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreCardioSetWorkoutTimes.
     */
    distinct?: CoreCardioSetWorkoutTimeScalarFieldEnum | CoreCardioSetWorkoutTimeScalarFieldEnum[]
  }

  /**
   * CoreCardioSetWorkoutTime findMany
   */
  export type CoreCardioSetWorkoutTimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter, which CoreCardioSetWorkoutTimes to fetch.
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreCardioSetWorkoutTimes to fetch.
     */
    orderBy?: CoreCardioSetWorkoutTimeOrderByWithRelationInput | CoreCardioSetWorkoutTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreCardioSetWorkoutTimes.
     */
    cursor?: CoreCardioSetWorkoutTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreCardioSetWorkoutTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreCardioSetWorkoutTimes.
     */
    skip?: number
    distinct?: CoreCardioSetWorkoutTimeScalarFieldEnum | CoreCardioSetWorkoutTimeScalarFieldEnum[]
  }

  /**
   * CoreCardioSetWorkoutTime create
   */
  export type CoreCardioSetWorkoutTimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreCardioSetWorkoutTime.
     */
    data: XOR<CoreCardioSetWorkoutTimeCreateInput, CoreCardioSetWorkoutTimeUncheckedCreateInput>
  }

  /**
   * CoreCardioSetWorkoutTime createMany
   */
  export type CoreCardioSetWorkoutTimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreCardioSetWorkoutTimes.
     */
    data: CoreCardioSetWorkoutTimeCreateManyInput | CoreCardioSetWorkoutTimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreCardioSetWorkoutTime createManyAndReturn
   */
  export type CoreCardioSetWorkoutTimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * The data used to create many CoreCardioSetWorkoutTimes.
     */
    data: CoreCardioSetWorkoutTimeCreateManyInput | CoreCardioSetWorkoutTimeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetWorkoutTime update
   */
  export type CoreCardioSetWorkoutTimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreCardioSetWorkoutTime.
     */
    data: XOR<CoreCardioSetWorkoutTimeUpdateInput, CoreCardioSetWorkoutTimeUncheckedUpdateInput>
    /**
     * Choose, which CoreCardioSetWorkoutTime to update.
     */
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
  }

  /**
   * CoreCardioSetWorkoutTime updateMany
   */
  export type CoreCardioSetWorkoutTimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreCardioSetWorkoutTimes.
     */
    data: XOR<CoreCardioSetWorkoutTimeUpdateManyMutationInput, CoreCardioSetWorkoutTimeUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetWorkoutTimes to update
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * Limit how many CoreCardioSetWorkoutTimes to update.
     */
    limit?: number
  }

  /**
   * CoreCardioSetWorkoutTime updateManyAndReturn
   */
  export type CoreCardioSetWorkoutTimeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * The data used to update CoreCardioSetWorkoutTimes.
     */
    data: XOR<CoreCardioSetWorkoutTimeUpdateManyMutationInput, CoreCardioSetWorkoutTimeUncheckedUpdateManyInput>
    /**
     * Filter which CoreCardioSetWorkoutTimes to update
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * Limit how many CoreCardioSetWorkoutTimes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreCardioSetWorkoutTime upsert
   */
  export type CoreCardioSetWorkoutTimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreCardioSetWorkoutTime to update in case it exists.
     */
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
    /**
     * In case the CoreCardioSetWorkoutTime found by the `where` argument doesn't exist, create a new CoreCardioSetWorkoutTime with this data.
     */
    create: XOR<CoreCardioSetWorkoutTimeCreateInput, CoreCardioSetWorkoutTimeUncheckedCreateInput>
    /**
     * In case the CoreCardioSetWorkoutTime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreCardioSetWorkoutTimeUpdateInput, CoreCardioSetWorkoutTimeUncheckedUpdateInput>
  }

  /**
   * CoreCardioSetWorkoutTime delete
   */
  export type CoreCardioSetWorkoutTimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
    /**
     * Filter which CoreCardioSetWorkoutTime to delete.
     */
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
  }

  /**
   * CoreCardioSetWorkoutTime deleteMany
   */
  export type CoreCardioSetWorkoutTimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreCardioSetWorkoutTimes to delete
     */
    where?: CoreCardioSetWorkoutTimeWhereInput
    /**
     * Limit how many CoreCardioSetWorkoutTimes to delete.
     */
    limit?: number
  }

  /**
   * CoreCardioSetWorkoutTime without action
   */
  export type CoreCardioSetWorkoutTimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSetWorkoutTime
     */
    select?: CoreCardioSetWorkoutTimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSetWorkoutTime
     */
    omit?: CoreCardioSetWorkoutTimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetWorkoutTimeInclude<ExtArgs> | null
  }


  /**
   * Model UserCardioSet
   */

  export type AggregateUserCardioSet = {
    _count: UserCardioSetCountAggregateOutputType | null
    _avg: UserCardioSetAvgAggregateOutputType | null
    _sum: UserCardioSetSumAggregateOutputType | null
    _min: UserCardioSetMinAggregateOutputType | null
    _max: UserCardioSetMaxAggregateOutputType | null
  }

  export type UserCardioSetAvgAggregateOutputType = {
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    calorieTarget: number | null
  }

  export type UserCardioSetSumAggregateOutputType = {
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    calorieTarget: number | null
  }

  export type UserCardioSetMinAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    isCompleted: boolean | null
    calorieTarget: number | null
    userWorkoutExerciseId: string | null
    skippedReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardioSetMaxAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    isCompleted: boolean | null
    calorieTarget: number | null
    userWorkoutExerciseId: string | null
    skippedReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardioSetCountAggregateOutputType = {
    id: number
    warmupTime: number
    workTime: number
    avgHeartRate: number
    avgSpeed: number
    distance: number
    order: number
    isCompleted: number
    calorieTarget: number
    userWorkoutExerciseId: number
    skippedReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserCardioSetAvgAggregateInputType = {
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    calorieTarget?: true
  }

  export type UserCardioSetSumAggregateInputType = {
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    calorieTarget?: true
  }

  export type UserCardioSetMinAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    calorieTarget?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardioSetMaxAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    calorieTarget?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardioSetCountAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    calorieTarget?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserCardioSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardioSet to aggregate.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCardioSets
    **/
    _count?: true | UserCardioSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCardioSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCardioSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCardioSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCardioSetMaxAggregateInputType
  }

  export type GetUserCardioSetAggregateType<T extends UserCardioSetAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCardioSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCardioSet[P]>
      : GetScalarType<T[P], AggregateUserCardioSet[P]>
  }




  export type UserCardioSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardioSetWhereInput
    orderBy?: UserCardioSetOrderByWithAggregationInput | UserCardioSetOrderByWithAggregationInput[]
    by: UserCardioSetScalarFieldEnum[] | UserCardioSetScalarFieldEnum
    having?: UserCardioSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCardioSetCountAggregateInputType | true
    _avg?: UserCardioSetAvgAggregateInputType
    _sum?: UserCardioSetSumAggregateInputType
    _min?: UserCardioSetMinAggregateInputType
    _max?: UserCardioSetMaxAggregateInputType
  }

  export type UserCardioSetGroupByOutputType = {
    id: string
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number
    isCompleted: boolean
    calorieTarget: number | null
    userWorkoutExerciseId: string
    skippedReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCardioSetCountAggregateOutputType | null
    _avg: UserCardioSetAvgAggregateOutputType | null
    _sum: UserCardioSetSumAggregateOutputType | null
    _min: UserCardioSetMinAggregateOutputType | null
    _max: UserCardioSetMaxAggregateOutputType | null
  }

  type GetUserCardioSetGroupByPayload<T extends UserCardioSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCardioSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCardioSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCardioSetGroupByOutputType[P]>
            : GetScalarType<T[P], UserCardioSetGroupByOutputType[P]>
        }
      >
    >


  export type UserCardioSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    calorieTarget?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    calorieTarget?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    calorieTarget?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectScalar = {
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    calorieTarget?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserCardioSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "warmupTime" | "workTime" | "avgHeartRate" | "avgSpeed" | "distance" | "order" | "isCompleted" | "calorieTarget" | "userWorkoutExerciseId" | "skippedReason" | "createdAt" | "updatedAt", ExtArgs["result"]["userCardioSet"]>
  export type UserCardioSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserCardioSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserCardioSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }

  export type $UserCardioSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCardioSet"
    objects: {
      userWorkoutExercise: Prisma.$UserWorkoutExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      warmupTime: number | null
      workTime: number | null
      avgHeartRate: number | null
      avgSpeed: number | null
      distance: number | null
      order: number
      isCompleted: boolean
      calorieTarget: number | null
      userWorkoutExerciseId: string
      skippedReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userCardioSet"]>
    composites: {}
  }

  type UserCardioSetGetPayload<S extends boolean | null | undefined | UserCardioSetDefaultArgs> = $Result.GetResult<Prisma.$UserCardioSetPayload, S>

  type UserCardioSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCardioSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCardioSetCountAggregateInputType | true
    }

  export interface UserCardioSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCardioSet'], meta: { name: 'UserCardioSet' } }
    /**
     * Find zero or one UserCardioSet that matches the filter.
     * @param {UserCardioSetFindUniqueArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCardioSetFindUniqueArgs>(args: SelectSubset<T, UserCardioSetFindUniqueArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserCardioSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCardioSetFindUniqueOrThrowArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCardioSetFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCardioSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCardioSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindFirstArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCardioSetFindFirstArgs>(args?: SelectSubset<T, UserCardioSetFindFirstArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCardioSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindFirstOrThrowArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCardioSetFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCardioSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserCardioSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCardioSets
     * const userCardioSets = await prisma.userCardioSet.findMany()
     * 
     * // Get first 10 UserCardioSets
     * const userCardioSets = await prisma.userCardioSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCardioSetFindManyArgs>(args?: SelectSubset<T, UserCardioSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserCardioSet.
     * @param {UserCardioSetCreateArgs} args - Arguments to create a UserCardioSet.
     * @example
     * // Create one UserCardioSet
     * const UserCardioSet = await prisma.userCardioSet.create({
     *   data: {
     *     // ... data to create a UserCardioSet
     *   }
     * })
     * 
     */
    create<T extends UserCardioSetCreateArgs>(args: SelectSubset<T, UserCardioSetCreateArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserCardioSets.
     * @param {UserCardioSetCreateManyArgs} args - Arguments to create many UserCardioSets.
     * @example
     * // Create many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCardioSetCreateManyArgs>(args?: SelectSubset<T, UserCardioSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCardioSets and returns the data saved in the database.
     * @param {UserCardioSetCreateManyAndReturnArgs} args - Arguments to create many UserCardioSets.
     * @example
     * // Create many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCardioSets and only return the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCardioSetCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCardioSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserCardioSet.
     * @param {UserCardioSetDeleteArgs} args - Arguments to delete one UserCardioSet.
     * @example
     * // Delete one UserCardioSet
     * const UserCardioSet = await prisma.userCardioSet.delete({
     *   where: {
     *     // ... filter to delete one UserCardioSet
     *   }
     * })
     * 
     */
    delete<T extends UserCardioSetDeleteArgs>(args: SelectSubset<T, UserCardioSetDeleteArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserCardioSet.
     * @param {UserCardioSetUpdateArgs} args - Arguments to update one UserCardioSet.
     * @example
     * // Update one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCardioSetUpdateArgs>(args: SelectSubset<T, UserCardioSetUpdateArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserCardioSets.
     * @param {UserCardioSetDeleteManyArgs} args - Arguments to filter UserCardioSets to delete.
     * @example
     * // Delete a few UserCardioSets
     * const { count } = await prisma.userCardioSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCardioSetDeleteManyArgs>(args?: SelectSubset<T, UserCardioSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCardioSetUpdateManyArgs>(args: SelectSubset<T, UserCardioSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCardioSets and returns the data updated in the database.
     * @param {UserCardioSetUpdateManyAndReturnArgs} args - Arguments to update many UserCardioSets.
     * @example
     * // Update many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCardioSets and only return the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCardioSetUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCardioSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserCardioSet.
     * @param {UserCardioSetUpsertArgs} args - Arguments to update or create a UserCardioSet.
     * @example
     * // Update or create a UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.upsert({
     *   create: {
     *     // ... data to create a UserCardioSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCardioSet we want to update
     *   }
     * })
     */
    upsert<T extends UserCardioSetUpsertArgs>(args: SelectSubset<T, UserCardioSetUpsertArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetCountArgs} args - Arguments to filter UserCardioSets to count.
     * @example
     * // Count the number of UserCardioSets
     * const count = await prisma.userCardioSet.count({
     *   where: {
     *     // ... the filter for the UserCardioSets we want to count
     *   }
     * })
    **/
    count<T extends UserCardioSetCountArgs>(
      args?: Subset<T, UserCardioSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCardioSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCardioSetAggregateArgs>(args: Subset<T, UserCardioSetAggregateArgs>): Prisma.PrismaPromise<GetUserCardioSetAggregateType<T>>

    /**
     * Group by UserCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCardioSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCardioSetGroupByArgs['orderBy'] }
        : { orderBy?: UserCardioSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCardioSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCardioSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCardioSet model
   */
  readonly fields: UserCardioSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCardioSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCardioSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userWorkoutExercise<T extends UserWorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCardioSet model
   */
  interface UserCardioSetFieldRefs {
    readonly id: FieldRef<"UserCardioSet", 'String'>
    readonly warmupTime: FieldRef<"UserCardioSet", 'Int'>
    readonly workTime: FieldRef<"UserCardioSet", 'Int'>
    readonly avgHeartRate: FieldRef<"UserCardioSet", 'Int'>
    readonly avgSpeed: FieldRef<"UserCardioSet", 'Float'>
    readonly distance: FieldRef<"UserCardioSet", 'Float'>
    readonly order: FieldRef<"UserCardioSet", 'Int'>
    readonly isCompleted: FieldRef<"UserCardioSet", 'Boolean'>
    readonly calorieTarget: FieldRef<"UserCardioSet", 'Int'>
    readonly userWorkoutExerciseId: FieldRef<"UserCardioSet", 'String'>
    readonly skippedReason: FieldRef<"UserCardioSet", 'String'>
    readonly createdAt: FieldRef<"UserCardioSet", 'DateTime'>
    readonly updatedAt: FieldRef<"UserCardioSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCardioSet findUnique
   */
  export type UserCardioSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where: UserCardioSetWhereUniqueInput
  }

  /**
   * UserCardioSet findUniqueOrThrow
   */
  export type UserCardioSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where: UserCardioSetWhereUniqueInput
  }

  /**
   * UserCardioSet findFirst
   */
  export type UserCardioSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardioSets.
     */
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
  }

  /**
   * UserCardioSet findFirstOrThrow
   */
  export type UserCardioSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardioSets.
     */
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
  }

  /**
   * UserCardioSet findMany
   */
  export type UserCardioSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSets to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
  }

  /**
   * UserCardioSet create
   */
  export type UserCardioSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCardioSet.
     */
    data: XOR<UserCardioSetCreateInput, UserCardioSetUncheckedCreateInput>
  }

  /**
   * UserCardioSet createMany
   */
  export type UserCardioSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCardioSets.
     */
    data: UserCardioSetCreateManyInput | UserCardioSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCardioSet createManyAndReturn
   */
  export type UserCardioSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * The data used to create many UserCardioSets.
     */
    data: UserCardioSetCreateManyInput | UserCardioSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCardioSet update
   */
  export type UserCardioSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCardioSet.
     */
    data: XOR<UserCardioSetUpdateInput, UserCardioSetUncheckedUpdateInput>
    /**
     * Choose, which UserCardioSet to update.
     */
    where: UserCardioSetWhereUniqueInput
  }

  /**
   * UserCardioSet updateMany
   */
  export type UserCardioSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCardioSets.
     */
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which UserCardioSets to update
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to update.
     */
    limit?: number
  }

  /**
   * UserCardioSet updateManyAndReturn
   */
  export type UserCardioSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * The data used to update UserCardioSets.
     */
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which UserCardioSets to update
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCardioSet upsert
   */
  export type UserCardioSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCardioSet to update in case it exists.
     */
    where: UserCardioSetWhereUniqueInput
    /**
     * In case the UserCardioSet found by the `where` argument doesn't exist, create a new UserCardioSet with this data.
     */
    create: XOR<UserCardioSetCreateInput, UserCardioSetUncheckedCreateInput>
    /**
     * In case the UserCardioSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCardioSetUpdateInput, UserCardioSetUncheckedUpdateInput>
  }

  /**
   * UserCardioSet delete
   */
  export type UserCardioSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter which UserCardioSet to delete.
     */
    where: UserCardioSetWhereUniqueInput
  }

  /**
   * UserCardioSet deleteMany
   */
  export type UserCardioSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardioSets to delete
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to delete.
     */
    limit?: number
  }

  /**
   * UserCardioSet without action
   */
  export type UserCardioSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
  }


  /**
   * Model CoreStrengthSet
   */

  export type AggregateCoreStrengthSet = {
    _count: CoreStrengthSetCountAggregateOutputType | null
    _avg: CoreStrengthSetAvgAggregateOutputType | null
    _sum: CoreStrengthSetSumAggregateOutputType | null
    _min: CoreStrengthSetMinAggregateOutputType | null
    _max: CoreStrengthSetMaxAggregateOutputType | null
  }

  export type CoreStrengthSetAvgAggregateOutputType = {
    restTime: number | null
    numberOfSets: number | null
  }

  export type CoreStrengthSetSumAggregateOutputType = {
    restTime: number | null
    numberOfSets: number | null
  }

  export type CoreStrengthSetMinAggregateOutputType = {
    id: string | null
    restTime: number | null
    numberOfSets: number | null
    hasWarmup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetMaxAggregateOutputType = {
    id: string | null
    restTime: number | null
    numberOfSets: number | null
    hasWarmup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetCountAggregateOutputType = {
    id: number
    restTime: number
    numberOfSets: number
    hasWarmup: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreStrengthSetAvgAggregateInputType = {
    restTime?: true
    numberOfSets?: true
  }

  export type CoreStrengthSetSumAggregateInputType = {
    restTime?: true
    numberOfSets?: true
  }

  export type CoreStrengthSetMinAggregateInputType = {
    id?: true
    restTime?: true
    numberOfSets?: true
    hasWarmup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetMaxAggregateInputType = {
    id?: true
    restTime?: true
    numberOfSets?: true
    hasWarmup?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetCountAggregateInputType = {
    id?: true
    restTime?: true
    numberOfSets?: true
    hasWarmup?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreStrengthSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSet to aggregate.
     */
    where?: CoreStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSets to fetch.
     */
    orderBy?: CoreStrengthSetOrderByWithRelationInput | CoreStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreStrengthSets
    **/
    _count?: true | CoreStrengthSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreStrengthSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreStrengthSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreStrengthSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreStrengthSetMaxAggregateInputType
  }

  export type GetCoreStrengthSetAggregateType<T extends CoreStrengthSetAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreStrengthSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreStrengthSet[P]>
      : GetScalarType<T[P], AggregateCoreStrengthSet[P]>
  }




  export type CoreStrengthSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreStrengthSetWhereInput
    orderBy?: CoreStrengthSetOrderByWithAggregationInput | CoreStrengthSetOrderByWithAggregationInput[]
    by: CoreStrengthSetScalarFieldEnum[] | CoreStrengthSetScalarFieldEnum
    having?: CoreStrengthSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreStrengthSetCountAggregateInputType | true
    _avg?: CoreStrengthSetAvgAggregateInputType
    _sum?: CoreStrengthSetSumAggregateInputType
    _min?: CoreStrengthSetMinAggregateInputType
    _max?: CoreStrengthSetMaxAggregateInputType
  }

  export type CoreStrengthSetGroupByOutputType = {
    id: string
    restTime: number
    numberOfSets: number
    hasWarmup: boolean
    createdAt: Date
    updatedAt: Date
    _count: CoreStrengthSetCountAggregateOutputType | null
    _avg: CoreStrengthSetAvgAggregateOutputType | null
    _sum: CoreStrengthSetSumAggregateOutputType | null
    _min: CoreStrengthSetMinAggregateOutputType | null
    _max: CoreStrengthSetMaxAggregateOutputType | null
  }

  type GetCoreStrengthSetGroupByPayload<T extends CoreStrengthSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreStrengthSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreStrengthSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreStrengthSetGroupByOutputType[P]>
            : GetScalarType<T[P], CoreStrengthSetGroupByOutputType[P]>
        }
      >
    >


  export type CoreStrengthSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restTime?: boolean
    numberOfSets?: boolean
    hasWarmup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workoutExercise?: boolean | CoreStrengthSet$workoutExerciseArgs<ExtArgs>
    reps?: boolean | CoreStrengthSet$repsArgs<ExtArgs>
    weight?: boolean | CoreStrengthSet$weightArgs<ExtArgs>
    _count?: boolean | CoreStrengthSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSet"]>

  export type CoreStrengthSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restTime?: boolean
    numberOfSets?: boolean
    hasWarmup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coreStrengthSet"]>

  export type CoreStrengthSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restTime?: boolean
    numberOfSets?: boolean
    hasWarmup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coreStrengthSet"]>

  export type CoreStrengthSetSelectScalar = {
    id?: boolean
    restTime?: boolean
    numberOfSets?: boolean
    hasWarmup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreStrengthSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "restTime" | "numberOfSets" | "hasWarmup" | "createdAt" | "updatedAt", ExtArgs["result"]["coreStrengthSet"]>
  export type CoreStrengthSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | CoreStrengthSet$workoutExerciseArgs<ExtArgs>
    reps?: boolean | CoreStrengthSet$repsArgs<ExtArgs>
    weight?: boolean | CoreStrengthSet$weightArgs<ExtArgs>
    _count?: boolean | CoreStrengthSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoreStrengthSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoreStrengthSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoreStrengthSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreStrengthSet"
    objects: {
      workoutExercise: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      reps: Prisma.$CoreStrengthSetRepsPayload<ExtArgs>[]
      weight: Prisma.$CoreStrengthSetWeightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      restTime: number
      numberOfSets: number
      hasWarmup: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreStrengthSet"]>
    composites: {}
  }

  type CoreStrengthSetGetPayload<S extends boolean | null | undefined | CoreStrengthSetDefaultArgs> = $Result.GetResult<Prisma.$CoreStrengthSetPayload, S>

  type CoreStrengthSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreStrengthSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreStrengthSetCountAggregateInputType | true
    }

  export interface CoreStrengthSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreStrengthSet'], meta: { name: 'CoreStrengthSet' } }
    /**
     * Find zero or one CoreStrengthSet that matches the filter.
     * @param {CoreStrengthSetFindUniqueArgs} args - Arguments to find a CoreStrengthSet
     * @example
     * // Get one CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreStrengthSetFindUniqueArgs>(args: SelectSubset<T, CoreStrengthSetFindUniqueArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreStrengthSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreStrengthSetFindUniqueOrThrowArgs} args - Arguments to find a CoreStrengthSet
     * @example
     * // Get one CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreStrengthSetFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreStrengthSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetFindFirstArgs} args - Arguments to find a CoreStrengthSet
     * @example
     * // Get one CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreStrengthSetFindFirstArgs>(args?: SelectSubset<T, CoreStrengthSetFindFirstArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetFindFirstOrThrowArgs} args - Arguments to find a CoreStrengthSet
     * @example
     * // Get one CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreStrengthSetFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreStrengthSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreStrengthSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreStrengthSets
     * const coreStrengthSets = await prisma.coreStrengthSet.findMany()
     * 
     * // Get first 10 CoreStrengthSets
     * const coreStrengthSets = await prisma.coreStrengthSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreStrengthSetWithIdOnly = await prisma.coreStrengthSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreStrengthSetFindManyArgs>(args?: SelectSubset<T, CoreStrengthSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreStrengthSet.
     * @param {CoreStrengthSetCreateArgs} args - Arguments to create a CoreStrengthSet.
     * @example
     * // Create one CoreStrengthSet
     * const CoreStrengthSet = await prisma.coreStrengthSet.create({
     *   data: {
     *     // ... data to create a CoreStrengthSet
     *   }
     * })
     * 
     */
    create<T extends CoreStrengthSetCreateArgs>(args: SelectSubset<T, CoreStrengthSetCreateArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreStrengthSets.
     * @param {CoreStrengthSetCreateManyArgs} args - Arguments to create many CoreStrengthSets.
     * @example
     * // Create many CoreStrengthSets
     * const coreStrengthSet = await prisma.coreStrengthSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreStrengthSetCreateManyArgs>(args?: SelectSubset<T, CoreStrengthSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreStrengthSets and returns the data saved in the database.
     * @param {CoreStrengthSetCreateManyAndReturnArgs} args - Arguments to create many CoreStrengthSets.
     * @example
     * // Create many CoreStrengthSets
     * const coreStrengthSet = await prisma.coreStrengthSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreStrengthSets and only return the `id`
     * const coreStrengthSetWithIdOnly = await prisma.coreStrengthSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreStrengthSetCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreStrengthSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreStrengthSet.
     * @param {CoreStrengthSetDeleteArgs} args - Arguments to delete one CoreStrengthSet.
     * @example
     * // Delete one CoreStrengthSet
     * const CoreStrengthSet = await prisma.coreStrengthSet.delete({
     *   where: {
     *     // ... filter to delete one CoreStrengthSet
     *   }
     * })
     * 
     */
    delete<T extends CoreStrengthSetDeleteArgs>(args: SelectSubset<T, CoreStrengthSetDeleteArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreStrengthSet.
     * @param {CoreStrengthSetUpdateArgs} args - Arguments to update one CoreStrengthSet.
     * @example
     * // Update one CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreStrengthSetUpdateArgs>(args: SelectSubset<T, CoreStrengthSetUpdateArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreStrengthSets.
     * @param {CoreStrengthSetDeleteManyArgs} args - Arguments to filter CoreStrengthSets to delete.
     * @example
     * // Delete a few CoreStrengthSets
     * const { count } = await prisma.coreStrengthSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreStrengthSetDeleteManyArgs>(args?: SelectSubset<T, CoreStrengthSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreStrengthSets
     * const coreStrengthSet = await prisma.coreStrengthSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreStrengthSetUpdateManyArgs>(args: SelectSubset<T, CoreStrengthSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSets and returns the data updated in the database.
     * @param {CoreStrengthSetUpdateManyAndReturnArgs} args - Arguments to update many CoreStrengthSets.
     * @example
     * // Update many CoreStrengthSets
     * const coreStrengthSet = await prisma.coreStrengthSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreStrengthSets and only return the `id`
     * const coreStrengthSetWithIdOnly = await prisma.coreStrengthSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreStrengthSetUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreStrengthSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreStrengthSet.
     * @param {CoreStrengthSetUpsertArgs} args - Arguments to update or create a CoreStrengthSet.
     * @example
     * // Update or create a CoreStrengthSet
     * const coreStrengthSet = await prisma.coreStrengthSet.upsert({
     *   create: {
     *     // ... data to create a CoreStrengthSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreStrengthSet we want to update
     *   }
     * })
     */
    upsert<T extends CoreStrengthSetUpsertArgs>(args: SelectSubset<T, CoreStrengthSetUpsertArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetCountArgs} args - Arguments to filter CoreStrengthSets to count.
     * @example
     * // Count the number of CoreStrengthSets
     * const count = await prisma.coreStrengthSet.count({
     *   where: {
     *     // ... the filter for the CoreStrengthSets we want to count
     *   }
     * })
    **/
    count<T extends CoreStrengthSetCountArgs>(
      args?: Subset<T, CoreStrengthSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreStrengthSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreStrengthSetAggregateArgs>(args: Subset<T, CoreStrengthSetAggregateArgs>): Prisma.PrismaPromise<GetCoreStrengthSetAggregateType<T>>

    /**
     * Group by CoreStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreStrengthSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreStrengthSetGroupByArgs['orderBy'] }
        : { orderBy?: CoreStrengthSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreStrengthSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreStrengthSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreStrengthSet model
   */
  readonly fields: CoreStrengthSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreStrengthSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreStrengthSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutExercise<T extends CoreStrengthSet$workoutExerciseArgs<ExtArgs> = {}>(args?: Subset<T, CoreStrengthSet$workoutExerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reps<T extends CoreStrengthSet$repsArgs<ExtArgs> = {}>(args?: Subset<T, CoreStrengthSet$repsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weight<T extends CoreStrengthSet$weightArgs<ExtArgs> = {}>(args?: Subset<T, CoreStrengthSet$weightArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreStrengthSet model
   */
  interface CoreStrengthSetFieldRefs {
    readonly id: FieldRef<"CoreStrengthSet", 'String'>
    readonly restTime: FieldRef<"CoreStrengthSet", 'Int'>
    readonly numberOfSets: FieldRef<"CoreStrengthSet", 'Int'>
    readonly hasWarmup: FieldRef<"CoreStrengthSet", 'Boolean'>
    readonly createdAt: FieldRef<"CoreStrengthSet", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreStrengthSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreStrengthSet findUnique
   */
  export type CoreStrengthSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSet to fetch.
     */
    where: CoreStrengthSetWhereUniqueInput
  }

  /**
   * CoreStrengthSet findUniqueOrThrow
   */
  export type CoreStrengthSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSet to fetch.
     */
    where: CoreStrengthSetWhereUniqueInput
  }

  /**
   * CoreStrengthSet findFirst
   */
  export type CoreStrengthSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSet to fetch.
     */
    where?: CoreStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSets to fetch.
     */
    orderBy?: CoreStrengthSetOrderByWithRelationInput | CoreStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSets.
     */
    cursor?: CoreStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSets.
     */
    distinct?: CoreStrengthSetScalarFieldEnum | CoreStrengthSetScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet findFirstOrThrow
   */
  export type CoreStrengthSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSet to fetch.
     */
    where?: CoreStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSets to fetch.
     */
    orderBy?: CoreStrengthSetOrderByWithRelationInput | CoreStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSets.
     */
    cursor?: CoreStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSets.
     */
    distinct?: CoreStrengthSetScalarFieldEnum | CoreStrengthSetScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet findMany
   */
  export type CoreStrengthSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSets to fetch.
     */
    where?: CoreStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSets to fetch.
     */
    orderBy?: CoreStrengthSetOrderByWithRelationInput | CoreStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreStrengthSets.
     */
    cursor?: CoreStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSets.
     */
    skip?: number
    distinct?: CoreStrengthSetScalarFieldEnum | CoreStrengthSetScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet create
   */
  export type CoreStrengthSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreStrengthSet.
     */
    data: XOR<CoreStrengthSetCreateInput, CoreStrengthSetUncheckedCreateInput>
  }

  /**
   * CoreStrengthSet createMany
   */
  export type CoreStrengthSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreStrengthSets.
     */
    data: CoreStrengthSetCreateManyInput | CoreStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreStrengthSet createManyAndReturn
   */
  export type CoreStrengthSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to create many CoreStrengthSets.
     */
    data: CoreStrengthSetCreateManyInput | CoreStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreStrengthSet update
   */
  export type CoreStrengthSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreStrengthSet.
     */
    data: XOR<CoreStrengthSetUpdateInput, CoreStrengthSetUncheckedUpdateInput>
    /**
     * Choose, which CoreStrengthSet to update.
     */
    where: CoreStrengthSetWhereUniqueInput
  }

  /**
   * CoreStrengthSet updateMany
   */
  export type CoreStrengthSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreStrengthSets.
     */
    data: XOR<CoreStrengthSetUpdateManyMutationInput, CoreStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSets to update
     */
    where?: CoreStrengthSetWhereInput
    /**
     * Limit how many CoreStrengthSets to update.
     */
    limit?: number
  }

  /**
   * CoreStrengthSet updateManyAndReturn
   */
  export type CoreStrengthSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to update CoreStrengthSets.
     */
    data: XOR<CoreStrengthSetUpdateManyMutationInput, CoreStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSets to update
     */
    where?: CoreStrengthSetWhereInput
    /**
     * Limit how many CoreStrengthSets to update.
     */
    limit?: number
  }

  /**
   * CoreStrengthSet upsert
   */
  export type CoreStrengthSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreStrengthSet to update in case it exists.
     */
    where: CoreStrengthSetWhereUniqueInput
    /**
     * In case the CoreStrengthSet found by the `where` argument doesn't exist, create a new CoreStrengthSet with this data.
     */
    create: XOR<CoreStrengthSetCreateInput, CoreStrengthSetUncheckedCreateInput>
    /**
     * In case the CoreStrengthSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreStrengthSetUpdateInput, CoreStrengthSetUncheckedUpdateInput>
  }

  /**
   * CoreStrengthSet delete
   */
  export type CoreStrengthSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    /**
     * Filter which CoreStrengthSet to delete.
     */
    where: CoreStrengthSetWhereUniqueInput
  }

  /**
   * CoreStrengthSet deleteMany
   */
  export type CoreStrengthSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSets to delete
     */
    where?: CoreStrengthSetWhereInput
    /**
     * Limit how many CoreStrengthSets to delete.
     */
    limit?: number
  }

  /**
   * CoreStrengthSet.workoutExercise
   */
  export type CoreStrengthSet$workoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet.reps
   */
  export type CoreStrengthSet$repsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    where?: CoreStrengthSetRepsWhereInput
    orderBy?: CoreStrengthSetRepsOrderByWithRelationInput | CoreStrengthSetRepsOrderByWithRelationInput[]
    cursor?: CoreStrengthSetRepsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreStrengthSetRepsScalarFieldEnum | CoreStrengthSetRepsScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet.weight
   */
  export type CoreStrengthSet$weightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    where?: CoreStrengthSetWeightWhereInput
    orderBy?: CoreStrengthSetWeightOrderByWithRelationInput | CoreStrengthSetWeightOrderByWithRelationInput[]
    cursor?: CoreStrengthSetWeightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoreStrengthSetWeightScalarFieldEnum | CoreStrengthSetWeightScalarFieldEnum[]
  }

  /**
   * CoreStrengthSet without action
   */
  export type CoreStrengthSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
  }


  /**
   * Model CoreStrengthSetReps
   */

  export type AggregateCoreStrengthSetReps = {
    _count: CoreStrengthSetRepsCountAggregateOutputType | null
    _avg: CoreStrengthSetRepsAvgAggregateOutputType | null
    _sum: CoreStrengthSetRepsSumAggregateOutputType | null
    _min: CoreStrengthSetRepsMinAggregateOutputType | null
    _max: CoreStrengthSetRepsMaxAggregateOutputType | null
  }

  export type CoreStrengthSetRepsAvgAggregateOutputType = {
    reps: number | null
  }

  export type CoreStrengthSetRepsSumAggregateOutputType = {
    reps: number | null
  }

  export type CoreStrengthSetRepsMinAggregateOutputType = {
    id: string | null
    coreStrengthSetId: string | null
    reps: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetRepsMaxAggregateOutputType = {
    id: string | null
    coreStrengthSetId: string | null
    reps: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetRepsCountAggregateOutputType = {
    id: number
    coreStrengthSetId: number
    reps: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreStrengthSetRepsAvgAggregateInputType = {
    reps?: true
  }

  export type CoreStrengthSetRepsSumAggregateInputType = {
    reps?: true
  }

  export type CoreStrengthSetRepsMinAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    reps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetRepsMaxAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    reps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetRepsCountAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    reps?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreStrengthSetRepsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSetReps to aggregate.
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetReps to fetch.
     */
    orderBy?: CoreStrengthSetRepsOrderByWithRelationInput | CoreStrengthSetRepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreStrengthSetRepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetReps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetReps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreStrengthSetReps
    **/
    _count?: true | CoreStrengthSetRepsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreStrengthSetRepsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreStrengthSetRepsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreStrengthSetRepsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreStrengthSetRepsMaxAggregateInputType
  }

  export type GetCoreStrengthSetRepsAggregateType<T extends CoreStrengthSetRepsAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreStrengthSetReps]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreStrengthSetReps[P]>
      : GetScalarType<T[P], AggregateCoreStrengthSetReps[P]>
  }




  export type CoreStrengthSetRepsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreStrengthSetRepsWhereInput
    orderBy?: CoreStrengthSetRepsOrderByWithAggregationInput | CoreStrengthSetRepsOrderByWithAggregationInput[]
    by: CoreStrengthSetRepsScalarFieldEnum[] | CoreStrengthSetRepsScalarFieldEnum
    having?: CoreStrengthSetRepsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreStrengthSetRepsCountAggregateInputType | true
    _avg?: CoreStrengthSetRepsAvgAggregateInputType
    _sum?: CoreStrengthSetRepsSumAggregateInputType
    _min?: CoreStrengthSetRepsMinAggregateInputType
    _max?: CoreStrengthSetRepsMaxAggregateInputType
  }

  export type CoreStrengthSetRepsGroupByOutputType = {
    id: string
    coreStrengthSetId: string
    reps: number
    createdAt: Date
    updatedAt: Date
    _count: CoreStrengthSetRepsCountAggregateOutputType | null
    _avg: CoreStrengthSetRepsAvgAggregateOutputType | null
    _sum: CoreStrengthSetRepsSumAggregateOutputType | null
    _min: CoreStrengthSetRepsMinAggregateOutputType | null
    _max: CoreStrengthSetRepsMaxAggregateOutputType | null
  }

  type GetCoreStrengthSetRepsGroupByPayload<T extends CoreStrengthSetRepsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreStrengthSetRepsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreStrengthSetRepsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreStrengthSetRepsGroupByOutputType[P]>
            : GetScalarType<T[P], CoreStrengthSetRepsGroupByOutputType[P]>
        }
      >
    >


  export type CoreStrengthSetRepsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    reps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetReps"]>

  export type CoreStrengthSetRepsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    reps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetReps"]>

  export type CoreStrengthSetRepsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    reps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetReps"]>

  export type CoreStrengthSetRepsSelectScalar = {
    id?: boolean
    coreStrengthSetId?: boolean
    reps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreStrengthSetRepsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreStrengthSetId" | "reps" | "createdAt" | "updatedAt", ExtArgs["result"]["coreStrengthSetReps"]>
  export type CoreStrengthSetRepsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }
  export type CoreStrengthSetRepsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }
  export type CoreStrengthSetRepsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }

  export type $CoreStrengthSetRepsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreStrengthSetReps"
    objects: {
      coreStrengthSet: Prisma.$CoreStrengthSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreStrengthSetId: string
      reps: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreStrengthSetReps"]>
    composites: {}
  }

  type CoreStrengthSetRepsGetPayload<S extends boolean | null | undefined | CoreStrengthSetRepsDefaultArgs> = $Result.GetResult<Prisma.$CoreStrengthSetRepsPayload, S>

  type CoreStrengthSetRepsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreStrengthSetRepsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreStrengthSetRepsCountAggregateInputType | true
    }

  export interface CoreStrengthSetRepsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreStrengthSetReps'], meta: { name: 'CoreStrengthSetReps' } }
    /**
     * Find zero or one CoreStrengthSetReps that matches the filter.
     * @param {CoreStrengthSetRepsFindUniqueArgs} args - Arguments to find a CoreStrengthSetReps
     * @example
     * // Get one CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreStrengthSetRepsFindUniqueArgs>(args: SelectSubset<T, CoreStrengthSetRepsFindUniqueArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreStrengthSetReps that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreStrengthSetRepsFindUniqueOrThrowArgs} args - Arguments to find a CoreStrengthSetReps
     * @example
     * // Get one CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreStrengthSetRepsFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreStrengthSetRepsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSetReps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsFindFirstArgs} args - Arguments to find a CoreStrengthSetReps
     * @example
     * // Get one CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreStrengthSetRepsFindFirstArgs>(args?: SelectSubset<T, CoreStrengthSetRepsFindFirstArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSetReps that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsFindFirstOrThrowArgs} args - Arguments to find a CoreStrengthSetReps
     * @example
     * // Get one CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreStrengthSetRepsFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreStrengthSetRepsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreStrengthSetReps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findMany()
     * 
     * // Get first 10 CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreStrengthSetRepsWithIdOnly = await prisma.coreStrengthSetReps.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreStrengthSetRepsFindManyArgs>(args?: SelectSubset<T, CoreStrengthSetRepsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsCreateArgs} args - Arguments to create a CoreStrengthSetReps.
     * @example
     * // Create one CoreStrengthSetReps
     * const CoreStrengthSetReps = await prisma.coreStrengthSetReps.create({
     *   data: {
     *     // ... data to create a CoreStrengthSetReps
     *   }
     * })
     * 
     */
    create<T extends CoreStrengthSetRepsCreateArgs>(args: SelectSubset<T, CoreStrengthSetRepsCreateArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsCreateManyArgs} args - Arguments to create many CoreStrengthSetReps.
     * @example
     * // Create many CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreStrengthSetRepsCreateManyArgs>(args?: SelectSubset<T, CoreStrengthSetRepsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreStrengthSetReps and returns the data saved in the database.
     * @param {CoreStrengthSetRepsCreateManyAndReturnArgs} args - Arguments to create many CoreStrengthSetReps.
     * @example
     * // Create many CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreStrengthSetReps and only return the `id`
     * const coreStrengthSetRepsWithIdOnly = await prisma.coreStrengthSetReps.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreStrengthSetRepsCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreStrengthSetRepsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsDeleteArgs} args - Arguments to delete one CoreStrengthSetReps.
     * @example
     * // Delete one CoreStrengthSetReps
     * const CoreStrengthSetReps = await prisma.coreStrengthSetReps.delete({
     *   where: {
     *     // ... filter to delete one CoreStrengthSetReps
     *   }
     * })
     * 
     */
    delete<T extends CoreStrengthSetRepsDeleteArgs>(args: SelectSubset<T, CoreStrengthSetRepsDeleteArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsUpdateArgs} args - Arguments to update one CoreStrengthSetReps.
     * @example
     * // Update one CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreStrengthSetRepsUpdateArgs>(args: SelectSubset<T, CoreStrengthSetRepsUpdateArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsDeleteManyArgs} args - Arguments to filter CoreStrengthSetReps to delete.
     * @example
     * // Delete a few CoreStrengthSetReps
     * const { count } = await prisma.coreStrengthSetReps.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreStrengthSetRepsDeleteManyArgs>(args?: SelectSubset<T, CoreStrengthSetRepsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSetReps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreStrengthSetRepsUpdateManyArgs>(args: SelectSubset<T, CoreStrengthSetRepsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSetReps and returns the data updated in the database.
     * @param {CoreStrengthSetRepsUpdateManyAndReturnArgs} args - Arguments to update many CoreStrengthSetReps.
     * @example
     * // Update many CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreStrengthSetReps and only return the `id`
     * const coreStrengthSetRepsWithIdOnly = await prisma.coreStrengthSetReps.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreStrengthSetRepsUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreStrengthSetRepsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreStrengthSetReps.
     * @param {CoreStrengthSetRepsUpsertArgs} args - Arguments to update or create a CoreStrengthSetReps.
     * @example
     * // Update or create a CoreStrengthSetReps
     * const coreStrengthSetReps = await prisma.coreStrengthSetReps.upsert({
     *   create: {
     *     // ... data to create a CoreStrengthSetReps
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreStrengthSetReps we want to update
     *   }
     * })
     */
    upsert<T extends CoreStrengthSetRepsUpsertArgs>(args: SelectSubset<T, CoreStrengthSetRepsUpsertArgs<ExtArgs>>): Prisma__CoreStrengthSetRepsClient<$Result.GetResult<Prisma.$CoreStrengthSetRepsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreStrengthSetReps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsCountArgs} args - Arguments to filter CoreStrengthSetReps to count.
     * @example
     * // Count the number of CoreStrengthSetReps
     * const count = await prisma.coreStrengthSetReps.count({
     *   where: {
     *     // ... the filter for the CoreStrengthSetReps we want to count
     *   }
     * })
    **/
    count<T extends CoreStrengthSetRepsCountArgs>(
      args?: Subset<T, CoreStrengthSetRepsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreStrengthSetRepsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreStrengthSetReps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreStrengthSetRepsAggregateArgs>(args: Subset<T, CoreStrengthSetRepsAggregateArgs>): Prisma.PrismaPromise<GetCoreStrengthSetRepsAggregateType<T>>

    /**
     * Group by CoreStrengthSetReps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetRepsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreStrengthSetRepsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreStrengthSetRepsGroupByArgs['orderBy'] }
        : { orderBy?: CoreStrengthSetRepsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreStrengthSetRepsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreStrengthSetRepsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreStrengthSetReps model
   */
  readonly fields: CoreStrengthSetRepsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreStrengthSetReps.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreStrengthSetRepsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreStrengthSet<T extends CoreStrengthSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreStrengthSetDefaultArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreStrengthSetReps model
   */
  interface CoreStrengthSetRepsFieldRefs {
    readonly id: FieldRef<"CoreStrengthSetReps", 'String'>
    readonly coreStrengthSetId: FieldRef<"CoreStrengthSetReps", 'String'>
    readonly reps: FieldRef<"CoreStrengthSetReps", 'Int'>
    readonly createdAt: FieldRef<"CoreStrengthSetReps", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreStrengthSetReps", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreStrengthSetReps findUnique
   */
  export type CoreStrengthSetRepsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetReps to fetch.
     */
    where: CoreStrengthSetRepsWhereUniqueInput
  }

  /**
   * CoreStrengthSetReps findUniqueOrThrow
   */
  export type CoreStrengthSetRepsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetReps to fetch.
     */
    where: CoreStrengthSetRepsWhereUniqueInput
  }

  /**
   * CoreStrengthSetReps findFirst
   */
  export type CoreStrengthSetRepsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetReps to fetch.
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetReps to fetch.
     */
    orderBy?: CoreStrengthSetRepsOrderByWithRelationInput | CoreStrengthSetRepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSetReps.
     */
    cursor?: CoreStrengthSetRepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetReps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetReps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSetReps.
     */
    distinct?: CoreStrengthSetRepsScalarFieldEnum | CoreStrengthSetRepsScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetReps findFirstOrThrow
   */
  export type CoreStrengthSetRepsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetReps to fetch.
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetReps to fetch.
     */
    orderBy?: CoreStrengthSetRepsOrderByWithRelationInput | CoreStrengthSetRepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSetReps.
     */
    cursor?: CoreStrengthSetRepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetReps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetReps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSetReps.
     */
    distinct?: CoreStrengthSetRepsScalarFieldEnum | CoreStrengthSetRepsScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetReps findMany
   */
  export type CoreStrengthSetRepsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetReps to fetch.
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetReps to fetch.
     */
    orderBy?: CoreStrengthSetRepsOrderByWithRelationInput | CoreStrengthSetRepsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreStrengthSetReps.
     */
    cursor?: CoreStrengthSetRepsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetReps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetReps.
     */
    skip?: number
    distinct?: CoreStrengthSetRepsScalarFieldEnum | CoreStrengthSetRepsScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetReps create
   */
  export type CoreStrengthSetRepsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreStrengthSetReps.
     */
    data: XOR<CoreStrengthSetRepsCreateInput, CoreStrengthSetRepsUncheckedCreateInput>
  }

  /**
   * CoreStrengthSetReps createMany
   */
  export type CoreStrengthSetRepsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreStrengthSetReps.
     */
    data: CoreStrengthSetRepsCreateManyInput | CoreStrengthSetRepsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreStrengthSetReps createManyAndReturn
   */
  export type CoreStrengthSetRepsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * The data used to create many CoreStrengthSetReps.
     */
    data: CoreStrengthSetRepsCreateManyInput | CoreStrengthSetRepsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreStrengthSetReps update
   */
  export type CoreStrengthSetRepsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreStrengthSetReps.
     */
    data: XOR<CoreStrengthSetRepsUpdateInput, CoreStrengthSetRepsUncheckedUpdateInput>
    /**
     * Choose, which CoreStrengthSetReps to update.
     */
    where: CoreStrengthSetRepsWhereUniqueInput
  }

  /**
   * CoreStrengthSetReps updateMany
   */
  export type CoreStrengthSetRepsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreStrengthSetReps.
     */
    data: XOR<CoreStrengthSetRepsUpdateManyMutationInput, CoreStrengthSetRepsUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSetReps to update
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * Limit how many CoreStrengthSetReps to update.
     */
    limit?: number
  }

  /**
   * CoreStrengthSetReps updateManyAndReturn
   */
  export type CoreStrengthSetRepsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * The data used to update CoreStrengthSetReps.
     */
    data: XOR<CoreStrengthSetRepsUpdateManyMutationInput, CoreStrengthSetRepsUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSetReps to update
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * Limit how many CoreStrengthSetReps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreStrengthSetReps upsert
   */
  export type CoreStrengthSetRepsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreStrengthSetReps to update in case it exists.
     */
    where: CoreStrengthSetRepsWhereUniqueInput
    /**
     * In case the CoreStrengthSetReps found by the `where` argument doesn't exist, create a new CoreStrengthSetReps with this data.
     */
    create: XOR<CoreStrengthSetRepsCreateInput, CoreStrengthSetRepsUncheckedCreateInput>
    /**
     * In case the CoreStrengthSetReps was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreStrengthSetRepsUpdateInput, CoreStrengthSetRepsUncheckedUpdateInput>
  }

  /**
   * CoreStrengthSetReps delete
   */
  export type CoreStrengthSetRepsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
    /**
     * Filter which CoreStrengthSetReps to delete.
     */
    where: CoreStrengthSetRepsWhereUniqueInput
  }

  /**
   * CoreStrengthSetReps deleteMany
   */
  export type CoreStrengthSetRepsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSetReps to delete
     */
    where?: CoreStrengthSetRepsWhereInput
    /**
     * Limit how many CoreStrengthSetReps to delete.
     */
    limit?: number
  }

  /**
   * CoreStrengthSetReps without action
   */
  export type CoreStrengthSetRepsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetReps
     */
    select?: CoreStrengthSetRepsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetReps
     */
    omit?: CoreStrengthSetRepsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetRepsInclude<ExtArgs> | null
  }


  /**
   * Model CoreStrengthSetWeight
   */

  export type AggregateCoreStrengthSetWeight = {
    _count: CoreStrengthSetWeightCountAggregateOutputType | null
    _avg: CoreStrengthSetWeightAvgAggregateOutputType | null
    _sum: CoreStrengthSetWeightSumAggregateOutputType | null
    _min: CoreStrengthSetWeightMinAggregateOutputType | null
    _max: CoreStrengthSetWeightMaxAggregateOutputType | null
  }

  export type CoreStrengthSetWeightAvgAggregateOutputType = {
    weight: number | null
  }

  export type CoreStrengthSetWeightSumAggregateOutputType = {
    weight: number | null
  }

  export type CoreStrengthSetWeightMinAggregateOutputType = {
    id: string | null
    coreStrengthSetId: string | null
    isBodyWeight: boolean | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetWeightMaxAggregateOutputType = {
    id: string | null
    coreStrengthSetId: string | null
    isBodyWeight: boolean | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoreStrengthSetWeightCountAggregateOutputType = {
    id: number
    coreStrengthSetId: number
    isBodyWeight: number
    weight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoreStrengthSetWeightAvgAggregateInputType = {
    weight?: true
  }

  export type CoreStrengthSetWeightSumAggregateInputType = {
    weight?: true
  }

  export type CoreStrengthSetWeightMinAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    isBodyWeight?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetWeightMaxAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    isBodyWeight?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoreStrengthSetWeightCountAggregateInputType = {
    id?: true
    coreStrengthSetId?: true
    isBodyWeight?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoreStrengthSetWeightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSetWeight to aggregate.
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetWeights to fetch.
     */
    orderBy?: CoreStrengthSetWeightOrderByWithRelationInput | CoreStrengthSetWeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoreStrengthSetWeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetWeights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetWeights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoreStrengthSetWeights
    **/
    _count?: true | CoreStrengthSetWeightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoreStrengthSetWeightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoreStrengthSetWeightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoreStrengthSetWeightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoreStrengthSetWeightMaxAggregateInputType
  }

  export type GetCoreStrengthSetWeightAggregateType<T extends CoreStrengthSetWeightAggregateArgs> = {
        [P in keyof T & keyof AggregateCoreStrengthSetWeight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoreStrengthSetWeight[P]>
      : GetScalarType<T[P], AggregateCoreStrengthSetWeight[P]>
  }




  export type CoreStrengthSetWeightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoreStrengthSetWeightWhereInput
    orderBy?: CoreStrengthSetWeightOrderByWithAggregationInput | CoreStrengthSetWeightOrderByWithAggregationInput[]
    by: CoreStrengthSetWeightScalarFieldEnum[] | CoreStrengthSetWeightScalarFieldEnum
    having?: CoreStrengthSetWeightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoreStrengthSetWeightCountAggregateInputType | true
    _avg?: CoreStrengthSetWeightAvgAggregateInputType
    _sum?: CoreStrengthSetWeightSumAggregateInputType
    _min?: CoreStrengthSetWeightMinAggregateInputType
    _max?: CoreStrengthSetWeightMaxAggregateInputType
  }

  export type CoreStrengthSetWeightGroupByOutputType = {
    id: string
    coreStrengthSetId: string
    isBodyWeight: boolean
    weight: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoreStrengthSetWeightCountAggregateOutputType | null
    _avg: CoreStrengthSetWeightAvgAggregateOutputType | null
    _sum: CoreStrengthSetWeightSumAggregateOutputType | null
    _min: CoreStrengthSetWeightMinAggregateOutputType | null
    _max: CoreStrengthSetWeightMaxAggregateOutputType | null
  }

  type GetCoreStrengthSetWeightGroupByPayload<T extends CoreStrengthSetWeightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoreStrengthSetWeightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoreStrengthSetWeightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoreStrengthSetWeightGroupByOutputType[P]>
            : GetScalarType<T[P], CoreStrengthSetWeightGroupByOutputType[P]>
        }
      >
    >


  export type CoreStrengthSetWeightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    isBodyWeight?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetWeight"]>

  export type CoreStrengthSetWeightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    isBodyWeight?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetWeight"]>

  export type CoreStrengthSetWeightSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coreStrengthSetId?: boolean
    isBodyWeight?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coreStrengthSetWeight"]>

  export type CoreStrengthSetWeightSelectScalar = {
    id?: boolean
    coreStrengthSetId?: boolean
    isBodyWeight?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoreStrengthSetWeightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coreStrengthSetId" | "isBodyWeight" | "weight" | "createdAt" | "updatedAt", ExtArgs["result"]["coreStrengthSetWeight"]>
  export type CoreStrengthSetWeightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }
  export type CoreStrengthSetWeightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }
  export type CoreStrengthSetWeightIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | CoreStrengthSetDefaultArgs<ExtArgs>
  }

  export type $CoreStrengthSetWeightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoreStrengthSetWeight"
    objects: {
      coreStrengthSet: Prisma.$CoreStrengthSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coreStrengthSetId: string
      isBodyWeight: boolean
      weight: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coreStrengthSetWeight"]>
    composites: {}
  }

  type CoreStrengthSetWeightGetPayload<S extends boolean | null | undefined | CoreStrengthSetWeightDefaultArgs> = $Result.GetResult<Prisma.$CoreStrengthSetWeightPayload, S>

  type CoreStrengthSetWeightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoreStrengthSetWeightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoreStrengthSetWeightCountAggregateInputType | true
    }

  export interface CoreStrengthSetWeightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoreStrengthSetWeight'], meta: { name: 'CoreStrengthSetWeight' } }
    /**
     * Find zero or one CoreStrengthSetWeight that matches the filter.
     * @param {CoreStrengthSetWeightFindUniqueArgs} args - Arguments to find a CoreStrengthSetWeight
     * @example
     * // Get one CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoreStrengthSetWeightFindUniqueArgs>(args: SelectSubset<T, CoreStrengthSetWeightFindUniqueArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoreStrengthSetWeight that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoreStrengthSetWeightFindUniqueOrThrowArgs} args - Arguments to find a CoreStrengthSetWeight
     * @example
     * // Get one CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoreStrengthSetWeightFindUniqueOrThrowArgs>(args: SelectSubset<T, CoreStrengthSetWeightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSetWeight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightFindFirstArgs} args - Arguments to find a CoreStrengthSetWeight
     * @example
     * // Get one CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoreStrengthSetWeightFindFirstArgs>(args?: SelectSubset<T, CoreStrengthSetWeightFindFirstArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoreStrengthSetWeight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightFindFirstOrThrowArgs} args - Arguments to find a CoreStrengthSetWeight
     * @example
     * // Get one CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoreStrengthSetWeightFindFirstOrThrowArgs>(args?: SelectSubset<T, CoreStrengthSetWeightFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoreStrengthSetWeights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoreStrengthSetWeights
     * const coreStrengthSetWeights = await prisma.coreStrengthSetWeight.findMany()
     * 
     * // Get first 10 CoreStrengthSetWeights
     * const coreStrengthSetWeights = await prisma.coreStrengthSetWeight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coreStrengthSetWeightWithIdOnly = await prisma.coreStrengthSetWeight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoreStrengthSetWeightFindManyArgs>(args?: SelectSubset<T, CoreStrengthSetWeightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoreStrengthSetWeight.
     * @param {CoreStrengthSetWeightCreateArgs} args - Arguments to create a CoreStrengthSetWeight.
     * @example
     * // Create one CoreStrengthSetWeight
     * const CoreStrengthSetWeight = await prisma.coreStrengthSetWeight.create({
     *   data: {
     *     // ... data to create a CoreStrengthSetWeight
     *   }
     * })
     * 
     */
    create<T extends CoreStrengthSetWeightCreateArgs>(args: SelectSubset<T, CoreStrengthSetWeightCreateArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoreStrengthSetWeights.
     * @param {CoreStrengthSetWeightCreateManyArgs} args - Arguments to create many CoreStrengthSetWeights.
     * @example
     * // Create many CoreStrengthSetWeights
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoreStrengthSetWeightCreateManyArgs>(args?: SelectSubset<T, CoreStrengthSetWeightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoreStrengthSetWeights and returns the data saved in the database.
     * @param {CoreStrengthSetWeightCreateManyAndReturnArgs} args - Arguments to create many CoreStrengthSetWeights.
     * @example
     * // Create many CoreStrengthSetWeights
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoreStrengthSetWeights and only return the `id`
     * const coreStrengthSetWeightWithIdOnly = await prisma.coreStrengthSetWeight.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoreStrengthSetWeightCreateManyAndReturnArgs>(args?: SelectSubset<T, CoreStrengthSetWeightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoreStrengthSetWeight.
     * @param {CoreStrengthSetWeightDeleteArgs} args - Arguments to delete one CoreStrengthSetWeight.
     * @example
     * // Delete one CoreStrengthSetWeight
     * const CoreStrengthSetWeight = await prisma.coreStrengthSetWeight.delete({
     *   where: {
     *     // ... filter to delete one CoreStrengthSetWeight
     *   }
     * })
     * 
     */
    delete<T extends CoreStrengthSetWeightDeleteArgs>(args: SelectSubset<T, CoreStrengthSetWeightDeleteArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoreStrengthSetWeight.
     * @param {CoreStrengthSetWeightUpdateArgs} args - Arguments to update one CoreStrengthSetWeight.
     * @example
     * // Update one CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoreStrengthSetWeightUpdateArgs>(args: SelectSubset<T, CoreStrengthSetWeightUpdateArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoreStrengthSetWeights.
     * @param {CoreStrengthSetWeightDeleteManyArgs} args - Arguments to filter CoreStrengthSetWeights to delete.
     * @example
     * // Delete a few CoreStrengthSetWeights
     * const { count } = await prisma.coreStrengthSetWeight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoreStrengthSetWeightDeleteManyArgs>(args?: SelectSubset<T, CoreStrengthSetWeightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSetWeights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoreStrengthSetWeights
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoreStrengthSetWeightUpdateManyArgs>(args: SelectSubset<T, CoreStrengthSetWeightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoreStrengthSetWeights and returns the data updated in the database.
     * @param {CoreStrengthSetWeightUpdateManyAndReturnArgs} args - Arguments to update many CoreStrengthSetWeights.
     * @example
     * // Update many CoreStrengthSetWeights
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoreStrengthSetWeights and only return the `id`
     * const coreStrengthSetWeightWithIdOnly = await prisma.coreStrengthSetWeight.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoreStrengthSetWeightUpdateManyAndReturnArgs>(args: SelectSubset<T, CoreStrengthSetWeightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoreStrengthSetWeight.
     * @param {CoreStrengthSetWeightUpsertArgs} args - Arguments to update or create a CoreStrengthSetWeight.
     * @example
     * // Update or create a CoreStrengthSetWeight
     * const coreStrengthSetWeight = await prisma.coreStrengthSetWeight.upsert({
     *   create: {
     *     // ... data to create a CoreStrengthSetWeight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoreStrengthSetWeight we want to update
     *   }
     * })
     */
    upsert<T extends CoreStrengthSetWeightUpsertArgs>(args: SelectSubset<T, CoreStrengthSetWeightUpsertArgs<ExtArgs>>): Prisma__CoreStrengthSetWeightClient<$Result.GetResult<Prisma.$CoreStrengthSetWeightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoreStrengthSetWeights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightCountArgs} args - Arguments to filter CoreStrengthSetWeights to count.
     * @example
     * // Count the number of CoreStrengthSetWeights
     * const count = await prisma.coreStrengthSetWeight.count({
     *   where: {
     *     // ... the filter for the CoreStrengthSetWeights we want to count
     *   }
     * })
    **/
    count<T extends CoreStrengthSetWeightCountArgs>(
      args?: Subset<T, CoreStrengthSetWeightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoreStrengthSetWeightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoreStrengthSetWeight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoreStrengthSetWeightAggregateArgs>(args: Subset<T, CoreStrengthSetWeightAggregateArgs>): Prisma.PrismaPromise<GetCoreStrengthSetWeightAggregateType<T>>

    /**
     * Group by CoreStrengthSetWeight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoreStrengthSetWeightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoreStrengthSetWeightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoreStrengthSetWeightGroupByArgs['orderBy'] }
        : { orderBy?: CoreStrengthSetWeightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoreStrengthSetWeightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoreStrengthSetWeightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoreStrengthSetWeight model
   */
  readonly fields: CoreStrengthSetWeightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoreStrengthSetWeight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoreStrengthSetWeightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreStrengthSet<T extends CoreStrengthSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoreStrengthSetDefaultArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoreStrengthSetWeight model
   */
  interface CoreStrengthSetWeightFieldRefs {
    readonly id: FieldRef<"CoreStrengthSetWeight", 'String'>
    readonly coreStrengthSetId: FieldRef<"CoreStrengthSetWeight", 'String'>
    readonly isBodyWeight: FieldRef<"CoreStrengthSetWeight", 'Boolean'>
    readonly weight: FieldRef<"CoreStrengthSetWeight", 'Float'>
    readonly createdAt: FieldRef<"CoreStrengthSetWeight", 'DateTime'>
    readonly updatedAt: FieldRef<"CoreStrengthSetWeight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoreStrengthSetWeight findUnique
   */
  export type CoreStrengthSetWeightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetWeight to fetch.
     */
    where: CoreStrengthSetWeightWhereUniqueInput
  }

  /**
   * CoreStrengthSetWeight findUniqueOrThrow
   */
  export type CoreStrengthSetWeightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetWeight to fetch.
     */
    where: CoreStrengthSetWeightWhereUniqueInput
  }

  /**
   * CoreStrengthSetWeight findFirst
   */
  export type CoreStrengthSetWeightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetWeight to fetch.
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetWeights to fetch.
     */
    orderBy?: CoreStrengthSetWeightOrderByWithRelationInput | CoreStrengthSetWeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSetWeights.
     */
    cursor?: CoreStrengthSetWeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetWeights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetWeights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSetWeights.
     */
    distinct?: CoreStrengthSetWeightScalarFieldEnum | CoreStrengthSetWeightScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetWeight findFirstOrThrow
   */
  export type CoreStrengthSetWeightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetWeight to fetch.
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetWeights to fetch.
     */
    orderBy?: CoreStrengthSetWeightOrderByWithRelationInput | CoreStrengthSetWeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoreStrengthSetWeights.
     */
    cursor?: CoreStrengthSetWeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetWeights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetWeights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoreStrengthSetWeights.
     */
    distinct?: CoreStrengthSetWeightScalarFieldEnum | CoreStrengthSetWeightScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetWeight findMany
   */
  export type CoreStrengthSetWeightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter, which CoreStrengthSetWeights to fetch.
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoreStrengthSetWeights to fetch.
     */
    orderBy?: CoreStrengthSetWeightOrderByWithRelationInput | CoreStrengthSetWeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoreStrengthSetWeights.
     */
    cursor?: CoreStrengthSetWeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoreStrengthSetWeights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoreStrengthSetWeights.
     */
    skip?: number
    distinct?: CoreStrengthSetWeightScalarFieldEnum | CoreStrengthSetWeightScalarFieldEnum[]
  }

  /**
   * CoreStrengthSetWeight create
   */
  export type CoreStrengthSetWeightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * The data needed to create a CoreStrengthSetWeight.
     */
    data: XOR<CoreStrengthSetWeightCreateInput, CoreStrengthSetWeightUncheckedCreateInput>
  }

  /**
   * CoreStrengthSetWeight createMany
   */
  export type CoreStrengthSetWeightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoreStrengthSetWeights.
     */
    data: CoreStrengthSetWeightCreateManyInput | CoreStrengthSetWeightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoreStrengthSetWeight createManyAndReturn
   */
  export type CoreStrengthSetWeightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * The data used to create many CoreStrengthSetWeights.
     */
    data: CoreStrengthSetWeightCreateManyInput | CoreStrengthSetWeightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreStrengthSetWeight update
   */
  export type CoreStrengthSetWeightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * The data needed to update a CoreStrengthSetWeight.
     */
    data: XOR<CoreStrengthSetWeightUpdateInput, CoreStrengthSetWeightUncheckedUpdateInput>
    /**
     * Choose, which CoreStrengthSetWeight to update.
     */
    where: CoreStrengthSetWeightWhereUniqueInput
  }

  /**
   * CoreStrengthSetWeight updateMany
   */
  export type CoreStrengthSetWeightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoreStrengthSetWeights.
     */
    data: XOR<CoreStrengthSetWeightUpdateManyMutationInput, CoreStrengthSetWeightUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSetWeights to update
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * Limit how many CoreStrengthSetWeights to update.
     */
    limit?: number
  }

  /**
   * CoreStrengthSetWeight updateManyAndReturn
   */
  export type CoreStrengthSetWeightUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * The data used to update CoreStrengthSetWeights.
     */
    data: XOR<CoreStrengthSetWeightUpdateManyMutationInput, CoreStrengthSetWeightUncheckedUpdateManyInput>
    /**
     * Filter which CoreStrengthSetWeights to update
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * Limit how many CoreStrengthSetWeights to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoreStrengthSetWeight upsert
   */
  export type CoreStrengthSetWeightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * The filter to search for the CoreStrengthSetWeight to update in case it exists.
     */
    where: CoreStrengthSetWeightWhereUniqueInput
    /**
     * In case the CoreStrengthSetWeight found by the `where` argument doesn't exist, create a new CoreStrengthSetWeight with this data.
     */
    create: XOR<CoreStrengthSetWeightCreateInput, CoreStrengthSetWeightUncheckedCreateInput>
    /**
     * In case the CoreStrengthSetWeight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoreStrengthSetWeightUpdateInput, CoreStrengthSetWeightUncheckedUpdateInput>
  }

  /**
   * CoreStrengthSetWeight delete
   */
  export type CoreStrengthSetWeightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
    /**
     * Filter which CoreStrengthSetWeight to delete.
     */
    where: CoreStrengthSetWeightWhereUniqueInput
  }

  /**
   * CoreStrengthSetWeight deleteMany
   */
  export type CoreStrengthSetWeightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoreStrengthSetWeights to delete
     */
    where?: CoreStrengthSetWeightWhereInput
    /**
     * Limit how many CoreStrengthSetWeights to delete.
     */
    limit?: number
  }

  /**
   * CoreStrengthSetWeight without action
   */
  export type CoreStrengthSetWeightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSetWeight
     */
    select?: CoreStrengthSetWeightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSetWeight
     */
    omit?: CoreStrengthSetWeightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetWeightInclude<ExtArgs> | null
  }


  /**
   * Model UserStrengthSet
   */

  export type AggregateUserStrengthSet = {
    _count: UserStrengthSetCountAggregateOutputType | null
    _avg: UserStrengthSetAvgAggregateOutputType | null
    _sum: UserStrengthSetSumAggregateOutputType | null
    _min: UserStrengthSetMinAggregateOutputType | null
    _max: UserStrengthSetMaxAggregateOutputType | null
  }

  export type UserStrengthSetAvgAggregateOutputType = {
    reps: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type UserStrengthSetSumAggregateOutputType = {
    reps: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type UserStrengthSetMinAggregateOutputType = {
    id: string | null
    reps: number | null
    weight: number | null
    isBodyWeight: boolean | null
    restTime: number | null
    order: number | null
    isCompleted: boolean | null
    isWarmup: boolean | null
    isMuscleFailure: boolean | null
    isJointPain: boolean | null
    skippedReason: string | null
    userWorkoutExerciseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStrengthSetMaxAggregateOutputType = {
    id: string | null
    reps: number | null
    weight: number | null
    isBodyWeight: boolean | null
    restTime: number | null
    order: number | null
    isCompleted: boolean | null
    isWarmup: boolean | null
    isMuscleFailure: boolean | null
    isJointPain: boolean | null
    skippedReason: string | null
    userWorkoutExerciseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStrengthSetCountAggregateOutputType = {
    id: number
    reps: number
    weight: number
    isBodyWeight: number
    restTime: number
    order: number
    isCompleted: number
    isWarmup: number
    isMuscleFailure: number
    isJointPain: number
    skippedReason: number
    userWorkoutExerciseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStrengthSetAvgAggregateInputType = {
    reps?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type UserStrengthSetSumAggregateInputType = {
    reps?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type UserStrengthSetMinAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStrengthSetMaxAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStrengthSetCountAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStrengthSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStrengthSet to aggregate.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStrengthSets
    **/
    _count?: true | UserStrengthSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStrengthSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStrengthSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStrengthSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStrengthSetMaxAggregateInputType
  }

  export type GetUserStrengthSetAggregateType<T extends UserStrengthSetAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStrengthSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStrengthSet[P]>
      : GetScalarType<T[P], AggregateUserStrengthSet[P]>
  }




  export type UserStrengthSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStrengthSetWhereInput
    orderBy?: UserStrengthSetOrderByWithAggregationInput | UserStrengthSetOrderByWithAggregationInput[]
    by: UserStrengthSetScalarFieldEnum[] | UserStrengthSetScalarFieldEnum
    having?: UserStrengthSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStrengthSetCountAggregateInputType | true
    _avg?: UserStrengthSetAvgAggregateInputType
    _sum?: UserStrengthSetSumAggregateInputType
    _min?: UserStrengthSetMinAggregateInputType
    _max?: UserStrengthSetMaxAggregateInputType
  }

  export type UserStrengthSetGroupByOutputType = {
    id: string
    reps: number
    weight: number | null
    isBodyWeight: boolean
    restTime: number
    order: number
    isCompleted: boolean
    isWarmup: boolean
    isMuscleFailure: boolean
    isJointPain: boolean
    skippedReason: string | null
    userWorkoutExerciseId: string
    createdAt: Date
    updatedAt: Date
    _count: UserStrengthSetCountAggregateOutputType | null
    _avg: UserStrengthSetAvgAggregateOutputType | null
    _sum: UserStrengthSetSumAggregateOutputType | null
    _min: UserStrengthSetMinAggregateOutputType | null
    _max: UserStrengthSetMaxAggregateOutputType | null
  }

  type GetUserStrengthSetGroupByPayload<T extends UserStrengthSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStrengthSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStrengthSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStrengthSetGroupByOutputType[P]>
            : GetScalarType<T[P], UserStrengthSetGroupByOutputType[P]>
        }
      >
    >


  export type UserStrengthSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectScalar = {
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserStrengthSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reps" | "weight" | "isBodyWeight" | "restTime" | "order" | "isCompleted" | "isWarmup" | "isMuscleFailure" | "isJointPain" | "skippedReason" | "userWorkoutExerciseId" | "createdAt" | "updatedAt", ExtArgs["result"]["userStrengthSet"]>
  export type UserStrengthSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserStrengthSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserStrengthSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }

  export type $UserStrengthSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStrengthSet"
    objects: {
      userWorkoutExercise: Prisma.$UserWorkoutExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reps: number
      weight: number | null
      isBodyWeight: boolean
      restTime: number
      order: number
      isCompleted: boolean
      isWarmup: boolean
      isMuscleFailure: boolean
      isJointPain: boolean
      skippedReason: string | null
      userWorkoutExerciseId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userStrengthSet"]>
    composites: {}
  }

  type UserStrengthSetGetPayload<S extends boolean | null | undefined | UserStrengthSetDefaultArgs> = $Result.GetResult<Prisma.$UserStrengthSetPayload, S>

  type UserStrengthSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStrengthSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStrengthSetCountAggregateInputType | true
    }

  export interface UserStrengthSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStrengthSet'], meta: { name: 'UserStrengthSet' } }
    /**
     * Find zero or one UserStrengthSet that matches the filter.
     * @param {UserStrengthSetFindUniqueArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStrengthSetFindUniqueArgs>(args: SelectSubset<T, UserStrengthSetFindUniqueArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStrengthSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStrengthSetFindUniqueOrThrowArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStrengthSetFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStrengthSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStrengthSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindFirstArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStrengthSetFindFirstArgs>(args?: SelectSubset<T, UserStrengthSetFindFirstArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStrengthSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindFirstOrThrowArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStrengthSetFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStrengthSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStrengthSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStrengthSets
     * const userStrengthSets = await prisma.userStrengthSet.findMany()
     * 
     * // Get first 10 UserStrengthSets
     * const userStrengthSets = await prisma.userStrengthSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStrengthSetFindManyArgs>(args?: SelectSubset<T, UserStrengthSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStrengthSet.
     * @param {UserStrengthSetCreateArgs} args - Arguments to create a UserStrengthSet.
     * @example
     * // Create one UserStrengthSet
     * const UserStrengthSet = await prisma.userStrengthSet.create({
     *   data: {
     *     // ... data to create a UserStrengthSet
     *   }
     * })
     * 
     */
    create<T extends UserStrengthSetCreateArgs>(args: SelectSubset<T, UserStrengthSetCreateArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStrengthSets.
     * @param {UserStrengthSetCreateManyArgs} args - Arguments to create many UserStrengthSets.
     * @example
     * // Create many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStrengthSetCreateManyArgs>(args?: SelectSubset<T, UserStrengthSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStrengthSets and returns the data saved in the database.
     * @param {UserStrengthSetCreateManyAndReturnArgs} args - Arguments to create many UserStrengthSets.
     * @example
     * // Create many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStrengthSets and only return the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStrengthSetCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStrengthSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStrengthSet.
     * @param {UserStrengthSetDeleteArgs} args - Arguments to delete one UserStrengthSet.
     * @example
     * // Delete one UserStrengthSet
     * const UserStrengthSet = await prisma.userStrengthSet.delete({
     *   where: {
     *     // ... filter to delete one UserStrengthSet
     *   }
     * })
     * 
     */
    delete<T extends UserStrengthSetDeleteArgs>(args: SelectSubset<T, UserStrengthSetDeleteArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStrengthSet.
     * @param {UserStrengthSetUpdateArgs} args - Arguments to update one UserStrengthSet.
     * @example
     * // Update one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStrengthSetUpdateArgs>(args: SelectSubset<T, UserStrengthSetUpdateArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStrengthSets.
     * @param {UserStrengthSetDeleteManyArgs} args - Arguments to filter UserStrengthSets to delete.
     * @example
     * // Delete a few UserStrengthSets
     * const { count } = await prisma.userStrengthSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStrengthSetDeleteManyArgs>(args?: SelectSubset<T, UserStrengthSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStrengthSetUpdateManyArgs>(args: SelectSubset<T, UserStrengthSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStrengthSets and returns the data updated in the database.
     * @param {UserStrengthSetUpdateManyAndReturnArgs} args - Arguments to update many UserStrengthSets.
     * @example
     * // Update many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStrengthSets and only return the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStrengthSetUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStrengthSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStrengthSet.
     * @param {UserStrengthSetUpsertArgs} args - Arguments to update or create a UserStrengthSet.
     * @example
     * // Update or create a UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.upsert({
     *   create: {
     *     // ... data to create a UserStrengthSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStrengthSet we want to update
     *   }
     * })
     */
    upsert<T extends UserStrengthSetUpsertArgs>(args: SelectSubset<T, UserStrengthSetUpsertArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetCountArgs} args - Arguments to filter UserStrengthSets to count.
     * @example
     * // Count the number of UserStrengthSets
     * const count = await prisma.userStrengthSet.count({
     *   where: {
     *     // ... the filter for the UserStrengthSets we want to count
     *   }
     * })
    **/
    count<T extends UserStrengthSetCountArgs>(
      args?: Subset<T, UserStrengthSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStrengthSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStrengthSetAggregateArgs>(args: Subset<T, UserStrengthSetAggregateArgs>): Prisma.PrismaPromise<GetUserStrengthSetAggregateType<T>>

    /**
     * Group by UserStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStrengthSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStrengthSetGroupByArgs['orderBy'] }
        : { orderBy?: UserStrengthSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStrengthSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStrengthSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStrengthSet model
   */
  readonly fields: UserStrengthSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStrengthSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStrengthSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userWorkoutExercise<T extends UserWorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStrengthSet model
   */
  interface UserStrengthSetFieldRefs {
    readonly id: FieldRef<"UserStrengthSet", 'String'>
    readonly reps: FieldRef<"UserStrengthSet", 'Int'>
    readonly weight: FieldRef<"UserStrengthSet", 'Float'>
    readonly isBodyWeight: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly restTime: FieldRef<"UserStrengthSet", 'Int'>
    readonly order: FieldRef<"UserStrengthSet", 'Int'>
    readonly isCompleted: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isWarmup: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isMuscleFailure: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isJointPain: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly skippedReason: FieldRef<"UserStrengthSet", 'String'>
    readonly userWorkoutExerciseId: FieldRef<"UserStrengthSet", 'String'>
    readonly createdAt: FieldRef<"UserStrengthSet", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStrengthSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStrengthSet findUnique
   */
  export type UserStrengthSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where: UserStrengthSetWhereUniqueInput
  }

  /**
   * UserStrengthSet findUniqueOrThrow
   */
  export type UserStrengthSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where: UserStrengthSetWhereUniqueInput
  }

  /**
   * UserStrengthSet findFirst
   */
  export type UserStrengthSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStrengthSets.
     */
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
  }

  /**
   * UserStrengthSet findFirstOrThrow
   */
  export type UserStrengthSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStrengthSets.
     */
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
  }

  /**
   * UserStrengthSet findMany
   */
  export type UserStrengthSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSets to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
  }

  /**
   * UserStrengthSet create
   */
  export type UserStrengthSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStrengthSet.
     */
    data: XOR<UserStrengthSetCreateInput, UserStrengthSetUncheckedCreateInput>
  }

  /**
   * UserStrengthSet createMany
   */
  export type UserStrengthSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStrengthSets.
     */
    data: UserStrengthSetCreateManyInput | UserStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStrengthSet createManyAndReturn
   */
  export type UserStrengthSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to create many UserStrengthSets.
     */
    data: UserStrengthSetCreateManyInput | UserStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStrengthSet update
   */
  export type UserStrengthSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStrengthSet.
     */
    data: XOR<UserStrengthSetUpdateInput, UserStrengthSetUncheckedUpdateInput>
    /**
     * Choose, which UserStrengthSet to update.
     */
    where: UserStrengthSetWhereUniqueInput
  }

  /**
   * UserStrengthSet updateMany
   */
  export type UserStrengthSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStrengthSets.
     */
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which UserStrengthSets to update
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to update.
     */
    limit?: number
  }

  /**
   * UserStrengthSet updateManyAndReturn
   */
  export type UserStrengthSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to update UserStrengthSets.
     */
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which UserStrengthSets to update
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStrengthSet upsert
   */
  export type UserStrengthSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStrengthSet to update in case it exists.
     */
    where: UserStrengthSetWhereUniqueInput
    /**
     * In case the UserStrengthSet found by the `where` argument doesn't exist, create a new UserStrengthSet with this data.
     */
    create: XOR<UserStrengthSetCreateInput, UserStrengthSetUncheckedCreateInput>
    /**
     * In case the UserStrengthSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStrengthSetUpdateInput, UserStrengthSetUncheckedUpdateInput>
  }

  /**
   * UserStrengthSet delete
   */
  export type UserStrengthSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter which UserStrengthSet to delete.
     */
    where: UserStrengthSetWhereUniqueInput
  }

  /**
   * UserStrengthSet deleteMany
   */
  export type UserStrengthSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStrengthSets to delete
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to delete.
     */
    limit?: number
  }

  /**
   * UserStrengthSet without action
   */
  export type UserStrengthSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
  }


  /**
   * Model Program
   */

  export type AggregateProgram = {
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  export type ProgramMinAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramMaxAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramCountAggregateOutputType = {
    id: number
    name: number
    notes: number
    startDate: number
    endDate: number
    isActive: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgramMinAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramMaxAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramCountAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Program to aggregate.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Programs
    **/
    _count?: true | ProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramMaxAggregateInputType
  }

  export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgram[P]>
      : GetScalarType<T[P], AggregateProgram[P]>
  }




  export type ProgramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithAggregationInput | ProgramOrderByWithAggregationInput[]
    by: ProgramScalarFieldEnum[] | ProgramScalarFieldEnum
    having?: ProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramCountAggregateInputType | true
    _min?: ProgramMinAggregateInputType
    _max?: ProgramMaxAggregateInputType
  }

  export type ProgramGroupByOutputType = {
    id: string
    name: string
    notes: string | null
    startDate: Date
    endDate: Date
    isActive: boolean
    ownerId: string
    createdAt: Date
    updatedAt: Date
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  type GetProgramGroupByPayload<T extends ProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramGroupByOutputType[P]>
        }
      >
    >


  export type ProgramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    programWorkouts?: boolean | Program$programWorkoutsArgs<ExtArgs>
    userWorkout?: boolean | Program$userWorkoutArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectScalar = {
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProgramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "notes" | "startDate" | "endDate" | "isActive" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["program"]>
  export type ProgramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programWorkouts?: boolean | Program$programWorkoutsArgs<ExtArgs>
    userWorkout?: boolean | Program$userWorkoutArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProgramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Program"
    objects: {
      programWorkouts: Prisma.$ProgramWorkoutPayload<ExtArgs>[]
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      notes: string | null
      startDate: Date
      endDate: Date
      isActive: boolean
      ownerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["program"]>
    composites: {}
  }

  type ProgramGetPayload<S extends boolean | null | undefined | ProgramDefaultArgs> = $Result.GetResult<Prisma.$ProgramPayload, S>

  type ProgramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProgramCountAggregateInputType | true
    }

  export interface ProgramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Program'], meta: { name: 'Program' } }
    /**
     * Find zero or one Program that matches the filter.
     * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramFindUniqueArgs>(args: SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Program that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramFindFirstArgs>(args?: SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Programs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Programs
     * const programs = await prisma.program.findMany()
     * 
     * // Get first 10 Programs
     * const programs = await prisma.program.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramFindManyArgs>(args?: SelectSubset<T, ProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Program.
     * @param {ProgramCreateArgs} args - Arguments to create a Program.
     * @example
     * // Create one Program
     * const Program = await prisma.program.create({
     *   data: {
     *     // ... data to create a Program
     *   }
     * })
     * 
     */
    create<T extends ProgramCreateArgs>(args: SelectSubset<T, ProgramCreateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Programs.
     * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramCreateManyArgs>(args?: SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Programs and returns the data saved in the database.
     * @param {ProgramCreateManyAndReturnArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Program.
     * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
     * @example
     * // Delete one Program
     * const Program = await prisma.program.delete({
     *   where: {
     *     // ... filter to delete one Program
     *   }
     * })
     * 
     */
    delete<T extends ProgramDeleteArgs>(args: SelectSubset<T, ProgramDeleteArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Program.
     * @param {ProgramUpdateArgs} args - Arguments to update one Program.
     * @example
     * // Update one Program
     * const program = await prisma.program.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramUpdateArgs>(args: SelectSubset<T, ProgramUpdateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Programs.
     * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
     * @example
     * // Delete a few Programs
     * const { count } = await prisma.program.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramDeleteManyArgs>(args?: SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramUpdateManyArgs>(args: SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs and returns the data updated in the database.
     * @param {ProgramUpdateManyAndReturnArgs} args - Arguments to update many Programs.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Program.
     * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
     * @example
     * // Update or create a Program
     * const program = await prisma.program.upsert({
     *   create: {
     *     // ... data to create a Program
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Program we want to update
     *   }
     * })
     */
    upsert<T extends ProgramUpsertArgs>(args: SelectSubset<T, ProgramUpsertArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
     * @example
     * // Count the number of Programs
     * const count = await prisma.program.count({
     *   where: {
     *     // ... the filter for the Programs we want to count
     *   }
     * })
    **/
    count<T extends ProgramCountArgs>(
      args?: Subset<T, ProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramAggregateArgs>(args: Subset<T, ProgramAggregateArgs>): Prisma.PrismaPromise<GetProgramAggregateType<T>>

    /**
     * Group by Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramGroupByArgs['orderBy'] }
        : { orderBy?: ProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Program model
   */
  readonly fields: ProgramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Program.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programWorkouts<T extends Program$programWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Program$programWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkout<T extends Program$userWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, Program$userWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Program model
   */
  interface ProgramFieldRefs {
    readonly id: FieldRef<"Program", 'String'>
    readonly name: FieldRef<"Program", 'String'>
    readonly notes: FieldRef<"Program", 'String'>
    readonly startDate: FieldRef<"Program", 'DateTime'>
    readonly endDate: FieldRef<"Program", 'DateTime'>
    readonly isActive: FieldRef<"Program", 'Boolean'>
    readonly ownerId: FieldRef<"Program", 'String'>
    readonly createdAt: FieldRef<"Program", 'DateTime'>
    readonly updatedAt: FieldRef<"Program", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Program findUnique
   */
  export type ProgramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findUniqueOrThrow
   */
  export type ProgramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findFirst
   */
  export type ProgramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findFirstOrThrow
   */
  export type ProgramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findMany
   */
  export type ProgramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Programs to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program create
   */
  export type ProgramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to create a Program.
     */
    data: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
  }

  /**
   * Program createMany
   */
  export type ProgramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Program createManyAndReturn
   */
  export type ProgramCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program update
   */
  export type ProgramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to update a Program.
     */
    data: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
    /**
     * Choose, which Program to update.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program updateMany
   */
  export type ProgramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
  }

  /**
   * Program updateManyAndReturn
   */
  export type ProgramUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program upsert
   */
  export type ProgramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The filter to search for the Program to update in case it exists.
     */
    where: ProgramWhereUniqueInput
    /**
     * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
     */
    create: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
    /**
     * In case the Program was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
  }

  /**
   * Program delete
   */
  export type ProgramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter which Program to delete.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program deleteMany
   */
  export type ProgramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Programs to delete
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to delete.
     */
    limit?: number
  }

  /**
   * Program.programWorkouts
   */
  export type Program$programWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    cursor?: ProgramWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * Program.userWorkout
   */
  export type Program$userWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * Program without action
   */
  export type ProgramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
  }


  /**
   * Model ProgramWorkout
   */

  export type AggregateProgramWorkout = {
    _count: ProgramWorkoutCountAggregateOutputType | null
    _min: ProgramWorkoutMinAggregateOutputType | null
    _max: ProgramWorkoutMaxAggregateOutputType | null
  }

  export type ProgramWorkoutMinAggregateOutputType = {
    id: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramWorkoutMaxAggregateOutputType = {
    id: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramWorkoutCountAggregateOutputType = {
    id: number
    programId: number
    workoutId: number
    daysOfWeek: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgramWorkoutMinAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramWorkoutMaxAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramWorkoutCountAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    daysOfWeek?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgramWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramWorkout to aggregate.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProgramWorkouts
    **/
    _count?: true | ProgramWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramWorkoutMaxAggregateInputType
  }

  export type GetProgramWorkoutAggregateType<T extends ProgramWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateProgramWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgramWorkout[P]>
      : GetScalarType<T[P], AggregateProgramWorkout[P]>
  }




  export type ProgramWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithAggregationInput | ProgramWorkoutOrderByWithAggregationInput[]
    by: ProgramWorkoutScalarFieldEnum[] | ProgramWorkoutScalarFieldEnum
    having?: ProgramWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramWorkoutCountAggregateInputType | true
    _min?: ProgramWorkoutMinAggregateInputType
    _max?: ProgramWorkoutMaxAggregateInputType
  }

  export type ProgramWorkoutGroupByOutputType = {
    id: string
    programId: string
    workoutId: string
    daysOfWeek: $Enums.DaysOfWeek[]
    createdAt: Date
    updatedAt: Date
    _count: ProgramWorkoutCountAggregateOutputType | null
    _min: ProgramWorkoutMinAggregateOutputType | null
    _max: ProgramWorkoutMaxAggregateOutputType | null
  }

  type GetProgramWorkoutGroupByPayload<T extends ProgramWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type ProgramWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectScalar = {
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProgramWorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "programId" | "workoutId" | "daysOfWeek" | "createdAt" | "updatedAt", ExtArgs["result"]["programWorkout"]>
  export type ProgramWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type ProgramWorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type ProgramWorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $ProgramWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProgramWorkout"
    objects: {
      program: Prisma.$ProgramPayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      programId: string
      workoutId: string
      daysOfWeek: $Enums.DaysOfWeek[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["programWorkout"]>
    composites: {}
  }

  type ProgramWorkoutGetPayload<S extends boolean | null | undefined | ProgramWorkoutDefaultArgs> = $Result.GetResult<Prisma.$ProgramWorkoutPayload, S>

  type ProgramWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramWorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProgramWorkoutCountAggregateInputType | true
    }

  export interface ProgramWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProgramWorkout'], meta: { name: 'ProgramWorkout' } }
    /**
     * Find zero or one ProgramWorkout that matches the filter.
     * @param {ProgramWorkoutFindUniqueArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramWorkoutFindUniqueArgs>(args: SelectSubset<T, ProgramWorkoutFindUniqueArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProgramWorkout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramWorkoutFindUniqueOrThrowArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramWorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindFirstArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramWorkoutFindFirstArgs>(args?: SelectSubset<T, ProgramWorkoutFindFirstArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindFirstOrThrowArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramWorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramWorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProgramWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProgramWorkouts
     * const programWorkouts = await prisma.programWorkout.findMany()
     * 
     * // Get first 10 ProgramWorkouts
     * const programWorkouts = await prisma.programWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramWorkoutFindManyArgs>(args?: SelectSubset<T, ProgramWorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProgramWorkout.
     * @param {ProgramWorkoutCreateArgs} args - Arguments to create a ProgramWorkout.
     * @example
     * // Create one ProgramWorkout
     * const ProgramWorkout = await prisma.programWorkout.create({
     *   data: {
     *     // ... data to create a ProgramWorkout
     *   }
     * })
     * 
     */
    create<T extends ProgramWorkoutCreateArgs>(args: SelectSubset<T, ProgramWorkoutCreateArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProgramWorkouts.
     * @param {ProgramWorkoutCreateManyArgs} args - Arguments to create many ProgramWorkouts.
     * @example
     * // Create many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramWorkoutCreateManyArgs>(args?: SelectSubset<T, ProgramWorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProgramWorkouts and returns the data saved in the database.
     * @param {ProgramWorkoutCreateManyAndReturnArgs} args - Arguments to create many ProgramWorkouts.
     * @example
     * // Create many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProgramWorkouts and only return the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramWorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramWorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProgramWorkout.
     * @param {ProgramWorkoutDeleteArgs} args - Arguments to delete one ProgramWorkout.
     * @example
     * // Delete one ProgramWorkout
     * const ProgramWorkout = await prisma.programWorkout.delete({
     *   where: {
     *     // ... filter to delete one ProgramWorkout
     *   }
     * })
     * 
     */
    delete<T extends ProgramWorkoutDeleteArgs>(args: SelectSubset<T, ProgramWorkoutDeleteArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProgramWorkout.
     * @param {ProgramWorkoutUpdateArgs} args - Arguments to update one ProgramWorkout.
     * @example
     * // Update one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramWorkoutUpdateArgs>(args: SelectSubset<T, ProgramWorkoutUpdateArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProgramWorkouts.
     * @param {ProgramWorkoutDeleteManyArgs} args - Arguments to filter ProgramWorkouts to delete.
     * @example
     * // Delete a few ProgramWorkouts
     * const { count } = await prisma.programWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramWorkoutDeleteManyArgs>(args?: SelectSubset<T, ProgramWorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramWorkoutUpdateManyArgs>(args: SelectSubset<T, ProgramWorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramWorkouts and returns the data updated in the database.
     * @param {ProgramWorkoutUpdateManyAndReturnArgs} args - Arguments to update many ProgramWorkouts.
     * @example
     * // Update many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProgramWorkouts and only return the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramWorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProgramWorkout.
     * @param {ProgramWorkoutUpsertArgs} args - Arguments to update or create a ProgramWorkout.
     * @example
     * // Update or create a ProgramWorkout
     * const programWorkout = await prisma.programWorkout.upsert({
     *   create: {
     *     // ... data to create a ProgramWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProgramWorkout we want to update
     *   }
     * })
     */
    upsert<T extends ProgramWorkoutUpsertArgs>(args: SelectSubset<T, ProgramWorkoutUpsertArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProgramWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutCountArgs} args - Arguments to filter ProgramWorkouts to count.
     * @example
     * // Count the number of ProgramWorkouts
     * const count = await prisma.programWorkout.count({
     *   where: {
     *     // ... the filter for the ProgramWorkouts we want to count
     *   }
     * })
    **/
    count<T extends ProgramWorkoutCountArgs>(
      args?: Subset<T, ProgramWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProgramWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramWorkoutAggregateArgs>(args: Subset<T, ProgramWorkoutAggregateArgs>): Prisma.PrismaPromise<GetProgramWorkoutAggregateType<T>>

    /**
     * Group by ProgramWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: ProgramWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProgramWorkout model
   */
  readonly fields: ProgramWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProgramWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProgramWorkout model
   */
  interface ProgramWorkoutFieldRefs {
    readonly id: FieldRef<"ProgramWorkout", 'String'>
    readonly programId: FieldRef<"ProgramWorkout", 'String'>
    readonly workoutId: FieldRef<"ProgramWorkout", 'String'>
    readonly daysOfWeek: FieldRef<"ProgramWorkout", 'DaysOfWeek[]'>
    readonly createdAt: FieldRef<"ProgramWorkout", 'DateTime'>
    readonly updatedAt: FieldRef<"ProgramWorkout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProgramWorkout findUnique
   */
  export type ProgramWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where: ProgramWorkoutWhereUniqueInput
  }

  /**
   * ProgramWorkout findUniqueOrThrow
   */
  export type ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where: ProgramWorkoutWhereUniqueInput
  }

  /**
   * ProgramWorkout findFirst
   */
  export type ProgramWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramWorkouts.
     */
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * ProgramWorkout findFirstOrThrow
   */
  export type ProgramWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramWorkouts.
     */
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * ProgramWorkout findMany
   */
  export type ProgramWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkouts to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * ProgramWorkout create
   */
  export type ProgramWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a ProgramWorkout.
     */
    data: XOR<ProgramWorkoutCreateInput, ProgramWorkoutUncheckedCreateInput>
  }

  /**
   * ProgramWorkout createMany
   */
  export type ProgramWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProgramWorkouts.
     */
    data: ProgramWorkoutCreateManyInput | ProgramWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProgramWorkout createManyAndReturn
   */
  export type ProgramWorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many ProgramWorkouts.
     */
    data: ProgramWorkoutCreateManyInput | ProgramWorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramWorkout update
   */
  export type ProgramWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a ProgramWorkout.
     */
    data: XOR<ProgramWorkoutUpdateInput, ProgramWorkoutUncheckedUpdateInput>
    /**
     * Choose, which ProgramWorkout to update.
     */
    where: ProgramWorkoutWhereUniqueInput
  }

  /**
   * ProgramWorkout updateMany
   */
  export type ProgramWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProgramWorkouts.
     */
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which ProgramWorkouts to update
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to update.
     */
    limit?: number
  }

  /**
   * ProgramWorkout updateManyAndReturn
   */
  export type ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * The data used to update ProgramWorkouts.
     */
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which ProgramWorkouts to update
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramWorkout upsert
   */
  export type ProgramWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the ProgramWorkout to update in case it exists.
     */
    where: ProgramWorkoutWhereUniqueInput
    /**
     * In case the ProgramWorkout found by the `where` argument doesn't exist, create a new ProgramWorkout with this data.
     */
    create: XOR<ProgramWorkoutCreateInput, ProgramWorkoutUncheckedCreateInput>
    /**
     * In case the ProgramWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramWorkoutUpdateInput, ProgramWorkoutUncheckedUpdateInput>
  }

  /**
   * ProgramWorkout delete
   */
  export type ProgramWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter which ProgramWorkout to delete.
     */
    where: ProgramWorkoutWhereUniqueInput
  }

  /**
   * ProgramWorkout deleteMany
   */
  export type ProgramWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramWorkouts to delete
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to delete.
     */
    limit?: number
  }

  /**
   * ProgramWorkout without action
   */
  export type ProgramWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
  }


  /**
   * Model Workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    name: number
    notes: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkoutMinAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workout to aggregate.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type WorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithAggregationInput | WorkoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: WorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: string
    name: string | null
    notes: string | null
    ownerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends WorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
    workoutExercises?: boolean | Workout$workoutExercisesArgs<ExtArgs>
    programWorkouts?: boolean | Workout$programWorkoutsArgs<ExtArgs>
    userWorkouts?: boolean | Workout$userWorkoutsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectScalar = {
    id?: boolean
    name?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "notes" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["workout"]>
  export type WorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
    workoutExercises?: boolean | Workout$workoutExercisesArgs<ExtArgs>
    programWorkouts?: boolean | Workout$programWorkoutsArgs<ExtArgs>
    userWorkouts?: boolean | Workout$userWorkoutsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }
  export type WorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }

  export type $WorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workout"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs> | null
      workoutExercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      programWorkouts: Prisma.$ProgramWorkoutPayload<ExtArgs>[]
      userWorkouts: Prisma.$UserWorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      notes: string | null
      ownerId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }

  type WorkoutGetPayload<S extends boolean | null | undefined | WorkoutDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPayload, S>

  type WorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface WorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workout'], meta: { name: 'Workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {WorkoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutFindUniqueArgs>(args: SelectSubset<T, WorkoutFindUniqueArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutFindFirstArgs>(args?: SelectSubset<T, WorkoutFindFirstArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutFindManyArgs>(args?: SelectSubset<T, WorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workout.
     * @param {WorkoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
     */
    create<T extends WorkoutCreateArgs>(args: SelectSubset<T, WorkoutCreateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workouts.
     * @param {WorkoutCreateManyArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutCreateManyArgs>(args?: SelectSubset<T, WorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workouts and returns the data saved in the database.
     * @param {WorkoutCreateManyAndReturnArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workout.
     * @param {WorkoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
     */
    delete<T extends WorkoutDeleteArgs>(args: SelectSubset<T, WorkoutDeleteArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workout.
     * @param {WorkoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutUpdateArgs>(args: SelectSubset<T, WorkoutUpdateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutDeleteManyArgs>(args?: SelectSubset<T, WorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutUpdateManyArgs>(args: SelectSubset<T, WorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts and returns the data updated in the database.
     * @param {WorkoutUpdateManyAndReturnArgs} args - Arguments to update many Workouts.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workout.
     * @param {WorkoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutUpsertArgs>(args: SelectSubset<T, WorkoutUpsertArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutCountArgs>(
      args?: Subset<T, WorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workout model
   */
  readonly fields: WorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends Workout$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Workout$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workoutExercises<T extends Workout$workoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Workout$workoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    programWorkouts<T extends Workout$programWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$programWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkouts<T extends Workout$userWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$userWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workout model
   */
  interface WorkoutFieldRefs {
    readonly id: FieldRef<"Workout", 'String'>
    readonly name: FieldRef<"Workout", 'String'>
    readonly notes: FieldRef<"Workout", 'String'>
    readonly ownerId: FieldRef<"Workout", 'String'>
    readonly createdAt: FieldRef<"Workout", 'DateTime'>
    readonly updatedAt: FieldRef<"Workout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workout findUnique
   */
  export type WorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findUniqueOrThrow
   */
  export type WorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findFirst
   */
  export type WorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findFirstOrThrow
   */
  export type WorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findMany
   */
  export type WorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout create
   */
  export type WorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Workout.
     */
    data: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
  }

  /**
   * Workout createMany
   */
  export type WorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workout createManyAndReturn
   */
  export type WorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workout update
   */
  export type WorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Workout.
     */
    data: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    /**
     * Choose, which Workout to update.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout updateMany
   */
  export type WorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to update.
     */
    limit?: number
  }

  /**
   * Workout updateManyAndReturn
   */
  export type WorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workout upsert
   */
  export type WorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Workout to update in case it exists.
     */
    where: WorkoutWhereUniqueInput
    /**
     * In case the Workout found by the `where` argument doesn't exist, create a new Workout with this data.
     */
    create: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    /**
     * In case the Workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
  }

  /**
   * Workout delete
   */
  export type WorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter which Workout to delete.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout deleteMany
   */
  export type WorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to delete.
     */
    limit?: number
  }

  /**
   * Workout.owner
   */
  export type Workout$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Workout.workoutExercises
   */
  export type Workout$workoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Workout.programWorkouts
   */
  export type Workout$programWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    cursor?: ProgramWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * Workout.userWorkouts
   */
  export type Workout$userWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * Workout without action
   */
  export type WorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutExercise
   */

  export type AggregateWorkoutExercise = {
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  export type WorkoutExerciseAvgAggregateOutputType = {
    order: number | null
  }

  export type WorkoutExerciseSumAggregateOutputType = {
    order: number | null
  }

  export type WorkoutExerciseMinAggregateOutputType = {
    id: string | null
    order: number | null
    notes: string | null
    coreStrengthSetId: string | null
    coreCardioSetId: string | null
    exerciseId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutExerciseMaxAggregateOutputType = {
    id: string | null
    order: number | null
    notes: string | null
    coreStrengthSetId: string | null
    coreCardioSetId: string | null
    exerciseId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutExerciseCountAggregateOutputType = {
    id: number
    order: number
    notes: number
    coreStrengthSetId: number
    coreCardioSetId: number
    exerciseId: number
    workoutId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkoutExerciseAvgAggregateInputType = {
    order?: true
  }

  export type WorkoutExerciseSumAggregateInputType = {
    order?: true
  }

  export type WorkoutExerciseMinAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    coreStrengthSetId?: true
    coreCardioSetId?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutExerciseMaxAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    coreStrengthSetId?: true
    coreCardioSetId?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutExerciseCountAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    coreStrengthSetId?: true
    coreCardioSetId?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercise to aggregate.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutExercises
    **/
    _count?: true | WorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type GetWorkoutExerciseAggregateType<T extends WorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutExercise[P]>
  }




  export type WorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithAggregationInput | WorkoutExerciseOrderByWithAggregationInput[]
    by: WorkoutExerciseScalarFieldEnum[] | WorkoutExerciseScalarFieldEnum
    having?: WorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutExerciseCountAggregateInputType | true
    _avg?: WorkoutExerciseAvgAggregateInputType
    _sum?: WorkoutExerciseSumAggregateInputType
    _min?: WorkoutExerciseMinAggregateInputType
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type WorkoutExerciseGroupByOutputType = {
    id: string
    order: number
    notes: string | null
    coreStrengthSetId: string | null
    coreCardioSetId: string | null
    exerciseId: string
    workoutId: string
    createdAt: Date
    updatedAt: Date
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutExerciseGroupByPayload<T extends WorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    coreStrengthSetId?: boolean
    coreCardioSetId?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    coreStrengthSetId?: boolean
    coreCardioSetId?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    coreStrengthSetId?: boolean
    coreCardioSetId?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectScalar = {
    id?: boolean
    order?: boolean
    notes?: boolean
    coreStrengthSetId?: boolean
    coreCardioSetId?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkoutExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "notes" | "coreStrengthSetId" | "coreCardioSetId" | "exerciseId" | "workoutId" | "createdAt" | "updatedAt", ExtArgs["result"]["workoutExercise"]>
  export type WorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coreStrengthSet?: boolean | WorkoutExercise$coreStrengthSetArgs<ExtArgs>
    coreCardioSet?: boolean | WorkoutExercise$coreCardioSetArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $WorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutExercise"
    objects: {
      coreStrengthSet: Prisma.$CoreStrengthSetPayload<ExtArgs> | null
      coreCardioSet: Prisma.$CoreCardioSetPayload<ExtArgs> | null
      exercise: Prisma.$ExercisePayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
      userWorkoutExercises: Prisma.$UserWorkoutExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      notes: string | null
      coreStrengthSetId: string | null
      coreCardioSetId: string | null
      exerciseId: string
      workoutId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workoutExercise"]>
    composites: {}
  }

  type WorkoutExerciseGetPayload<S extends boolean | null | undefined | WorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutExercisePayload, S>

  type WorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutExerciseCountAggregateInputType | true
    }

  export interface WorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutExercise'], meta: { name: 'WorkoutExercise' } }
    /**
     * Find zero or one WorkoutExercise that matches the filter.
     * @param {WorkoutExerciseFindUniqueArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkoutExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany()
     * 
     * // Get first 10 WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkoutExercise.
     * @param {WorkoutExerciseCreateArgs} args - Arguments to create a WorkoutExercise.
     * @example
     * // Create one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.create({
     *   data: {
     *     // ... data to create a WorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutExerciseCreateArgs>(args: SelectSubset<T, WorkoutExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkoutExercises.
     * @param {WorkoutExerciseCreateManyArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutExercises and returns the data saved in the database.
     * @param {WorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkoutExercise.
     * @param {WorkoutExerciseDeleteArgs} args - Arguments to delete one WorkoutExercise.
     * @example
     * // Delete one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutExerciseDeleteArgs>(args: SelectSubset<T, WorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkoutExercise.
     * @param {WorkoutExerciseUpdateArgs} args - Arguments to update one WorkoutExercise.
     * @example
     * // Update one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutExerciseUpdateArgs>(args: SelectSubset<T, WorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkoutExercises.
     * @param {WorkoutExerciseDeleteManyArgs} args - Arguments to filter WorkoutExercises to delete.
     * @example
     * // Delete a few WorkoutExercises
     * const { count } = await prisma.workoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises and returns the data updated in the database.
     * @param {WorkoutExerciseUpdateManyAndReturnArgs} args - Arguments to update many WorkoutExercises.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkoutExercise.
     * @param {WorkoutExerciseUpsertArgs} args - Arguments to update or create a WorkoutExercise.
     * @example
     * // Update or create a WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutExerciseUpsertArgs>(args: SelectSubset<T, WorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseCountArgs} args - Arguments to filter WorkoutExercises to count.
     * @example
     * // Count the number of WorkoutExercises
     * const count = await prisma.workoutExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutExerciseCountArgs>(
      args?: Subset<T, WorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutExerciseAggregateArgs>(args: Subset<T, WorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutExerciseAggregateType<T>>

    /**
     * Group by WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutExercise model
   */
  readonly fields: WorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coreStrengthSet<T extends WorkoutExercise$coreStrengthSetArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExercise$coreStrengthSetArgs<ExtArgs>>): Prisma__CoreStrengthSetClient<$Result.GetResult<Prisma.$CoreStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    coreCardioSet<T extends WorkoutExercise$coreCardioSetArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExercise$coreCardioSetArgs<ExtArgs>>): Prisma__CoreCardioSetClient<$Result.GetResult<Prisma.$CoreCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkoutExercises<T extends WorkoutExercise$userWorkoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutExercise model
   */
  interface WorkoutExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutExercise", 'String'>
    readonly order: FieldRef<"WorkoutExercise", 'Int'>
    readonly notes: FieldRef<"WorkoutExercise", 'String'>
    readonly coreStrengthSetId: FieldRef<"WorkoutExercise", 'String'>
    readonly coreCardioSetId: FieldRef<"WorkoutExercise", 'String'>
    readonly exerciseId: FieldRef<"WorkoutExercise", 'String'>
    readonly workoutId: FieldRef<"WorkoutExercise", 'String'>
    readonly createdAt: FieldRef<"WorkoutExercise", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkoutExercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutExercise findUnique
   */
  export type WorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findUniqueOrThrow
   */
  export type WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findFirst
   */
  export type WorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findFirstOrThrow
   */
  export type WorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findMany
   */
  export type WorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercises to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise create
   */
  export type WorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
  }

  /**
   * WorkoutExercise createMany
   */
  export type WorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutExercise createManyAndReturn
   */
  export type WorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise update
   */
  export type WorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutExercise to update.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise updateMany
   */
  export type WorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to update.
     */
    limit?: number
  }

  /**
   * WorkoutExercise updateManyAndReturn
   */
  export type WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise upsert
   */
  export type WorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutExercise to update in case it exists.
     */
    where: WorkoutExerciseWhereUniqueInput
    /**
     * In case the WorkoutExercise found by the `where` argument doesn't exist, create a new WorkoutExercise with this data.
     */
    create: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
  }

  /**
   * WorkoutExercise delete
   */
  export type WorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutExercise to delete.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise deleteMany
   */
  export type WorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercises to delete
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to delete.
     */
    limit?: number
  }

  /**
   * WorkoutExercise.coreStrengthSet
   */
  export type WorkoutExercise$coreStrengthSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreStrengthSet
     */
    select?: CoreStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreStrengthSet
     */
    omit?: CoreStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreStrengthSetInclude<ExtArgs> | null
    where?: CoreStrengthSetWhereInput
  }

  /**
   * WorkoutExercise.coreCardioSet
   */
  export type WorkoutExercise$coreCardioSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoreCardioSet
     */
    select?: CoreCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoreCardioSet
     */
    omit?: CoreCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoreCardioSetInclude<ExtArgs> | null
    where?: CoreCardioSetWhereInput
  }

  /**
   * WorkoutExercise.userWorkoutExercises
   */
  export type WorkoutExercise$userWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    cursor?: UserWorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise without action
   */
  export type WorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model UserWorkoutExercise
   */

  export type AggregateUserWorkoutExercise = {
    _count: UserWorkoutExerciseCountAggregateOutputType | null
    _min: UserWorkoutExerciseMinAggregateOutputType | null
    _max: UserWorkoutExerciseMaxAggregateOutputType | null
  }

  export type UserWorkoutExerciseMinAggregateOutputType = {
    id: string | null
    workoutExerciseId: string | null
    userWorkoutId: string | null
  }

  export type UserWorkoutExerciseMaxAggregateOutputType = {
    id: string | null
    workoutExerciseId: string | null
    userWorkoutId: string | null
  }

  export type UserWorkoutExerciseCountAggregateOutputType = {
    id: number
    workoutExerciseId: number
    userWorkoutId: number
    _all: number
  }


  export type UserWorkoutExerciseMinAggregateInputType = {
    id?: true
    workoutExerciseId?: true
    userWorkoutId?: true
  }

  export type UserWorkoutExerciseMaxAggregateInputType = {
    id?: true
    workoutExerciseId?: true
    userWorkoutId?: true
  }

  export type UserWorkoutExerciseCountAggregateInputType = {
    id?: true
    workoutExerciseId?: true
    userWorkoutId?: true
    _all?: true
  }

  export type UserWorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkoutExercise to aggregate.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWorkoutExercises
    **/
    _count?: true | UserWorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserWorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserWorkoutExerciseMaxAggregateInputType
  }

  export type GetUserWorkoutExerciseAggregateType<T extends UserWorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateUserWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateUserWorkoutExercise[P]>
  }




  export type UserWorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithAggregationInput | UserWorkoutExerciseOrderByWithAggregationInput[]
    by: UserWorkoutExerciseScalarFieldEnum[] | UserWorkoutExerciseScalarFieldEnum
    having?: UserWorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserWorkoutExerciseCountAggregateInputType | true
    _min?: UserWorkoutExerciseMinAggregateInputType
    _max?: UserWorkoutExerciseMaxAggregateInputType
  }

  export type UserWorkoutExerciseGroupByOutputType = {
    id: string
    workoutExerciseId: string
    userWorkoutId: string
    _count: UserWorkoutExerciseCountAggregateOutputType | null
    _min: UserWorkoutExerciseMinAggregateOutputType | null
    _max: UserWorkoutExerciseMaxAggregateOutputType | null
  }

  type GetUserWorkoutExerciseGroupByPayload<T extends UserWorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserWorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserWorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserWorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], UserWorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type UserWorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
    userStrengthSet?: boolean | UserWorkoutExercise$userStrengthSetArgs<ExtArgs>
    userCardioSet?: boolean | UserWorkoutExercise$userCardioSetArgs<ExtArgs>
    _count?: boolean | UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectScalar = {
    id?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
  }

  export type UserWorkoutExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workoutExerciseId" | "userWorkoutId", ExtArgs["result"]["userWorkoutExercise"]>
  export type UserWorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
    userStrengthSet?: boolean | UserWorkoutExercise$userStrengthSetArgs<ExtArgs>
    userCardioSet?: boolean | UserWorkoutExercise$userCardioSetArgs<ExtArgs>
    _count?: boolean | UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserWorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }
  export type UserWorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }

  export type $UserWorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserWorkoutExercise"
    objects: {
      workoutExercise: Prisma.$WorkoutExercisePayload<ExtArgs>
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>
      userStrengthSet: Prisma.$UserStrengthSetPayload<ExtArgs>[]
      userCardioSet: Prisma.$UserCardioSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutExerciseId: string
      userWorkoutId: string
    }, ExtArgs["result"]["userWorkoutExercise"]>
    composites: {}
  }

  type UserWorkoutExerciseGetPayload<S extends boolean | null | undefined | UserWorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$UserWorkoutExercisePayload, S>

  type UserWorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserWorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserWorkoutExerciseCountAggregateInputType | true
    }

  export interface UserWorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWorkoutExercise'], meta: { name: 'UserWorkoutExercise' } }
    /**
     * Find zero or one UserWorkoutExercise that matches the filter.
     * @param {UserWorkoutExerciseFindUniqueArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserWorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, UserWorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserWorkoutExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserWorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserWorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindFirstArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserWorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserWorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserWorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWorkoutExercises
     * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany()
     * 
     * // Get first 10 UserWorkoutExercises
     * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserWorkoutExerciseFindManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserWorkoutExercise.
     * @param {UserWorkoutExerciseCreateArgs} args - Arguments to create a UserWorkoutExercise.
     * @example
     * // Create one UserWorkoutExercise
     * const UserWorkoutExercise = await prisma.userWorkoutExercise.create({
     *   data: {
     *     // ... data to create a UserWorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends UserWorkoutExerciseCreateArgs>(args: SelectSubset<T, UserWorkoutExerciseCreateArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserWorkoutExercises.
     * @param {UserWorkoutExerciseCreateManyArgs} args - Arguments to create many UserWorkoutExercises.
     * @example
     * // Create many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserWorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserWorkoutExercises and returns the data saved in the database.
     * @param {UserWorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many UserWorkoutExercises.
     * @example
     * // Create many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserWorkoutExercises and only return the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserWorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserWorkoutExercise.
     * @param {UserWorkoutExerciseDeleteArgs} args - Arguments to delete one UserWorkoutExercise.
     * @example
     * // Delete one UserWorkoutExercise
     * const UserWorkoutExercise = await prisma.userWorkoutExercise.delete({
     *   where: {
     *     // ... filter to delete one UserWorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends UserWorkoutExerciseDeleteArgs>(args: SelectSubset<T, UserWorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserWorkoutExercise.
     * @param {UserWorkoutExerciseUpdateArgs} args - Arguments to update one UserWorkoutExercise.
     * @example
     * // Update one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserWorkoutExerciseUpdateArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserWorkoutExercises.
     * @param {UserWorkoutExerciseDeleteManyArgs} args - Arguments to filter UserWorkoutExercises to delete.
     * @example
     * // Delete a few UserWorkoutExercises
     * const { count } = await prisma.userWorkoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserWorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserWorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkoutExercises and returns the data updated in the database.
     * @param {UserWorkoutExerciseUpdateManyAndReturnArgs} args - Arguments to update many UserWorkoutExercises.
     * @example
     * // Update many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserWorkoutExercises and only return the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserWorkoutExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserWorkoutExercise.
     * @param {UserWorkoutExerciseUpsertArgs} args - Arguments to update or create a UserWorkoutExercise.
     * @example
     * // Update or create a UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.upsert({
     *   create: {
     *     // ... data to create a UserWorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends UserWorkoutExerciseUpsertArgs>(args: SelectSubset<T, UserWorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserWorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseCountArgs} args - Arguments to filter UserWorkoutExercises to count.
     * @example
     * // Count the number of UserWorkoutExercises
     * const count = await prisma.userWorkoutExercise.count({
     *   where: {
     *     // ... the filter for the UserWorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends UserWorkoutExerciseCountArgs>(
      args?: Subset<T, UserWorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWorkoutExerciseAggregateArgs>(args: Subset<T, UserWorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetUserWorkoutExerciseAggregateType<T>>

    /**
     * Group by UserWorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserWorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserWorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: UserWorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserWorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserWorkoutExercise model
   */
  readonly fields: UserWorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserWorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutExercise<T extends WorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkout<T extends UserWorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutDefaultArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userStrengthSet<T extends UserWorkoutExercise$userStrengthSetArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExercise$userStrengthSetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userCardioSet<T extends UserWorkoutExercise$userCardioSetArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExercise$userCardioSetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserWorkoutExercise model
   */
  interface UserWorkoutExerciseFieldRefs {
    readonly id: FieldRef<"UserWorkoutExercise", 'String'>
    readonly workoutExerciseId: FieldRef<"UserWorkoutExercise", 'String'>
    readonly userWorkoutId: FieldRef<"UserWorkoutExercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserWorkoutExercise findUnique
   */
  export type UserWorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where: UserWorkoutExerciseWhereUniqueInput
  }

  /**
   * UserWorkoutExercise findUniqueOrThrow
   */
  export type UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where: UserWorkoutExerciseWhereUniqueInput
  }

  /**
   * UserWorkoutExercise findFirst
   */
  export type UserWorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkoutExercises.
     */
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise findFirstOrThrow
   */
  export type UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkoutExercises.
     */
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise findMany
   */
  export type UserWorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercises to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise create
   */
  export type UserWorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a UserWorkoutExercise.
     */
    data: XOR<UserWorkoutExerciseCreateInput, UserWorkoutExerciseUncheckedCreateInput>
  }

  /**
   * UserWorkoutExercise createMany
   */
  export type UserWorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserWorkoutExercises.
     */
    data: UserWorkoutExerciseCreateManyInput | UserWorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserWorkoutExercise createManyAndReturn
   */
  export type UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many UserWorkoutExercises.
     */
    data: UserWorkoutExerciseCreateManyInput | UserWorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkoutExercise update
   */
  export type UserWorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a UserWorkoutExercise.
     */
    data: XOR<UserWorkoutExerciseUpdateInput, UserWorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which UserWorkoutExercise to update.
     */
    where: UserWorkoutExerciseWhereUniqueInput
  }

  /**
   * UserWorkoutExercise updateMany
   */
  export type UserWorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserWorkoutExercises.
     */
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkoutExercises to update
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to update.
     */
    limit?: number
  }

  /**
   * UserWorkoutExercise updateManyAndReturn
   */
  export type UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to update UserWorkoutExercises.
     */
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkoutExercises to update
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkoutExercise upsert
   */
  export type UserWorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the UserWorkoutExercise to update in case it exists.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    /**
     * In case the UserWorkoutExercise found by the `where` argument doesn't exist, create a new UserWorkoutExercise with this data.
     */
    create: XOR<UserWorkoutExerciseCreateInput, UserWorkoutExerciseUncheckedCreateInput>
    /**
     * In case the UserWorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserWorkoutExerciseUpdateInput, UserWorkoutExerciseUncheckedUpdateInput>
  }

  /**
   * UserWorkoutExercise delete
   */
  export type UserWorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which UserWorkoutExercise to delete.
     */
    where: UserWorkoutExerciseWhereUniqueInput
  }

  /**
   * UserWorkoutExercise deleteMany
   */
  export type UserWorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkoutExercises to delete
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to delete.
     */
    limit?: number
  }

  /**
   * UserWorkoutExercise.userStrengthSet
   */
  export type UserWorkoutExercise$userStrengthSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    where?: UserStrengthSetWhereInput
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    cursor?: UserStrengthSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise.userCardioSet
   */
  export type UserWorkoutExercise$userCardioSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    where?: UserCardioSetWhereInput
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    cursor?: UserCardioSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise without action
   */
  export type UserWorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model UserWorkout
   */

  export type AggregateUserWorkout = {
    _count: UserWorkoutCountAggregateOutputType | null
    _min: UserWorkoutMinAggregateOutputType | null
    _max: UserWorkoutMaxAggregateOutputType | null
  }

  export type UserWorkoutMinAggregateOutputType = {
    id: string | null
    dateCompleted: Date | null
    ownerId: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type UserWorkoutMaxAggregateOutputType = {
    id: string | null
    dateCompleted: Date | null
    ownerId: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type UserWorkoutCountAggregateOutputType = {
    id: number
    dateCompleted: number
    ownerId: number
    programId: number
    workoutId: number
    createdAt: number
    _all: number
  }


  export type UserWorkoutMinAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
  }

  export type UserWorkoutMaxAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
  }

  export type UserWorkoutCountAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
    _all?: true
  }

  export type UserWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkout to aggregate.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWorkouts
    **/
    _count?: true | UserWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserWorkoutMaxAggregateInputType
  }

  export type GetUserWorkoutAggregateType<T extends UserWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateUserWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWorkout[P]>
      : GetScalarType<T[P], AggregateUserWorkout[P]>
  }




  export type UserWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithAggregationInput | UserWorkoutOrderByWithAggregationInput[]
    by: UserWorkoutScalarFieldEnum[] | UserWorkoutScalarFieldEnum
    having?: UserWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserWorkoutCountAggregateInputType | true
    _min?: UserWorkoutMinAggregateInputType
    _max?: UserWorkoutMaxAggregateInputType
  }

  export type UserWorkoutGroupByOutputType = {
    id: string
    dateCompleted: Date | null
    ownerId: string
    programId: string | null
    workoutId: string | null
    createdAt: Date
    _count: UserWorkoutCountAggregateOutputType | null
    _min: UserWorkoutMinAggregateOutputType | null
    _max: UserWorkoutMaxAggregateOutputType | null
  }

  type GetUserWorkoutGroupByPayload<T extends UserWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], UserWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type UserWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | UserWorkout$userWorkoutExercisesArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
    _count?: boolean | UserWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectScalar = {
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
  }

  export type UserWorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dateCompleted" | "ownerId" | "programId" | "workoutId" | "createdAt", ExtArgs["result"]["userWorkout"]>
  export type UserWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | UserWorkout$userWorkoutExercisesArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
    _count?: boolean | UserWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserWorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }
  export type UserWorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }

  export type $UserWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserWorkout"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      userWorkoutExercises: Prisma.$UserWorkoutExercisePayload<ExtArgs>[]
      program: Prisma.$ProgramPayload<ExtArgs> | null
      workout: Prisma.$WorkoutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dateCompleted: Date | null
      ownerId: string
      programId: string | null
      workoutId: string | null
      createdAt: Date
    }, ExtArgs["result"]["userWorkout"]>
    composites: {}
  }

  type UserWorkoutGetPayload<S extends boolean | null | undefined | UserWorkoutDefaultArgs> = $Result.GetResult<Prisma.$UserWorkoutPayload, S>

  type UserWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserWorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserWorkoutCountAggregateInputType | true
    }

  export interface UserWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWorkout'], meta: { name: 'UserWorkout' } }
    /**
     * Find zero or one UserWorkout that matches the filter.
     * @param {UserWorkoutFindUniqueArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserWorkoutFindUniqueArgs>(args: SelectSubset<T, UserWorkoutFindUniqueArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserWorkout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserWorkoutFindUniqueOrThrowArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserWorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, UserWorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindFirstArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserWorkoutFindFirstArgs>(args?: SelectSubset<T, UserWorkoutFindFirstArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindFirstOrThrowArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserWorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, UserWorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWorkouts
     * const userWorkouts = await prisma.userWorkout.findMany()
     * 
     * // Get first 10 UserWorkouts
     * const userWorkouts = await prisma.userWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserWorkoutFindManyArgs>(args?: SelectSubset<T, UserWorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserWorkout.
     * @param {UserWorkoutCreateArgs} args - Arguments to create a UserWorkout.
     * @example
     * // Create one UserWorkout
     * const UserWorkout = await prisma.userWorkout.create({
     *   data: {
     *     // ... data to create a UserWorkout
     *   }
     * })
     * 
     */
    create<T extends UserWorkoutCreateArgs>(args: SelectSubset<T, UserWorkoutCreateArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserWorkouts.
     * @param {UserWorkoutCreateManyArgs} args - Arguments to create many UserWorkouts.
     * @example
     * // Create many UserWorkouts
     * const userWorkout = await prisma.userWorkout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserWorkoutCreateManyArgs>(args?: SelectSubset<T, UserWorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserWorkouts and returns the data saved in the database.
     * @param {UserWorkoutCreateManyAndReturnArgs} args - Arguments to create many UserWorkouts.
     * @example
     * // Create many UserWorkouts
     * const userWorkout = await prisma.userWorkout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserWorkouts and only return the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserWorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, UserWorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserWorkout.
     * @param {UserWorkoutDeleteArgs} args - Arguments to delete one UserWorkout.
     * @example
     * // Delete one UserWorkout
     * const UserWorkout = await prisma.userWorkout.delete({
     *   where: {
     *     // ... filter to delete one UserWorkout
     *   }
     * })
     * 
     */
    delete<T extends UserWorkoutDeleteArgs>(args: SelectSubset<T, UserWorkoutDeleteArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserWorkout.
     * @param {UserWorkoutUpdateArgs} args - Arguments to update one UserWorkout.
     * @example
     * // Update one UserWorkout
     * const userWorkout = await prisma.userWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserWorkoutUpdateArgs>(args: SelectSubset<T, UserWorkoutUpdateArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserWorkouts.
     * @param {UserWorkoutDeleteManyArgs} args - Arguments to filter UserWorkouts to delete.
     * @example
     * // Delete a few UserWorkouts
     * const { count } = await prisma.userWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserWorkoutDeleteManyArgs>(args?: SelectSubset<T, UserWorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWorkouts
     * const userWorkout = await prisma.userWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserWorkoutUpdateManyArgs>(args: SelectSubset<T, UserWorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkouts and returns the data updated in the database.
     * @param {UserWorkoutUpdateManyAndReturnArgs} args - Arguments to update many UserWorkouts.
     * @example
     * // Update many UserWorkouts
     * const userWorkout = await prisma.userWorkout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserWorkouts and only return the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserWorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, UserWorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserWorkout.
     * @param {UserWorkoutUpsertArgs} args - Arguments to update or create a UserWorkout.
     * @example
     * // Update or create a UserWorkout
     * const userWorkout = await prisma.userWorkout.upsert({
     *   create: {
     *     // ... data to create a UserWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWorkout we want to update
     *   }
     * })
     */
    upsert<T extends UserWorkoutUpsertArgs>(args: SelectSubset<T, UserWorkoutUpsertArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutCountArgs} args - Arguments to filter UserWorkouts to count.
     * @example
     * // Count the number of UserWorkouts
     * const count = await prisma.userWorkout.count({
     *   where: {
     *     // ... the filter for the UserWorkouts we want to count
     *   }
     * })
    **/
    count<T extends UserWorkoutCountArgs>(
      args?: Subset<T, UserWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWorkoutAggregateArgs>(args: Subset<T, UserWorkoutAggregateArgs>): Prisma.PrismaPromise<GetUserWorkoutAggregateType<T>>

    /**
     * Group by UserWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: UserWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserWorkout model
   */
  readonly fields: UserWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkoutExercises<T extends UserWorkout$userWorkoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$userWorkoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    program<T extends UserWorkout$programArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$programArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workout<T extends UserWorkout$workoutArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$workoutArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserWorkout model
   */
  interface UserWorkoutFieldRefs {
    readonly id: FieldRef<"UserWorkout", 'String'>
    readonly dateCompleted: FieldRef<"UserWorkout", 'DateTime'>
    readonly ownerId: FieldRef<"UserWorkout", 'String'>
    readonly programId: FieldRef<"UserWorkout", 'String'>
    readonly workoutId: FieldRef<"UserWorkout", 'String'>
    readonly createdAt: FieldRef<"UserWorkout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserWorkout findUnique
   */
  export type UserWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where: UserWorkoutWhereUniqueInput
  }

  /**
   * UserWorkout findUniqueOrThrow
   */
  export type UserWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where: UserWorkoutWhereUniqueInput
  }

  /**
   * UserWorkout findFirst
   */
  export type UserWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkouts.
     */
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * UserWorkout findFirstOrThrow
   */
  export type UserWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkouts.
     */
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * UserWorkout findMany
   */
  export type UserWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkouts to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * UserWorkout create
   */
  export type UserWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a UserWorkout.
     */
    data: XOR<UserWorkoutCreateInput, UserWorkoutUncheckedCreateInput>
  }

  /**
   * UserWorkout createMany
   */
  export type UserWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserWorkouts.
     */
    data: UserWorkoutCreateManyInput | UserWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserWorkout createManyAndReturn
   */
  export type UserWorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many UserWorkouts.
     */
    data: UserWorkoutCreateManyInput | UserWorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkout update
   */
  export type UserWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a UserWorkout.
     */
    data: XOR<UserWorkoutUpdateInput, UserWorkoutUncheckedUpdateInput>
    /**
     * Choose, which UserWorkout to update.
     */
    where: UserWorkoutWhereUniqueInput
  }

  /**
   * UserWorkout updateMany
   */
  export type UserWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserWorkouts.
     */
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkouts to update
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to update.
     */
    limit?: number
  }

  /**
   * UserWorkout updateManyAndReturn
   */
  export type UserWorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * The data used to update UserWorkouts.
     */
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkouts to update
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkout upsert
   */
  export type UserWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the UserWorkout to update in case it exists.
     */
    where: UserWorkoutWhereUniqueInput
    /**
     * In case the UserWorkout found by the `where` argument doesn't exist, create a new UserWorkout with this data.
     */
    create: XOR<UserWorkoutCreateInput, UserWorkoutUncheckedCreateInput>
    /**
     * In case the UserWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserWorkoutUpdateInput, UserWorkoutUncheckedUpdateInput>
  }

  /**
   * UserWorkout delete
   */
  export type UserWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter which UserWorkout to delete.
     */
    where: UserWorkoutWhereUniqueInput
  }

  /**
   * UserWorkout deleteMany
   */
  export type UserWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkouts to delete
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to delete.
     */
    limit?: number
  }

  /**
   * UserWorkout.userWorkoutExercises
   */
  export type UserWorkout$userWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    cursor?: UserWorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * UserWorkout.program
   */
  export type UserWorkout$programArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
  }

  /**
   * UserWorkout.workout
   */
  export type UserWorkout$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
  }

  /**
   * UserWorkout without action
   */
  export type UserWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    googleId: 'googleId',
    firstName: 'firstName',
    lastName: 'lastName',
    imgUrl: 'imgUrl',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    youtubeUrl: 'youtubeUrl',
    type: 'type',
    notes: 'notes',
    equipment: 'equipment',
    muscles: 'muscles',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const CoreCardioSetScalarFieldEnum: {
    id: 'id',
    warmupTime: 'warmupTime',
    avgHeartRate: 'avgHeartRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreCardioSetScalarFieldEnum = (typeof CoreCardioSetScalarFieldEnum)[keyof typeof CoreCardioSetScalarFieldEnum]


  export const CoreCardioSetCalorieTargetScalarFieldEnum: {
    id: 'id',
    coreCardioSetId: 'coreCardioSetId',
    calorieTarget: 'calorieTarget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreCardioSetCalorieTargetScalarFieldEnum = (typeof CoreCardioSetCalorieTargetScalarFieldEnum)[keyof typeof CoreCardioSetCalorieTargetScalarFieldEnum]


  export const CoreCardioSetDistanceScalarFieldEnum: {
    id: 'id',
    coreCardioSetId: 'coreCardioSetId',
    distance: 'distance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreCardioSetDistanceScalarFieldEnum = (typeof CoreCardioSetDistanceScalarFieldEnum)[keyof typeof CoreCardioSetDistanceScalarFieldEnum]


  export const CoreCardioSetAvgSpeedScalarFieldEnum: {
    id: 'id',
    coreCardioSetId: 'coreCardioSetId',
    avgSpeed: 'avgSpeed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreCardioSetAvgSpeedScalarFieldEnum = (typeof CoreCardioSetAvgSpeedScalarFieldEnum)[keyof typeof CoreCardioSetAvgSpeedScalarFieldEnum]


  export const CoreCardioSetWorkoutTimeScalarFieldEnum: {
    id: 'id',
    coreCardioSetId: 'coreCardioSetId',
    workTime: 'workTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreCardioSetWorkoutTimeScalarFieldEnum = (typeof CoreCardioSetWorkoutTimeScalarFieldEnum)[keyof typeof CoreCardioSetWorkoutTimeScalarFieldEnum]


  export const UserCardioSetScalarFieldEnum: {
    id: 'id',
    warmupTime: 'warmupTime',
    workTime: 'workTime',
    avgHeartRate: 'avgHeartRate',
    avgSpeed: 'avgSpeed',
    distance: 'distance',
    order: 'order',
    isCompleted: 'isCompleted',
    calorieTarget: 'calorieTarget',
    userWorkoutExerciseId: 'userWorkoutExerciseId',
    skippedReason: 'skippedReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserCardioSetScalarFieldEnum = (typeof UserCardioSetScalarFieldEnum)[keyof typeof UserCardioSetScalarFieldEnum]


  export const CoreStrengthSetScalarFieldEnum: {
    id: 'id',
    restTime: 'restTime',
    numberOfSets: 'numberOfSets',
    hasWarmup: 'hasWarmup',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreStrengthSetScalarFieldEnum = (typeof CoreStrengthSetScalarFieldEnum)[keyof typeof CoreStrengthSetScalarFieldEnum]


  export const CoreStrengthSetRepsScalarFieldEnum: {
    id: 'id',
    coreStrengthSetId: 'coreStrengthSetId',
    reps: 'reps',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreStrengthSetRepsScalarFieldEnum = (typeof CoreStrengthSetRepsScalarFieldEnum)[keyof typeof CoreStrengthSetRepsScalarFieldEnum]


  export const CoreStrengthSetWeightScalarFieldEnum: {
    id: 'id',
    coreStrengthSetId: 'coreStrengthSetId',
    isBodyWeight: 'isBodyWeight',
    weight: 'weight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoreStrengthSetWeightScalarFieldEnum = (typeof CoreStrengthSetWeightScalarFieldEnum)[keyof typeof CoreStrengthSetWeightScalarFieldEnum]


  export const UserStrengthSetScalarFieldEnum: {
    id: 'id',
    reps: 'reps',
    weight: 'weight',
    isBodyWeight: 'isBodyWeight',
    restTime: 'restTime',
    order: 'order',
    isCompleted: 'isCompleted',
    isWarmup: 'isWarmup',
    isMuscleFailure: 'isMuscleFailure',
    isJointPain: 'isJointPain',
    skippedReason: 'skippedReason',
    userWorkoutExerciseId: 'userWorkoutExerciseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStrengthSetScalarFieldEnum = (typeof UserStrengthSetScalarFieldEnum)[keyof typeof UserStrengthSetScalarFieldEnum]


  export const ProgramScalarFieldEnum: {
    id: 'id',
    name: 'name',
    notes: 'notes',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


  export const ProgramWorkoutScalarFieldEnum: {
    id: 'id',
    programId: 'programId',
    workoutId: 'workoutId',
    daysOfWeek: 'daysOfWeek',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgramWorkoutScalarFieldEnum = (typeof ProgramWorkoutScalarFieldEnum)[keyof typeof ProgramWorkoutScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    name: 'name',
    notes: 'notes',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const WorkoutExerciseScalarFieldEnum: {
    id: 'id',
    order: 'order',
    notes: 'notes',
    coreStrengthSetId: 'coreStrengthSetId',
    coreCardioSetId: 'coreCardioSetId',
    exerciseId: 'exerciseId',
    workoutId: 'workoutId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkoutExerciseScalarFieldEnum = (typeof WorkoutExerciseScalarFieldEnum)[keyof typeof WorkoutExerciseScalarFieldEnum]


  export const UserWorkoutExerciseScalarFieldEnum: {
    id: 'id',
    workoutExerciseId: 'workoutExerciseId',
    userWorkoutId: 'userWorkoutId'
  };

  export type UserWorkoutExerciseScalarFieldEnum = (typeof UserWorkoutExerciseScalarFieldEnum)[keyof typeof UserWorkoutExerciseScalarFieldEnum]


  export const UserWorkoutScalarFieldEnum: {
    id: 'id',
    dateCompleted: 'dateCompleted',
    ownerId: 'ownerId',
    programId: 'programId',
    workoutId: 'workoutId',
    createdAt: 'createdAt'
  };

  export type UserWorkoutScalarFieldEnum = (typeof UserWorkoutScalarFieldEnum)[keyof typeof UserWorkoutScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ExerciseType'
   */
  export type EnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType'>
    


  /**
   * Reference to a field of type 'ExerciseType[]'
   */
  export type ListEnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType[]'>
    


  /**
   * Reference to a field of type 'ExerciseEquipment[]'
   */
  export type ListEnumExerciseEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseEquipment[]'>
    


  /**
   * Reference to a field of type 'ExerciseEquipment'
   */
  export type EnumExerciseEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseEquipment'>
    


  /**
   * Reference to a field of type 'ExerciseMuscle[]'
   */
  export type ListEnumExerciseMuscleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseMuscle[]'>
    


  /**
   * Reference to a field of type 'ExerciseMuscle'
   */
  export type EnumExerciseMuscleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseMuscle'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DaysOfWeek[]'
   */
  export type ListEnumDaysOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DaysOfWeek[]'>
    


  /**
   * Reference to a field of type 'DaysOfWeek'
   */
  export type EnumDaysOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DaysOfWeek'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    imgUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    programs?: ProgramListRelationFilter
    workouts?: WorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    programs?: ProgramOrderByRelationAggregateInput
    workouts?: WorkoutOrderByRelationAggregateInput
    userWorkout?: UserWorkoutOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    imgUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    programs?: ProgramListRelationFilter
    workouts?: WorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
  }, "id" | "email" | "googleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    imgUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    youtubeUrl?: StringFilter<"Exercise"> | string
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    notes?: StringNullableFilter<"Exercise"> | string | null
    equipment?: EnumExerciseEquipmentNullableListFilter<"Exercise">
    muscles?: EnumExerciseMuscleNullableListFilter<"Exercise">
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    workoutExercises?: WorkoutExerciseListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    equipment?: SortOrder
    muscles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workoutExercises?: WorkoutExerciseOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    youtubeUrl?: StringFilter<"Exercise"> | string
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    notes?: StringNullableFilter<"Exercise"> | string | null
    equipment?: EnumExerciseEquipmentNullableListFilter<"Exercise">
    muscles?: EnumExerciseMuscleNullableListFilter<"Exercise">
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    workoutExercises?: WorkoutExerciseListRelationFilter
  }, "id" | "name">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    equipment?: SortOrder
    muscles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    youtubeUrl?: StringWithAggregatesFilter<"Exercise"> | string
    type?: EnumExerciseTypeWithAggregatesFilter<"Exercise"> | $Enums.ExerciseType
    notes?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    equipment?: EnumExerciseEquipmentNullableListFilter<"Exercise">
    muscles?: EnumExerciseMuscleNullableListFilter<"Exercise">
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
  }

  export type CoreCardioSetWhereInput = {
    AND?: CoreCardioSetWhereInput | CoreCardioSetWhereInput[]
    OR?: CoreCardioSetWhereInput[]
    NOT?: CoreCardioSetWhereInput | CoreCardioSetWhereInput[]
    id?: StringFilter<"CoreCardioSet"> | string
    warmupTime?: IntNullableFilter<"CoreCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"CoreCardioSet"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSet"> | Date | string
    workoutExercise?: WorkoutExerciseListRelationFilter
    workTime?: CoreCardioSetWorkoutTimeListRelationFilter
    avgSpeed?: CoreCardioSetAvgSpeedListRelationFilter
    distance?: CoreCardioSetDistanceListRelationFilter
    calorieTarget?: CoreCardioSetCalorieTargetListRelationFilter
  }

  export type CoreCardioSetOrderByWithRelationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workoutExercise?: WorkoutExerciseOrderByRelationAggregateInput
    workTime?: CoreCardioSetWorkoutTimeOrderByRelationAggregateInput
    avgSpeed?: CoreCardioSetAvgSpeedOrderByRelationAggregateInput
    distance?: CoreCardioSetDistanceOrderByRelationAggregateInput
    calorieTarget?: CoreCardioSetCalorieTargetOrderByRelationAggregateInput
  }

  export type CoreCardioSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreCardioSetWhereInput | CoreCardioSetWhereInput[]
    OR?: CoreCardioSetWhereInput[]
    NOT?: CoreCardioSetWhereInput | CoreCardioSetWhereInput[]
    warmupTime?: IntNullableFilter<"CoreCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"CoreCardioSet"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSet"> | Date | string
    workoutExercise?: WorkoutExerciseListRelationFilter
    workTime?: CoreCardioSetWorkoutTimeListRelationFilter
    avgSpeed?: CoreCardioSetAvgSpeedListRelationFilter
    distance?: CoreCardioSetDistanceListRelationFilter
    calorieTarget?: CoreCardioSetCalorieTargetListRelationFilter
  }, "id">

  export type CoreCardioSetOrderByWithAggregationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreCardioSetCountOrderByAggregateInput
    _avg?: CoreCardioSetAvgOrderByAggregateInput
    _max?: CoreCardioSetMaxOrderByAggregateInput
    _min?: CoreCardioSetMinOrderByAggregateInput
    _sum?: CoreCardioSetSumOrderByAggregateInput
  }

  export type CoreCardioSetScalarWhereWithAggregatesInput = {
    AND?: CoreCardioSetScalarWhereWithAggregatesInput | CoreCardioSetScalarWhereWithAggregatesInput[]
    OR?: CoreCardioSetScalarWhereWithAggregatesInput[]
    NOT?: CoreCardioSetScalarWhereWithAggregatesInput | CoreCardioSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreCardioSet"> | string
    warmupTime?: IntNullableWithAggregatesFilter<"CoreCardioSet"> | number | null
    avgHeartRate?: IntNullableWithAggregatesFilter<"CoreCardioSet"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreCardioSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreCardioSet"> | Date | string
  }

  export type CoreCardioSetCalorieTargetWhereInput = {
    AND?: CoreCardioSetCalorieTargetWhereInput | CoreCardioSetCalorieTargetWhereInput[]
    OR?: CoreCardioSetCalorieTargetWhereInput[]
    NOT?: CoreCardioSetCalorieTargetWhereInput | CoreCardioSetCalorieTargetWhereInput[]
    id?: StringFilter<"CoreCardioSetCalorieTarget"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetCalorieTarget"> | string
    calorieTarget?: IntNullableFilter<"CoreCardioSetCalorieTarget"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }

  export type CoreCardioSetCalorieTargetOrderByWithRelationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    calorieTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreCardioSet?: CoreCardioSetOrderByWithRelationInput
  }

  export type CoreCardioSetCalorieTargetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreCardioSetCalorieTargetWhereInput | CoreCardioSetCalorieTargetWhereInput[]
    OR?: CoreCardioSetCalorieTargetWhereInput[]
    NOT?: CoreCardioSetCalorieTargetWhereInput | CoreCardioSetCalorieTargetWhereInput[]
    coreCardioSetId?: StringFilter<"CoreCardioSetCalorieTarget"> | string
    calorieTarget?: IntNullableFilter<"CoreCardioSetCalorieTarget"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }, "id">

  export type CoreCardioSetCalorieTargetOrderByWithAggregationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    calorieTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreCardioSetCalorieTargetCountOrderByAggregateInput
    _avg?: CoreCardioSetCalorieTargetAvgOrderByAggregateInput
    _max?: CoreCardioSetCalorieTargetMaxOrderByAggregateInput
    _min?: CoreCardioSetCalorieTargetMinOrderByAggregateInput
    _sum?: CoreCardioSetCalorieTargetSumOrderByAggregateInput
  }

  export type CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput = {
    AND?: CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput | CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput[]
    OR?: CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput[]
    NOT?: CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput | CoreCardioSetCalorieTargetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreCardioSetCalorieTarget"> | string
    coreCardioSetId?: StringWithAggregatesFilter<"CoreCardioSetCalorieTarget"> | string
    calorieTarget?: IntNullableWithAggregatesFilter<"CoreCardioSetCalorieTarget"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreCardioSetCalorieTarget"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreCardioSetCalorieTarget"> | Date | string
  }

  export type CoreCardioSetDistanceWhereInput = {
    AND?: CoreCardioSetDistanceWhereInput | CoreCardioSetDistanceWhereInput[]
    OR?: CoreCardioSetDistanceWhereInput[]
    NOT?: CoreCardioSetDistanceWhereInput | CoreCardioSetDistanceWhereInput[]
    id?: StringFilter<"CoreCardioSetDistance"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetDistance"> | string
    distance?: FloatNullableFilter<"CoreCardioSetDistance"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }

  export type CoreCardioSetDistanceOrderByWithRelationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    distance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreCardioSet?: CoreCardioSetOrderByWithRelationInput
  }

  export type CoreCardioSetDistanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreCardioSetDistanceWhereInput | CoreCardioSetDistanceWhereInput[]
    OR?: CoreCardioSetDistanceWhereInput[]
    NOT?: CoreCardioSetDistanceWhereInput | CoreCardioSetDistanceWhereInput[]
    coreCardioSetId?: StringFilter<"CoreCardioSetDistance"> | string
    distance?: FloatNullableFilter<"CoreCardioSetDistance"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }, "id">

  export type CoreCardioSetDistanceOrderByWithAggregationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    distance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreCardioSetDistanceCountOrderByAggregateInput
    _avg?: CoreCardioSetDistanceAvgOrderByAggregateInput
    _max?: CoreCardioSetDistanceMaxOrderByAggregateInput
    _min?: CoreCardioSetDistanceMinOrderByAggregateInput
    _sum?: CoreCardioSetDistanceSumOrderByAggregateInput
  }

  export type CoreCardioSetDistanceScalarWhereWithAggregatesInput = {
    AND?: CoreCardioSetDistanceScalarWhereWithAggregatesInput | CoreCardioSetDistanceScalarWhereWithAggregatesInput[]
    OR?: CoreCardioSetDistanceScalarWhereWithAggregatesInput[]
    NOT?: CoreCardioSetDistanceScalarWhereWithAggregatesInput | CoreCardioSetDistanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreCardioSetDistance"> | string
    coreCardioSetId?: StringWithAggregatesFilter<"CoreCardioSetDistance"> | string
    distance?: FloatNullableWithAggregatesFilter<"CoreCardioSetDistance"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreCardioSetDistance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreCardioSetDistance"> | Date | string
  }

  export type CoreCardioSetAvgSpeedWhereInput = {
    AND?: CoreCardioSetAvgSpeedWhereInput | CoreCardioSetAvgSpeedWhereInput[]
    OR?: CoreCardioSetAvgSpeedWhereInput[]
    NOT?: CoreCardioSetAvgSpeedWhereInput | CoreCardioSetAvgSpeedWhereInput[]
    id?: StringFilter<"CoreCardioSetAvgSpeed"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetAvgSpeed"> | string
    avgSpeed?: FloatNullableFilter<"CoreCardioSetAvgSpeed"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }

  export type CoreCardioSetAvgSpeedOrderByWithRelationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreCardioSet?: CoreCardioSetOrderByWithRelationInput
  }

  export type CoreCardioSetAvgSpeedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreCardioSetAvgSpeedWhereInput | CoreCardioSetAvgSpeedWhereInput[]
    OR?: CoreCardioSetAvgSpeedWhereInput[]
    NOT?: CoreCardioSetAvgSpeedWhereInput | CoreCardioSetAvgSpeedWhereInput[]
    coreCardioSetId?: StringFilter<"CoreCardioSetAvgSpeed"> | string
    avgSpeed?: FloatNullableFilter<"CoreCardioSetAvgSpeed"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }, "id">

  export type CoreCardioSetAvgSpeedOrderByWithAggregationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreCardioSetAvgSpeedCountOrderByAggregateInput
    _avg?: CoreCardioSetAvgSpeedAvgOrderByAggregateInput
    _max?: CoreCardioSetAvgSpeedMaxOrderByAggregateInput
    _min?: CoreCardioSetAvgSpeedMinOrderByAggregateInput
    _sum?: CoreCardioSetAvgSpeedSumOrderByAggregateInput
  }

  export type CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput = {
    AND?: CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput | CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput[]
    OR?: CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput[]
    NOT?: CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput | CoreCardioSetAvgSpeedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreCardioSetAvgSpeed"> | string
    coreCardioSetId?: StringWithAggregatesFilter<"CoreCardioSetAvgSpeed"> | string
    avgSpeed?: FloatNullableWithAggregatesFilter<"CoreCardioSetAvgSpeed"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreCardioSetAvgSpeed"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreCardioSetAvgSpeed"> | Date | string
  }

  export type CoreCardioSetWorkoutTimeWhereInput = {
    AND?: CoreCardioSetWorkoutTimeWhereInput | CoreCardioSetWorkoutTimeWhereInput[]
    OR?: CoreCardioSetWorkoutTimeWhereInput[]
    NOT?: CoreCardioSetWorkoutTimeWhereInput | CoreCardioSetWorkoutTimeWhereInput[]
    id?: StringFilter<"CoreCardioSetWorkoutTime"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetWorkoutTime"> | string
    workTime?: IntNullableFilter<"CoreCardioSetWorkoutTime"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }

  export type CoreCardioSetWorkoutTimeOrderByWithRelationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    workTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreCardioSet?: CoreCardioSetOrderByWithRelationInput
  }

  export type CoreCardioSetWorkoutTimeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreCardioSetWorkoutTimeWhereInput | CoreCardioSetWorkoutTimeWhereInput[]
    OR?: CoreCardioSetWorkoutTimeWhereInput[]
    NOT?: CoreCardioSetWorkoutTimeWhereInput | CoreCardioSetWorkoutTimeWhereInput[]
    coreCardioSetId?: StringFilter<"CoreCardioSetWorkoutTime"> | string
    workTime?: IntNullableFilter<"CoreCardioSetWorkoutTime"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
    coreCardioSet?: XOR<CoreCardioSetScalarRelationFilter, CoreCardioSetWhereInput>
  }, "id">

  export type CoreCardioSetWorkoutTimeOrderByWithAggregationInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    workTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreCardioSetWorkoutTimeCountOrderByAggregateInput
    _avg?: CoreCardioSetWorkoutTimeAvgOrderByAggregateInput
    _max?: CoreCardioSetWorkoutTimeMaxOrderByAggregateInput
    _min?: CoreCardioSetWorkoutTimeMinOrderByAggregateInput
    _sum?: CoreCardioSetWorkoutTimeSumOrderByAggregateInput
  }

  export type CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput = {
    AND?: CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput | CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput[]
    OR?: CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput[]
    NOT?: CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput | CoreCardioSetWorkoutTimeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreCardioSetWorkoutTime"> | string
    coreCardioSetId?: StringWithAggregatesFilter<"CoreCardioSetWorkoutTime"> | string
    workTime?: IntNullableWithAggregatesFilter<"CoreCardioSetWorkoutTime"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreCardioSetWorkoutTime"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreCardioSetWorkoutTime"> | Date | string
  }

  export type UserCardioSetWhereInput = {
    AND?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    OR?: UserCardioSetWhereInput[]
    NOT?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    id?: StringFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    calorieTarget?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }

  export type UserCardioSetOrderByWithRelationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    workTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    calorieTarget?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userWorkoutExercise?: UserWorkoutExerciseOrderByWithRelationInput
  }

  export type UserCardioSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    OR?: UserCardioSetWhereInput[]
    NOT?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    calorieTarget?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }, "id">

  export type UserCardioSetOrderByWithAggregationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    workTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    calorieTarget?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCardioSetCountOrderByAggregateInput
    _avg?: UserCardioSetAvgOrderByAggregateInput
    _max?: UserCardioSetMaxOrderByAggregateInput
    _min?: UserCardioSetMinOrderByAggregateInput
    _sum?: UserCardioSetSumOrderByAggregateInput
  }

  export type UserCardioSetScalarWhereWithAggregatesInput = {
    AND?: UserCardioSetScalarWhereWithAggregatesInput | UserCardioSetScalarWhereWithAggregatesInput[]
    OR?: UserCardioSetScalarWhereWithAggregatesInput[]
    NOT?: UserCardioSetScalarWhereWithAggregatesInput | UserCardioSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    order?: IntWithAggregatesFilter<"UserCardioSet"> | number
    isCompleted?: BoolWithAggregatesFilter<"UserCardioSet"> | boolean
    calorieTarget?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringWithAggregatesFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableWithAggregatesFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserCardioSet"> | Date | string
  }

  export type CoreStrengthSetWhereInput = {
    AND?: CoreStrengthSetWhereInput | CoreStrengthSetWhereInput[]
    OR?: CoreStrengthSetWhereInput[]
    NOT?: CoreStrengthSetWhereInput | CoreStrengthSetWhereInput[]
    id?: StringFilter<"CoreStrengthSet"> | string
    restTime?: IntFilter<"CoreStrengthSet"> | number
    numberOfSets?: IntFilter<"CoreStrengthSet"> | number
    hasWarmup?: BoolFilter<"CoreStrengthSet"> | boolean
    createdAt?: DateTimeFilter<"CoreStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSet"> | Date | string
    workoutExercise?: WorkoutExerciseListRelationFilter
    reps?: CoreStrengthSetRepsListRelationFilter
    weight?: CoreStrengthSetWeightListRelationFilter
  }

  export type CoreStrengthSetOrderByWithRelationInput = {
    id?: SortOrder
    restTime?: SortOrder
    numberOfSets?: SortOrder
    hasWarmup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workoutExercise?: WorkoutExerciseOrderByRelationAggregateInput
    reps?: CoreStrengthSetRepsOrderByRelationAggregateInput
    weight?: CoreStrengthSetWeightOrderByRelationAggregateInput
  }

  export type CoreStrengthSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreStrengthSetWhereInput | CoreStrengthSetWhereInput[]
    OR?: CoreStrengthSetWhereInput[]
    NOT?: CoreStrengthSetWhereInput | CoreStrengthSetWhereInput[]
    restTime?: IntFilter<"CoreStrengthSet"> | number
    numberOfSets?: IntFilter<"CoreStrengthSet"> | number
    hasWarmup?: BoolFilter<"CoreStrengthSet"> | boolean
    createdAt?: DateTimeFilter<"CoreStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSet"> | Date | string
    workoutExercise?: WorkoutExerciseListRelationFilter
    reps?: CoreStrengthSetRepsListRelationFilter
    weight?: CoreStrengthSetWeightListRelationFilter
  }, "id">

  export type CoreStrengthSetOrderByWithAggregationInput = {
    id?: SortOrder
    restTime?: SortOrder
    numberOfSets?: SortOrder
    hasWarmup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreStrengthSetCountOrderByAggregateInput
    _avg?: CoreStrengthSetAvgOrderByAggregateInput
    _max?: CoreStrengthSetMaxOrderByAggregateInput
    _min?: CoreStrengthSetMinOrderByAggregateInput
    _sum?: CoreStrengthSetSumOrderByAggregateInput
  }

  export type CoreStrengthSetScalarWhereWithAggregatesInput = {
    AND?: CoreStrengthSetScalarWhereWithAggregatesInput | CoreStrengthSetScalarWhereWithAggregatesInput[]
    OR?: CoreStrengthSetScalarWhereWithAggregatesInput[]
    NOT?: CoreStrengthSetScalarWhereWithAggregatesInput | CoreStrengthSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreStrengthSet"> | string
    restTime?: IntWithAggregatesFilter<"CoreStrengthSet"> | number
    numberOfSets?: IntWithAggregatesFilter<"CoreStrengthSet"> | number
    hasWarmup?: BoolWithAggregatesFilter<"CoreStrengthSet"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CoreStrengthSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreStrengthSet"> | Date | string
  }

  export type CoreStrengthSetRepsWhereInput = {
    AND?: CoreStrengthSetRepsWhereInput | CoreStrengthSetRepsWhereInput[]
    OR?: CoreStrengthSetRepsWhereInput[]
    NOT?: CoreStrengthSetRepsWhereInput | CoreStrengthSetRepsWhereInput[]
    id?: StringFilter<"CoreStrengthSetReps"> | string
    coreStrengthSetId?: StringFilter<"CoreStrengthSetReps"> | string
    reps?: IntFilter<"CoreStrengthSetReps"> | number
    createdAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetScalarRelationFilter, CoreStrengthSetWhereInput>
  }

  export type CoreStrengthSetRepsOrderByWithRelationInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    reps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreStrengthSet?: CoreStrengthSetOrderByWithRelationInput
  }

  export type CoreStrengthSetRepsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreStrengthSetRepsWhereInput | CoreStrengthSetRepsWhereInput[]
    OR?: CoreStrengthSetRepsWhereInput[]
    NOT?: CoreStrengthSetRepsWhereInput | CoreStrengthSetRepsWhereInput[]
    coreStrengthSetId?: StringFilter<"CoreStrengthSetReps"> | string
    reps?: IntFilter<"CoreStrengthSetReps"> | number
    createdAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetScalarRelationFilter, CoreStrengthSetWhereInput>
  }, "id">

  export type CoreStrengthSetRepsOrderByWithAggregationInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    reps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreStrengthSetRepsCountOrderByAggregateInput
    _avg?: CoreStrengthSetRepsAvgOrderByAggregateInput
    _max?: CoreStrengthSetRepsMaxOrderByAggregateInput
    _min?: CoreStrengthSetRepsMinOrderByAggregateInput
    _sum?: CoreStrengthSetRepsSumOrderByAggregateInput
  }

  export type CoreStrengthSetRepsScalarWhereWithAggregatesInput = {
    AND?: CoreStrengthSetRepsScalarWhereWithAggregatesInput | CoreStrengthSetRepsScalarWhereWithAggregatesInput[]
    OR?: CoreStrengthSetRepsScalarWhereWithAggregatesInput[]
    NOT?: CoreStrengthSetRepsScalarWhereWithAggregatesInput | CoreStrengthSetRepsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreStrengthSetReps"> | string
    coreStrengthSetId?: StringWithAggregatesFilter<"CoreStrengthSetReps"> | string
    reps?: IntWithAggregatesFilter<"CoreStrengthSetReps"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CoreStrengthSetReps"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreStrengthSetReps"> | Date | string
  }

  export type CoreStrengthSetWeightWhereInput = {
    AND?: CoreStrengthSetWeightWhereInput | CoreStrengthSetWeightWhereInput[]
    OR?: CoreStrengthSetWeightWhereInput[]
    NOT?: CoreStrengthSetWeightWhereInput | CoreStrengthSetWeightWhereInput[]
    id?: StringFilter<"CoreStrengthSetWeight"> | string
    coreStrengthSetId?: StringFilter<"CoreStrengthSetWeight"> | string
    isBodyWeight?: BoolFilter<"CoreStrengthSetWeight"> | boolean
    weight?: FloatNullableFilter<"CoreStrengthSetWeight"> | number | null
    createdAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetScalarRelationFilter, CoreStrengthSetWhereInput>
  }

  export type CoreStrengthSetWeightOrderByWithRelationInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    isBodyWeight?: SortOrder
    weight?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreStrengthSet?: CoreStrengthSetOrderByWithRelationInput
  }

  export type CoreStrengthSetWeightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoreStrengthSetWeightWhereInput | CoreStrengthSetWeightWhereInput[]
    OR?: CoreStrengthSetWeightWhereInput[]
    NOT?: CoreStrengthSetWeightWhereInput | CoreStrengthSetWeightWhereInput[]
    coreStrengthSetId?: StringFilter<"CoreStrengthSetWeight"> | string
    isBodyWeight?: BoolFilter<"CoreStrengthSetWeight"> | boolean
    weight?: FloatNullableFilter<"CoreStrengthSetWeight"> | number | null
    createdAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetScalarRelationFilter, CoreStrengthSetWhereInput>
  }, "id">

  export type CoreStrengthSetWeightOrderByWithAggregationInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    isBodyWeight?: SortOrder
    weight?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoreStrengthSetWeightCountOrderByAggregateInput
    _avg?: CoreStrengthSetWeightAvgOrderByAggregateInput
    _max?: CoreStrengthSetWeightMaxOrderByAggregateInput
    _min?: CoreStrengthSetWeightMinOrderByAggregateInput
    _sum?: CoreStrengthSetWeightSumOrderByAggregateInput
  }

  export type CoreStrengthSetWeightScalarWhereWithAggregatesInput = {
    AND?: CoreStrengthSetWeightScalarWhereWithAggregatesInput | CoreStrengthSetWeightScalarWhereWithAggregatesInput[]
    OR?: CoreStrengthSetWeightScalarWhereWithAggregatesInput[]
    NOT?: CoreStrengthSetWeightScalarWhereWithAggregatesInput | CoreStrengthSetWeightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoreStrengthSetWeight"> | string
    coreStrengthSetId?: StringWithAggregatesFilter<"CoreStrengthSetWeight"> | string
    isBodyWeight?: BoolWithAggregatesFilter<"CoreStrengthSetWeight"> | boolean
    weight?: FloatNullableWithAggregatesFilter<"CoreStrengthSetWeight"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoreStrengthSetWeight"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoreStrengthSetWeight"> | Date | string
  }

  export type UserStrengthSetWhereInput = {
    AND?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    OR?: UserStrengthSetWhereInput[]
    NOT?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    id?: StringFilter<"UserStrengthSet"> | string
    reps?: IntFilter<"UserStrengthSet"> | number
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }

  export type UserStrengthSetOrderByWithRelationInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrderInput | SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userWorkoutExercise?: UserWorkoutExerciseOrderByWithRelationInput
  }

  export type UserStrengthSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    OR?: UserStrengthSetWhereInput[]
    NOT?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    reps?: IntFilter<"UserStrengthSet"> | number
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }, "id">

  export type UserStrengthSetOrderByWithAggregationInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrderInput | SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStrengthSetCountOrderByAggregateInput
    _avg?: UserStrengthSetAvgOrderByAggregateInput
    _max?: UserStrengthSetMaxOrderByAggregateInput
    _min?: UserStrengthSetMinOrderByAggregateInput
    _sum?: UserStrengthSetSumOrderByAggregateInput
  }

  export type UserStrengthSetScalarWhereWithAggregatesInput = {
    AND?: UserStrengthSetScalarWhereWithAggregatesInput | UserStrengthSetScalarWhereWithAggregatesInput[]
    OR?: UserStrengthSetScalarWhereWithAggregatesInput[]
    NOT?: UserStrengthSetScalarWhereWithAggregatesInput | UserStrengthSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStrengthSet"> | string
    reps?: IntWithAggregatesFilter<"UserStrengthSet"> | number
    weight?: FloatNullableWithAggregatesFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    restTime?: IntWithAggregatesFilter<"UserStrengthSet"> | number
    order?: IntWithAggregatesFilter<"UserStrengthSet"> | number
    isCompleted?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableWithAggregatesFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringWithAggregatesFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStrengthSet"> | Date | string
  }

  export type ProgramWhereInput = {
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProgramOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    programWorkouts?: ProgramWorkoutOrderByRelationAggregateInput
    userWorkout?: UserWorkoutOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
  }

  export type ProgramWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProgramOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgramCountOrderByAggregateInput
    _max?: ProgramMaxOrderByAggregateInput
    _min?: ProgramMinOrderByAggregateInput
  }

  export type ProgramScalarWhereWithAggregatesInput = {
    AND?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    OR?: ProgramScalarWhereWithAggregatesInput[]
    NOT?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Program"> | string
    name?: StringWithAggregatesFilter<"Program"> | string
    notes?: StringNullableWithAggregatesFilter<"Program"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Program"> | boolean
    ownerId?: StringWithAggregatesFilter<"Program"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
  }

  export type ProgramWorkoutWhereInput = {
    AND?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    OR?: ProgramWorkoutWhereInput[]
    NOT?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    id?: StringFilter<"ProgramWorkout"> | string
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
  }

  export type ProgramWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    program?: ProgramOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type ProgramWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    programId_workoutId?: ProgramWorkoutProgramIdWorkoutIdCompoundUniqueInput
    AND?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    OR?: ProgramWorkoutWhereInput[]
    NOT?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
  }, "id" | "programId_workoutId">

  export type ProgramWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgramWorkoutCountOrderByAggregateInput
    _max?: ProgramWorkoutMaxOrderByAggregateInput
    _min?: ProgramWorkoutMinOrderByAggregateInput
  }

  export type ProgramWorkoutScalarWhereWithAggregatesInput = {
    AND?: ProgramWorkoutScalarWhereWithAggregatesInput | ProgramWorkoutScalarWhereWithAggregatesInput[]
    OR?: ProgramWorkoutScalarWhereWithAggregatesInput[]
    NOT?: ProgramWorkoutScalarWhereWithAggregatesInput | ProgramWorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    programId?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    workoutId?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeWithAggregatesFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProgramWorkout"> | Date | string
  }

  export type WorkoutWhereInput = {
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringNullableFilter<"Workout"> | string | null
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workoutExercises?: WorkoutExerciseListRelationFilter
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkouts?: UserWorkoutListRelationFilter
  }

  export type WorkoutOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    workoutExercises?: WorkoutExerciseOrderByRelationAggregateInput
    programWorkouts?: ProgramWorkoutOrderByRelationAggregateInput
    userWorkouts?: UserWorkoutOrderByRelationAggregateInput
  }

  export type WorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    name?: StringNullableFilter<"Workout"> | string | null
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workoutExercises?: WorkoutExerciseListRelationFilter
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkouts?: UserWorkoutListRelationFilter
  }, "id">

  export type WorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkoutCountOrderByAggregateInput
    _max?: WorkoutMaxOrderByAggregateInput
    _min?: WorkoutMinOrderByAggregateInput
  }

  export type WorkoutScalarWhereWithAggregatesInput = {
    AND?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    OR?: WorkoutScalarWhereWithAggregatesInput[]
    NOT?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workout"> | string
    name?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    ownerId?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
  }

  export type WorkoutExerciseWhereInput = {
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    id?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreStrengthSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreCardioSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetNullableScalarRelationFilter, CoreStrengthSetWhereInput> | null
    coreCardioSet?: XOR<CoreCardioSetNullableScalarRelationFilter, CoreCardioSetWhereInput> | null
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
  }

  export type WorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrderInput | SortOrder
    coreStrengthSetId?: SortOrderInput | SortOrder
    coreCardioSetId?: SortOrderInput | SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coreStrengthSet?: CoreStrengthSetOrderByWithRelationInput
    coreCardioSet?: CoreCardioSetOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
    userWorkoutExercises?: UserWorkoutExerciseOrderByRelationAggregateInput
  }

  export type WorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreStrengthSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreCardioSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    coreStrengthSet?: XOR<CoreStrengthSetNullableScalarRelationFilter, CoreStrengthSetWhereInput> | null
    coreCardioSet?: XOR<CoreCardioSetNullableScalarRelationFilter, CoreCardioSetWhereInput> | null
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
  }, "id">

  export type WorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrderInput | SortOrder
    coreStrengthSetId?: SortOrderInput | SortOrder
    coreCardioSetId?: SortOrderInput | SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkoutExerciseCountOrderByAggregateInput
    _avg?: WorkoutExerciseAvgOrderByAggregateInput
    _max?: WorkoutExerciseMaxOrderByAggregateInput
    _min?: WorkoutExerciseMinOrderByAggregateInput
    _sum?: WorkoutExerciseSumOrderByAggregateInput
  }

  export type WorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    order?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    notes?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    coreStrengthSetId?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    coreCardioSetId?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    exerciseId?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    workoutId?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkoutExercise"> | Date | string
  }

  export type UserWorkoutExerciseWhereInput = {
    AND?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    OR?: UserWorkoutExerciseWhereInput[]
    NOT?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    id?: StringFilter<"UserWorkoutExercise"> | string
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
    workoutExercise?: XOR<WorkoutExerciseScalarRelationFilter, WorkoutExerciseWhereInput>
    userWorkout?: XOR<UserWorkoutScalarRelationFilter, UserWorkoutWhereInput>
    userStrengthSet?: UserStrengthSetListRelationFilter
    userCardioSet?: UserCardioSetListRelationFilter
  }

  export type UserWorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
    workoutExercise?: WorkoutExerciseOrderByWithRelationInput
    userWorkout?: UserWorkoutOrderByWithRelationInput
    userStrengthSet?: UserStrengthSetOrderByRelationAggregateInput
    userCardioSet?: UserCardioSetOrderByRelationAggregateInput
  }

  export type UserWorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    OR?: UserWorkoutExerciseWhereInput[]
    NOT?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
    workoutExercise?: XOR<WorkoutExerciseScalarRelationFilter, WorkoutExerciseWhereInput>
    userWorkout?: XOR<UserWorkoutScalarRelationFilter, UserWorkoutWhereInput>
    userStrengthSet?: UserStrengthSetListRelationFilter
    userCardioSet?: UserCardioSetListRelationFilter
  }, "id">

  export type UserWorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
    _count?: UserWorkoutExerciseCountOrderByAggregateInput
    _max?: UserWorkoutExerciseMaxOrderByAggregateInput
    _min?: UserWorkoutExerciseMinOrderByAggregateInput
  }

  export type UserWorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: UserWorkoutExerciseScalarWhereWithAggregatesInput | UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: UserWorkoutExerciseScalarWhereWithAggregatesInput | UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
    workoutExerciseId?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
  }

  export type UserWorkoutWhereInput = {
    AND?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    OR?: UserWorkoutWhereInput[]
    NOT?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    id?: StringFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workout?: XOR<WorkoutNullableScalarRelationFilter, WorkoutWhereInput> | null
  }

  export type UserWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    dateCompleted?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    programId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    userWorkoutExercises?: UserWorkoutExerciseOrderByRelationAggregateInput
    program?: ProgramOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type UserWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    OR?: UserWorkoutWhereInput[]
    NOT?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workout?: XOR<WorkoutNullableScalarRelationFilter, WorkoutWhereInput> | null
  }, "id">

  export type UserWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    dateCompleted?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    programId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserWorkoutCountOrderByAggregateInput
    _max?: UserWorkoutMaxOrderByAggregateInput
    _min?: UserWorkoutMinOrderByAggregateInput
  }

  export type UserWorkoutScalarWhereWithAggregatesInput = {
    AND?: UserWorkoutScalarWhereWithAggregatesInput | UserWorkoutScalarWhereWithAggregatesInput[]
    OR?: UserWorkoutScalarWhereWithAggregatesInput[]
    NOT?: UserWorkoutScalarWhereWithAggregatesInput | UserWorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableWithAggregatesFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringWithAggregatesFilter<"UserWorkout"> | string
    programId?: StringNullableWithAggregatesFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableWithAggregatesFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserWorkout"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCreateInput = {
    id?: string
    name: string
    youtubeUrl: string
    type?: $Enums.ExerciseType
    notes?: string | null
    equipment?: ExerciseCreateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseCreatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    name: string
    youtubeUrl: string
    type?: $Enums.ExerciseType
    notes?: string | null
    equipment?: ExerciseCreateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseCreatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    name: string
    youtubeUrl: string
    type?: $Enums.ExerciseType
    notes?: string | null
    equipment?: ExerciseCreateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseCreatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCreateInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetCreateManyInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetCreateInput = {
    id?: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreCardioSet: CoreCardioSetCreateNestedOneWithoutCalorieTargetInput
  }

  export type CoreCardioSetCalorieTargetUncheckedCreateInput = {
    id?: string
    coreCardioSetId: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetCalorieTargetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreCardioSet?: CoreCardioSetUpdateOneRequiredWithoutCalorieTargetNestedInput
  }

  export type CoreCardioSetCalorieTargetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetCreateManyInput = {
    id?: string
    coreCardioSetId: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetCalorieTargetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceCreateInput = {
    id?: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreCardioSet: CoreCardioSetCreateNestedOneWithoutDistanceInput
  }

  export type CoreCardioSetDistanceUncheckedCreateInput = {
    id?: string
    coreCardioSetId: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetDistanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreCardioSet?: CoreCardioSetUpdateOneRequiredWithoutDistanceNestedInput
  }

  export type CoreCardioSetDistanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceCreateManyInput = {
    id?: string
    coreCardioSetId: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetDistanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedCreateInput = {
    id?: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreCardioSet: CoreCardioSetCreateNestedOneWithoutAvgSpeedInput
  }

  export type CoreCardioSetAvgSpeedUncheckedCreateInput = {
    id?: string
    coreCardioSetId: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetAvgSpeedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreCardioSet?: CoreCardioSetUpdateOneRequiredWithoutAvgSpeedNestedInput
  }

  export type CoreCardioSetAvgSpeedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedCreateManyInput = {
    id?: string
    coreCardioSetId: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetAvgSpeedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeCreateInput = {
    id?: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreCardioSet: CoreCardioSetCreateNestedOneWithoutWorkTimeInput
  }

  export type CoreCardioSetWorkoutTimeUncheckedCreateInput = {
    id?: string
    coreCardioSetId: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetWorkoutTimeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreCardioSet?: CoreCardioSetUpdateOneRequiredWithoutWorkTimeNestedInput
  }

  export type CoreCardioSetWorkoutTimeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeCreateManyInput = {
    id?: string
    coreCardioSetId: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetWorkoutTimeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreCardioSetId?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetCreateInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercise: UserWorkoutExerciseCreateNestedOneWithoutUserCardioSetInput
  }

  export type UserCardioSetUncheckedCreateInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    userWorkoutExerciseId: string
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercise?: UserWorkoutExerciseUpdateOneRequiredWithoutUserCardioSetNestedInput
  }

  export type UserCardioSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetCreateManyInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    userWorkoutExerciseId: string
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetCreateInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreStrengthSetInput
    reps?: CoreStrengthSetRepsCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetUncheckedCreateInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreStrengthSetInput
    reps?: CoreStrengthSetRepsUncheckedCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightUncheckedCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreStrengthSetNestedInput
    reps?: CoreStrengthSetRepsUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
    reps?: CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetCreateManyInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsCreateInput = {
    id?: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet: CoreStrengthSetCreateNestedOneWithoutRepsInput
  }

  export type CoreStrengthSetRepsUncheckedCreateInput = {
    id?: string
    coreStrengthSetId: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetRepsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneRequiredWithoutRepsNestedInput
  }

  export type CoreStrengthSetRepsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreStrengthSetId?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsCreateManyInput = {
    id?: string
    coreStrengthSetId: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetRepsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreStrengthSetId?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightCreateInput = {
    id?: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet: CoreStrengthSetCreateNestedOneWithoutWeightInput
  }

  export type CoreStrengthSetWeightUncheckedCreateInput = {
    id?: string
    coreStrengthSetId: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetWeightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneRequiredWithoutWeightNestedInput
  }

  export type CoreStrengthSetWeightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreStrengthSetId?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightCreateManyInput = {
    id?: string
    coreStrengthSetId: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetWeightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coreStrengthSetId?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetCreateInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercise: UserWorkoutExerciseCreateNestedOneWithoutUserStrengthSetInput
  }

  export type UserStrengthSetUncheckedCreateInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    userWorkoutExerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercise?: UserWorkoutExerciseUpdateOneRequiredWithoutUserStrengthSetNestedInput
  }

  export type UserStrengthSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetCreateManyInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    userWorkoutExerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramCreateInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramCreateManyInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateInput = {
    id?: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutProgramWorkoutsInput
    workout: WorkoutCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateInput = {
    id?: string
    programId: string
    workoutId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateManyInput = {
    id?: string
    programId: string
    workoutId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutCreateInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateInput = {
    id?: string
    name?: string | null
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutCreateManyInput = {
    id?: string
    name?: string | null
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet?: CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput
    coreCardioSet?: CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput
    coreCardioSet?: CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseCreateManyInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateInput = {
    id?: string
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSet?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateInput = {
    id?: string
    workoutExerciseId: string
    userWorkoutId: string
    userStrengthSet?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSet?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSet?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseCreateManyInput = {
    id?: string
    workoutExerciseId: string
    userWorkoutId: string
  }

  export type UserWorkoutExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserWorkoutExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
  }

  export type UserWorkoutCreateInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutCreateManyInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type UserWorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProgramListRelationFilter = {
    every?: ProgramWhereInput
    some?: ProgramWhereInput
    none?: ProgramWhereInput
  }

  export type WorkoutListRelationFilter = {
    every?: WorkoutWhereInput
    some?: WorkoutWhereInput
    none?: WorkoutWhereInput
  }

  export type UserWorkoutListRelationFilter = {
    every?: UserWorkoutWhereInput
    some?: UserWorkoutWhereInput
    none?: UserWorkoutWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type EnumExerciseEquipmentNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseEquipment[] | ListEnumExerciseEquipmentFieldRefInput<$PrismaModel> | null
    has?: $Enums.ExerciseEquipment | EnumExerciseEquipmentFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ExerciseEquipment[] | ListEnumExerciseEquipmentFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ExerciseEquipment[] | ListEnumExerciseEquipmentFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumExerciseMuscleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseMuscle[] | ListEnumExerciseMuscleFieldRefInput<$PrismaModel> | null
    has?: $Enums.ExerciseMuscle | EnumExerciseMuscleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ExerciseMuscle[] | ListEnumExerciseMuscleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ExerciseMuscle[] | ListEnumExerciseMuscleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type WorkoutExerciseListRelationFilter = {
    every?: WorkoutExerciseWhereInput
    some?: WorkoutExerciseWhereInput
    none?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    equipment?: SortOrder
    muscles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CoreCardioSetWorkoutTimeListRelationFilter = {
    every?: CoreCardioSetWorkoutTimeWhereInput
    some?: CoreCardioSetWorkoutTimeWhereInput
    none?: CoreCardioSetWorkoutTimeWhereInput
  }

  export type CoreCardioSetAvgSpeedListRelationFilter = {
    every?: CoreCardioSetAvgSpeedWhereInput
    some?: CoreCardioSetAvgSpeedWhereInput
    none?: CoreCardioSetAvgSpeedWhereInput
  }

  export type CoreCardioSetDistanceListRelationFilter = {
    every?: CoreCardioSetDistanceWhereInput
    some?: CoreCardioSetDistanceWhereInput
    none?: CoreCardioSetDistanceWhereInput
  }

  export type CoreCardioSetCalorieTargetListRelationFilter = {
    every?: CoreCardioSetCalorieTargetWhereInput
    some?: CoreCardioSetCalorieTargetWhereInput
    none?: CoreCardioSetCalorieTargetWhereInput
  }

  export type CoreCardioSetWorkoutTimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreCardioSetAvgSpeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreCardioSetDistanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreCardioSetCalorieTargetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreCardioSetCountOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    avgHeartRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetAvgOrderByAggregateInput = {
    warmupTime?: SortOrder
    avgHeartRate?: SortOrder
  }

  export type CoreCardioSetMaxOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    avgHeartRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetMinOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    avgHeartRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetSumOrderByAggregateInput = {
    warmupTime?: SortOrder
    avgHeartRate?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CoreCardioSetScalarRelationFilter = {
    is?: CoreCardioSetWhereInput
    isNot?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetCalorieTargetCountOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    calorieTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetCalorieTargetAvgOrderByAggregateInput = {
    calorieTarget?: SortOrder
  }

  export type CoreCardioSetCalorieTargetMaxOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    calorieTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetCalorieTargetMinOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    calorieTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetCalorieTargetSumOrderByAggregateInput = {
    calorieTarget?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CoreCardioSetDistanceCountOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    distance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetDistanceAvgOrderByAggregateInput = {
    distance?: SortOrder
  }

  export type CoreCardioSetDistanceMaxOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    distance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetDistanceMinOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    distance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetDistanceSumOrderByAggregateInput = {
    distance?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CoreCardioSetAvgSpeedCountOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    avgSpeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetAvgSpeedAvgOrderByAggregateInput = {
    avgSpeed?: SortOrder
  }

  export type CoreCardioSetAvgSpeedMaxOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    avgSpeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetAvgSpeedMinOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    avgSpeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetAvgSpeedSumOrderByAggregateInput = {
    avgSpeed?: SortOrder
  }

  export type CoreCardioSetWorkoutTimeCountOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    workTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetWorkoutTimeAvgOrderByAggregateInput = {
    workTime?: SortOrder
  }

  export type CoreCardioSetWorkoutTimeMaxOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    workTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetWorkoutTimeMinOrderByAggregateInput = {
    id?: SortOrder
    coreCardioSetId?: SortOrder
    workTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreCardioSetWorkoutTimeSumOrderByAggregateInput = {
    workTime?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserWorkoutExerciseScalarRelationFilter = {
    is?: UserWorkoutExerciseWhereInput
    isNot?: UserWorkoutExerciseWhereInput
  }

  export type UserCardioSetCountOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    calorieTarget?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetAvgOrderByAggregateInput = {
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    calorieTarget?: SortOrder
  }

  export type UserCardioSetMaxOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    calorieTarget?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetMinOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    calorieTarget?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetSumOrderByAggregateInput = {
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    calorieTarget?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CoreStrengthSetRepsListRelationFilter = {
    every?: CoreStrengthSetRepsWhereInput
    some?: CoreStrengthSetRepsWhereInput
    none?: CoreStrengthSetRepsWhereInput
  }

  export type CoreStrengthSetWeightListRelationFilter = {
    every?: CoreStrengthSetWeightWhereInput
    some?: CoreStrengthSetWeightWhereInput
    none?: CoreStrengthSetWeightWhereInput
  }

  export type CoreStrengthSetRepsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreStrengthSetWeightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoreStrengthSetCountOrderByAggregateInput = {
    id?: SortOrder
    restTime?: SortOrder
    numberOfSets?: SortOrder
    hasWarmup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetAvgOrderByAggregateInput = {
    restTime?: SortOrder
    numberOfSets?: SortOrder
  }

  export type CoreStrengthSetMaxOrderByAggregateInput = {
    id?: SortOrder
    restTime?: SortOrder
    numberOfSets?: SortOrder
    hasWarmup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetMinOrderByAggregateInput = {
    id?: SortOrder
    restTime?: SortOrder
    numberOfSets?: SortOrder
    hasWarmup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetSumOrderByAggregateInput = {
    restTime?: SortOrder
    numberOfSets?: SortOrder
  }

  export type CoreStrengthSetScalarRelationFilter = {
    is?: CoreStrengthSetWhereInput
    isNot?: CoreStrengthSetWhereInput
  }

  export type CoreStrengthSetRepsCountOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    reps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetRepsAvgOrderByAggregateInput = {
    reps?: SortOrder
  }

  export type CoreStrengthSetRepsMaxOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    reps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetRepsMinOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    reps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetRepsSumOrderByAggregateInput = {
    reps?: SortOrder
  }

  export type CoreStrengthSetWeightCountOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    isBodyWeight?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetWeightAvgOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type CoreStrengthSetWeightMaxOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    isBodyWeight?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetWeightMinOrderByAggregateInput = {
    id?: SortOrder
    coreStrengthSetId?: SortOrder
    isBodyWeight?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetWeightSumOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type UserStrengthSetCountOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetAvgOrderByAggregateInput = {
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type UserStrengthSetMaxOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetMinOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetSumOrderByAggregateInput = {
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type ProgramWorkoutListRelationFilter = {
    every?: ProgramWorkoutWhereInput
    some?: ProgramWorkoutWhereInput
    none?: ProgramWorkoutWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProgramWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDaysOfWeekNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel> | null
    has?: $Enums.DaysOfWeek | EnumDaysOfWeekFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel>
    hasSome?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProgramScalarRelationFilter = {
    is?: ProgramWhereInput
    isNot?: ProgramWhereInput
  }

  export type WorkoutScalarRelationFilter = {
    is?: WorkoutWhereInput
    isNot?: WorkoutWhereInput
  }

  export type ProgramWorkoutProgramIdWorkoutIdCompoundUniqueInput = {
    programId: string
    workoutId: string
  }

  export type ProgramWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoreStrengthSetNullableScalarRelationFilter = {
    is?: CoreStrengthSetWhereInput | null
    isNot?: CoreStrengthSetWhereInput | null
  }

  export type CoreCardioSetNullableScalarRelationFilter = {
    is?: CoreCardioSetWhereInput | null
    isNot?: CoreCardioSetWhereInput | null
  }

  export type ExerciseScalarRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type UserWorkoutExerciseListRelationFilter = {
    every?: UserWorkoutExerciseWhereInput
    some?: UserWorkoutExerciseWhereInput
    none?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    coreStrengthSetId?: SortOrder
    coreCardioSetId?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type WorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    coreStrengthSetId?: SortOrder
    coreCardioSetId?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    coreStrengthSetId?: SortOrder
    coreCardioSetId?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type WorkoutExerciseScalarRelationFilter = {
    is?: WorkoutExerciseWhereInput
    isNot?: WorkoutExerciseWhereInput
  }

  export type UserWorkoutScalarRelationFilter = {
    is?: UserWorkoutWhereInput
    isNot?: UserWorkoutWhereInput
  }

  export type UserStrengthSetListRelationFilter = {
    every?: UserStrengthSetWhereInput
    some?: UserStrengthSetWhereInput
    none?: UserStrengthSetWhereInput
  }

  export type UserCardioSetListRelationFilter = {
    every?: UserCardioSetWhereInput
    some?: UserCardioSetWhereInput
    none?: UserCardioSetWhereInput
  }

  export type UserStrengthSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCardioSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type UserWorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type UserWorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProgramNullableScalarRelationFilter = {
    is?: ProgramWhereInput | null
    isNot?: ProgramWhereInput | null
  }

  export type WorkoutNullableScalarRelationFilter = {
    is?: WorkoutWhereInput | null
    isNot?: WorkoutWhereInput | null
  }

  export type UserWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProgramCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type WorkoutCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutOwnerInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type ProgramUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type WorkoutUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProgramUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutOwnerInput | ProgramUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutOwnerInput | ProgramUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutOwnerInput | ProgramUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type WorkoutUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutOwnerInput | WorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutOwnerInput | WorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutOwnerInput | WorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput | UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput | UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutOwnerInput | UserWorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type ProgramUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutOwnerInput | ProgramUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutOwnerInput | ProgramUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutOwnerInput | ProgramUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type WorkoutUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutOwnerInput | WorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutOwnerInput | WorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutOwnerInput | WorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput | UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput | UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutOwnerInput | UserWorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type ExerciseCreateequipmentInput = {
    set: $Enums.ExerciseEquipment[]
  }

  export type ExerciseCreatemusclesInput = {
    set: $Enums.ExerciseMuscle[]
  }

  export type WorkoutExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type EnumExerciseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ExerciseType
  }

  export type ExerciseUpdateequipmentInput = {
    set?: $Enums.ExerciseEquipment[]
    push?: $Enums.ExerciseEquipment | $Enums.ExerciseEquipment[]
  }

  export type ExerciseUpdatemusclesInput = {
    set?: $Enums.ExerciseMuscle[]
    push?: $Enums.ExerciseMuscle | $Enums.ExerciseMuscle[]
  }

  export type WorkoutExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput> | WorkoutExerciseCreateWithoutCoreCardioSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput | WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreCardioSetInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput[] | CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
  }

  export type CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput[] | CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetAvgSpeedCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
  }

  export type CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetDistanceCreateWithoutCoreCardioSetInput[] | CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetDistanceCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
  }

  export type CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput[] | CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetCalorieTargetCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput> | WorkoutExerciseCreateWithoutCoreCardioSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput | WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreCardioSetInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput[] | CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
  }

  export type CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput[] | CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetAvgSpeedCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
  }

  export type CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetDistanceCreateWithoutCoreCardioSetInput[] | CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetDistanceCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
  }

  export type CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput = {
    create?: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput[] | CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetCalorieTargetCreateManyCoreCardioSetInputEnvelope
    connect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput> | WorkoutExerciseCreateWithoutCoreCardioSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput | WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutCoreCardioSetInput | WorkoutExerciseUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreCardioSetInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutCoreCardioSetInput | WorkoutExerciseUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutCoreCardioSetInput | WorkoutExerciseUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput[] | CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetWorkoutTimeUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    disconnect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    delete?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    connect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    update?: CoreCardioSetWorkoutTimeUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetWorkoutTimeUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetWorkoutTimeScalarWhereInput | CoreCardioSetWorkoutTimeScalarWhereInput[]
  }

  export type CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput[] | CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetAvgSpeedUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetAvgSpeedCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    disconnect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    delete?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    connect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    update?: CoreCardioSetAvgSpeedUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetAvgSpeedUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetAvgSpeedScalarWhereInput | CoreCardioSetAvgSpeedScalarWhereInput[]
  }

  export type CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetDistanceCreateWithoutCoreCardioSetInput[] | CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetDistanceUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetDistanceUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetDistanceCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    disconnect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    delete?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    connect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    update?: CoreCardioSetDistanceUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetDistanceUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetDistanceUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetDistanceUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetDistanceScalarWhereInput | CoreCardioSetDistanceScalarWhereInput[]
  }

  export type CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput[] | CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetCalorieTargetUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetCalorieTargetCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    disconnect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    delete?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    connect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    update?: CoreCardioSetCalorieTargetUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetCalorieTargetUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetCalorieTargetScalarWhereInput | CoreCardioSetCalorieTargetScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput> | WorkoutExerciseCreateWithoutCoreCardioSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput | WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutCoreCardioSetInput | WorkoutExerciseUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreCardioSetInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutCoreCardioSetInput | WorkoutExerciseUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutCoreCardioSetInput | WorkoutExerciseUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput[] | CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetWorkoutTimeUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    disconnect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    delete?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    connect?: CoreCardioSetWorkoutTimeWhereUniqueInput | CoreCardioSetWorkoutTimeWhereUniqueInput[]
    update?: CoreCardioSetWorkoutTimeUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetWorkoutTimeUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetWorkoutTimeUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetWorkoutTimeScalarWhereInput | CoreCardioSetWorkoutTimeScalarWhereInput[]
  }

  export type CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput[] | CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetAvgSpeedUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetAvgSpeedCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    disconnect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    delete?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    connect?: CoreCardioSetAvgSpeedWhereUniqueInput | CoreCardioSetAvgSpeedWhereUniqueInput[]
    update?: CoreCardioSetAvgSpeedUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetAvgSpeedUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetAvgSpeedUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetAvgSpeedScalarWhereInput | CoreCardioSetAvgSpeedScalarWhereInput[]
  }

  export type CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetDistanceCreateWithoutCoreCardioSetInput[] | CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetDistanceUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetDistanceUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetDistanceCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    disconnect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    delete?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    connect?: CoreCardioSetDistanceWhereUniqueInput | CoreCardioSetDistanceWhereUniqueInput[]
    update?: CoreCardioSetDistanceUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetDistanceUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetDistanceUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetDistanceUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetDistanceScalarWhereInput | CoreCardioSetDistanceScalarWhereInput[]
  }

  export type CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput = {
    create?: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput> | CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput[] | CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput[]
    connectOrCreate?: CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput[]
    upsert?: CoreCardioSetCalorieTargetUpsertWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpsertWithWhereUniqueWithoutCoreCardioSetInput[]
    createMany?: CoreCardioSetCalorieTargetCreateManyCoreCardioSetInputEnvelope
    set?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    disconnect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    delete?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    connect?: CoreCardioSetCalorieTargetWhereUniqueInput | CoreCardioSetCalorieTargetWhereUniqueInput[]
    update?: CoreCardioSetCalorieTargetUpdateWithWhereUniqueWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpdateWithWhereUniqueWithoutCoreCardioSetInput[]
    updateMany?: CoreCardioSetCalorieTargetUpdateManyWithWhereWithoutCoreCardioSetInput | CoreCardioSetCalorieTargetUpdateManyWithWhereWithoutCoreCardioSetInput[]
    deleteMany?: CoreCardioSetCalorieTargetScalarWhereInput | CoreCardioSetCalorieTargetScalarWhereInput[]
  }

  export type CoreCardioSetCreateNestedOneWithoutCalorieTargetInput = {
    create?: XOR<CoreCardioSetCreateWithoutCalorieTargetInput, CoreCardioSetUncheckedCreateWithoutCalorieTargetInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutCalorieTargetInput
    connect?: CoreCardioSetWhereUniqueInput
  }

  export type CoreCardioSetUpdateOneRequiredWithoutCalorieTargetNestedInput = {
    create?: XOR<CoreCardioSetCreateWithoutCalorieTargetInput, CoreCardioSetUncheckedCreateWithoutCalorieTargetInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutCalorieTargetInput
    upsert?: CoreCardioSetUpsertWithoutCalorieTargetInput
    connect?: CoreCardioSetWhereUniqueInput
    update?: XOR<XOR<CoreCardioSetUpdateToOneWithWhereWithoutCalorieTargetInput, CoreCardioSetUpdateWithoutCalorieTargetInput>, CoreCardioSetUncheckedUpdateWithoutCalorieTargetInput>
  }

  export type CoreCardioSetCreateNestedOneWithoutDistanceInput = {
    create?: XOR<CoreCardioSetCreateWithoutDistanceInput, CoreCardioSetUncheckedCreateWithoutDistanceInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutDistanceInput
    connect?: CoreCardioSetWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoreCardioSetUpdateOneRequiredWithoutDistanceNestedInput = {
    create?: XOR<CoreCardioSetCreateWithoutDistanceInput, CoreCardioSetUncheckedCreateWithoutDistanceInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutDistanceInput
    upsert?: CoreCardioSetUpsertWithoutDistanceInput
    connect?: CoreCardioSetWhereUniqueInput
    update?: XOR<XOR<CoreCardioSetUpdateToOneWithWhereWithoutDistanceInput, CoreCardioSetUpdateWithoutDistanceInput>, CoreCardioSetUncheckedUpdateWithoutDistanceInput>
  }

  export type CoreCardioSetCreateNestedOneWithoutAvgSpeedInput = {
    create?: XOR<CoreCardioSetCreateWithoutAvgSpeedInput, CoreCardioSetUncheckedCreateWithoutAvgSpeedInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutAvgSpeedInput
    connect?: CoreCardioSetWhereUniqueInput
  }

  export type CoreCardioSetUpdateOneRequiredWithoutAvgSpeedNestedInput = {
    create?: XOR<CoreCardioSetCreateWithoutAvgSpeedInput, CoreCardioSetUncheckedCreateWithoutAvgSpeedInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutAvgSpeedInput
    upsert?: CoreCardioSetUpsertWithoutAvgSpeedInput
    connect?: CoreCardioSetWhereUniqueInput
    update?: XOR<XOR<CoreCardioSetUpdateToOneWithWhereWithoutAvgSpeedInput, CoreCardioSetUpdateWithoutAvgSpeedInput>, CoreCardioSetUncheckedUpdateWithoutAvgSpeedInput>
  }

  export type CoreCardioSetCreateNestedOneWithoutWorkTimeInput = {
    create?: XOR<CoreCardioSetCreateWithoutWorkTimeInput, CoreCardioSetUncheckedCreateWithoutWorkTimeInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutWorkTimeInput
    connect?: CoreCardioSetWhereUniqueInput
  }

  export type CoreCardioSetUpdateOneRequiredWithoutWorkTimeNestedInput = {
    create?: XOR<CoreCardioSetCreateWithoutWorkTimeInput, CoreCardioSetUncheckedCreateWithoutWorkTimeInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutWorkTimeInput
    upsert?: CoreCardioSetUpsertWithoutWorkTimeInput
    connect?: CoreCardioSetWhereUniqueInput
    update?: XOR<XOR<CoreCardioSetUpdateToOneWithWhereWithoutWorkTimeInput, CoreCardioSetUpdateWithoutWorkTimeInput>, CoreCardioSetUncheckedUpdateWithoutWorkTimeInput>
  }

  export type UserWorkoutExerciseCreateNestedOneWithoutUserCardioSetInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetInput
    connect?: UserWorkoutExerciseWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserWorkoutExerciseUpdateOneRequiredWithoutUserCardioSetNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetInput
    upsert?: UserWorkoutExerciseUpsertWithoutUserCardioSetInput
    connect?: UserWorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<UserWorkoutExerciseUpdateToOneWithWhereWithoutUserCardioSetInput, UserWorkoutExerciseUpdateWithoutUserCardioSetInput>, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetInput>
  }

  export type WorkoutExerciseCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput> | WorkoutExerciseCreateWithoutCoreStrengthSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput | WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreStrengthSetInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type CoreStrengthSetRepsCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetRepsCreateManyCoreStrengthSetInputEnvelope
    connect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
  }

  export type CoreStrengthSetWeightCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetWeightCreateManyCoreStrengthSetInputEnvelope
    connect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput> | WorkoutExerciseCreateWithoutCoreStrengthSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput | WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreStrengthSetInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type CoreStrengthSetRepsUncheckedCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetRepsCreateManyCoreStrengthSetInputEnvelope
    connect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
  }

  export type CoreStrengthSetWeightUncheckedCreateNestedManyWithoutCoreStrengthSetInput = {
    create?: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetWeightCreateManyCoreStrengthSetInputEnvelope
    connect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
  }

  export type WorkoutExerciseUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput> | WorkoutExerciseCreateWithoutCoreStrengthSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput | WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutCoreStrengthSetInput | WorkoutExerciseUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreStrengthSetInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutCoreStrengthSetInput | WorkoutExerciseUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutCoreStrengthSetInput | WorkoutExerciseUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type CoreStrengthSetRepsUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: CoreStrengthSetRepsUpsertWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetRepsCreateManyCoreStrengthSetInputEnvelope
    set?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    disconnect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    delete?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    connect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    update?: CoreStrengthSetRepsUpdateWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: CoreStrengthSetRepsUpdateManyWithWhereWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: CoreStrengthSetRepsScalarWhereInput | CoreStrengthSetRepsScalarWhereInput[]
  }

  export type CoreStrengthSetWeightUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: CoreStrengthSetWeightUpsertWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetWeightCreateManyCoreStrengthSetInputEnvelope
    set?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    disconnect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    delete?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    connect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    update?: CoreStrengthSetWeightUpdateWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: CoreStrengthSetWeightUpdateManyWithWhereWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: CoreStrengthSetWeightScalarWhereInput | CoreStrengthSetWeightScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput> | WorkoutExerciseCreateWithoutCoreStrengthSetInput[] | WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput | WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutCoreStrengthSetInput | WorkoutExerciseUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: WorkoutExerciseCreateManyCoreStrengthSetInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutCoreStrengthSetInput | WorkoutExerciseUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutCoreStrengthSetInput | WorkoutExerciseUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: CoreStrengthSetRepsUpsertWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetRepsCreateManyCoreStrengthSetInputEnvelope
    set?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    disconnect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    delete?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    connect?: CoreStrengthSetRepsWhereUniqueInput | CoreStrengthSetRepsWhereUniqueInput[]
    update?: CoreStrengthSetRepsUpdateWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: CoreStrengthSetRepsUpdateManyWithWhereWithoutCoreStrengthSetInput | CoreStrengthSetRepsUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: CoreStrengthSetRepsScalarWhereInput | CoreStrengthSetRepsScalarWhereInput[]
  }

  export type CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetNestedInput = {
    create?: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput> | CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput[] | CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput[]
    connectOrCreate?: CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput | CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput[]
    upsert?: CoreStrengthSetWeightUpsertWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpsertWithWhereUniqueWithoutCoreStrengthSetInput[]
    createMany?: CoreStrengthSetWeightCreateManyCoreStrengthSetInputEnvelope
    set?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    disconnect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    delete?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    connect?: CoreStrengthSetWeightWhereUniqueInput | CoreStrengthSetWeightWhereUniqueInput[]
    update?: CoreStrengthSetWeightUpdateWithWhereUniqueWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpdateWithWhereUniqueWithoutCoreStrengthSetInput[]
    updateMany?: CoreStrengthSetWeightUpdateManyWithWhereWithoutCoreStrengthSetInput | CoreStrengthSetWeightUpdateManyWithWhereWithoutCoreStrengthSetInput[]
    deleteMany?: CoreStrengthSetWeightScalarWhereInput | CoreStrengthSetWeightScalarWhereInput[]
  }

  export type CoreStrengthSetCreateNestedOneWithoutRepsInput = {
    create?: XOR<CoreStrengthSetCreateWithoutRepsInput, CoreStrengthSetUncheckedCreateWithoutRepsInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutRepsInput
    connect?: CoreStrengthSetWhereUniqueInput
  }

  export type CoreStrengthSetUpdateOneRequiredWithoutRepsNestedInput = {
    create?: XOR<CoreStrengthSetCreateWithoutRepsInput, CoreStrengthSetUncheckedCreateWithoutRepsInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutRepsInput
    upsert?: CoreStrengthSetUpsertWithoutRepsInput
    connect?: CoreStrengthSetWhereUniqueInput
    update?: XOR<XOR<CoreStrengthSetUpdateToOneWithWhereWithoutRepsInput, CoreStrengthSetUpdateWithoutRepsInput>, CoreStrengthSetUncheckedUpdateWithoutRepsInput>
  }

  export type CoreStrengthSetCreateNestedOneWithoutWeightInput = {
    create?: XOR<CoreStrengthSetCreateWithoutWeightInput, CoreStrengthSetUncheckedCreateWithoutWeightInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutWeightInput
    connect?: CoreStrengthSetWhereUniqueInput
  }

  export type CoreStrengthSetUpdateOneRequiredWithoutWeightNestedInput = {
    create?: XOR<CoreStrengthSetCreateWithoutWeightInput, CoreStrengthSetUncheckedCreateWithoutWeightInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutWeightInput
    upsert?: CoreStrengthSetUpsertWithoutWeightInput
    connect?: CoreStrengthSetWhereUniqueInput
    update?: XOR<XOR<CoreStrengthSetUpdateToOneWithWhereWithoutWeightInput, CoreStrengthSetUpdateWithoutWeightInput>, CoreStrengthSetUncheckedUpdateWithoutWeightInput>
  }

  export type UserWorkoutExerciseCreateNestedOneWithoutUserStrengthSetInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetInput
    connect?: UserWorkoutExerciseWhereUniqueInput
  }

  export type UserWorkoutExerciseUpdateOneRequiredWithoutUserStrengthSetNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetInput
    upsert?: UserWorkoutExerciseUpsertWithoutUserStrengthSetInput
    connect?: UserWorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<UserWorkoutExerciseUpdateToOneWithWhereWithoutUserStrengthSetInput, UserWorkoutExerciseUpdateWithoutUserStrengthSetInput>, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetInput>
  }

  export type ProgramWorkoutCreateNestedManyWithoutProgramInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutProgramInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutProgramsInput = {
    create?: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgramsInput
    connect?: UserWhereUniqueInput
  }

  export type ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type ProgramWorkoutUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutProgramInput | ProgramWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutProgramNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutProgramInput | UserWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutProgramInput | UserWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutProgramInput | UserWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutProgramsNestedInput = {
    create?: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgramsInput
    upsert?: UserUpsertWithoutProgramsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProgramsInput, UserUpdateWithoutProgramsInput>, UserUncheckedUpdateWithoutProgramsInput>
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutProgramInput | ProgramWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutProgramInput | UserWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutProgramInput | UserWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutProgramInput | UserWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type ProgramWorkoutCreatedaysOfWeekInput = {
    set: $Enums.DaysOfWeek[]
  }

  export type ProgramCreateNestedOneWithoutProgramWorkoutsInput = {
    create?: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutProgramWorkoutsInput
    connect?: ProgramWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutProgramWorkoutsInput = {
    create?: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgramWorkoutsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type ProgramWorkoutUpdatedaysOfWeekInput = {
    set?: $Enums.DaysOfWeek[]
    push?: $Enums.DaysOfWeek | $Enums.DaysOfWeek[]
  }

  export type ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput = {
    create?: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutProgramWorkoutsInput
    upsert?: ProgramUpsertWithoutProgramWorkoutsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutProgramWorkoutsInput, ProgramUpdateWithoutProgramWorkoutsInput>, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput = {
    create?: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgramWorkoutsInput
    upsert?: WorkoutUpsertWithoutProgramWorkoutsInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutProgramWorkoutsInput, WorkoutUpdateWithoutProgramWorkoutsInput>, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type UserCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutExerciseCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutWorkoutsNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    upsert?: UserUpsertWithoutWorkoutsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutsInput, UserUpdateWithoutWorkoutsInput>, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type WorkoutExerciseUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type ProgramWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput | ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutWorkoutInput | UserWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput | ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutWorkoutInput | UserWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput = {
    create?: XOR<CoreStrengthSetCreateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedCreateWithoutWorkoutExerciseInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutWorkoutExerciseInput
    connect?: CoreStrengthSetWhereUniqueInput
  }

  export type CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput = {
    create?: XOR<CoreCardioSetCreateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedCreateWithoutWorkoutExerciseInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutWorkoutExerciseInput
    connect?: CoreCardioSetWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutWorkoutExercisesInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutExercisesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutWorkoutExercisesInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutExercisesInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput = {
    create?: XOR<CoreStrengthSetCreateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedCreateWithoutWorkoutExerciseInput>
    connectOrCreate?: CoreStrengthSetCreateOrConnectWithoutWorkoutExerciseInput
    upsert?: CoreStrengthSetUpsertWithoutWorkoutExerciseInput
    disconnect?: CoreStrengthSetWhereInput | boolean
    delete?: CoreStrengthSetWhereInput | boolean
    connect?: CoreStrengthSetWhereUniqueInput
    update?: XOR<XOR<CoreStrengthSetUpdateToOneWithWhereWithoutWorkoutExerciseInput, CoreStrengthSetUpdateWithoutWorkoutExerciseInput>, CoreStrengthSetUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput = {
    create?: XOR<CoreCardioSetCreateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedCreateWithoutWorkoutExerciseInput>
    connectOrCreate?: CoreCardioSetCreateOrConnectWithoutWorkoutExerciseInput
    upsert?: CoreCardioSetUpsertWithoutWorkoutExerciseInput
    disconnect?: CoreCardioSetWhereInput | boolean
    delete?: CoreCardioSetWhereInput | boolean
    connect?: CoreCardioSetWhereUniqueInput
    update?: XOR<XOR<CoreCardioSetUpdateToOneWithWhereWithoutWorkoutExerciseInput, CoreCardioSetUpdateWithoutWorkoutExerciseInput>, CoreCardioSetUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutExercisesInput
    upsert?: ExerciseUpsertWithoutWorkoutExercisesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutWorkoutExercisesInput, ExerciseUpdateWithoutWorkoutExercisesInput>, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutExercisesInput
    upsert?: WorkoutUpsertWithoutWorkoutExercisesInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutWorkoutExercisesInput, WorkoutUpdateWithoutWorkoutExercisesInput>, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput = {
    create?: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput
    connect?: WorkoutExerciseWhereUniqueInput
  }

  export type UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput = {
    create?: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput
    connect?: UserWorkoutWhereUniqueInput
  }

  export type UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
  }

  export type UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
  }

  export type UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
  }

  export type UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
  }

  export type WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput
    upsert?: WorkoutExerciseUpsertWithoutUserWorkoutExercisesInput
    connect?: WorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<WorkoutExerciseUpdateToOneWithWhereWithoutUserWorkoutExercisesInput, WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput>, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput
    upsert?: UserWorkoutUpsertWithoutUserWorkoutExercisesInput
    connect?: UserWorkoutWhereUniqueInput
    update?: XOR<XOR<UserWorkoutUpdateToOneWithWhereWithoutUserWorkoutExercisesInput, UserWorkoutUpdateWithoutUserWorkoutExercisesInput>, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    disconnect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    delete?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    update?: UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
  }

  export type UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    disconnect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    delete?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    update?: UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
  }

  export type UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    disconnect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    delete?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    update?: UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
  }

  export type UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    disconnect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    delete?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    update?: UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserWorkoutInput = {
    create?: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWorkoutInput
    connect?: UserWhereUniqueInput
  }

  export type UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramCreateNestedOneWithoutUserWorkoutInput = {
    create?: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutUserWorkoutInput
    connect?: ProgramWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutUserWorkoutsInput = {
    create?: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserWorkoutsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutUserWorkoutNestedInput = {
    create?: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWorkoutInput
    upsert?: UserUpsertWithoutUserWorkoutInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserWorkoutInput, UserUpdateWithoutUserWorkoutInput>, UserUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput | UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type ProgramUpdateOneWithoutUserWorkoutNestedInput = {
    create?: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutUserWorkoutInput
    upsert?: ProgramUpsertWithoutUserWorkoutInput
    disconnect?: ProgramWhereInput | boolean
    delete?: ProgramWhereInput | boolean
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutUserWorkoutInput, ProgramUpdateWithoutUserWorkoutInput>, ProgramUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type WorkoutUpdateOneWithoutUserWorkoutsNestedInput = {
    create?: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserWorkoutsInput
    upsert?: WorkoutUpsertWithoutUserWorkoutsInput
    disconnect?: WorkoutWhereInput | boolean
    delete?: WorkoutWhereInput | boolean
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutUserWorkoutsInput, WorkoutUpdateWithoutUserWorkoutsInput>, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput | UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProgramCreateWithoutOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput>
  }

  export type ProgramCreateManyOwnerInputEnvelope = {
    data: ProgramCreateManyOwnerInput | ProgramCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type WorkoutCreateManyOwnerInputEnvelope = {
    data: WorkoutCreateManyOwnerInput | WorkoutCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type UserWorkoutCreateManyOwnerInputEnvelope = {
    data: UserWorkoutCreateManyOwnerInput | UserWorkoutCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ProgramUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    update: XOR<ProgramUpdateWithoutOwnerInput, ProgramUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput>
  }

  export type ProgramUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    data: XOR<ProgramUpdateWithoutOwnerInput, ProgramUncheckedUpdateWithoutOwnerInput>
  }

  export type ProgramUpdateManyWithWhereWithoutOwnerInput = {
    where: ProgramScalarWhereInput
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ProgramScalarWhereInput = {
    AND?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    OR?: ProgramScalarWhereInput[]
    NOT?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
  }

  export type WorkoutUpsertWithWhereUniqueWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutOwnerInput, WorkoutUncheckedUpdateWithoutOwnerInput>
    create: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutOwnerInput, WorkoutUncheckedUpdateWithoutOwnerInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutOwnerInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutOwnerInput>
  }

  export type WorkoutScalarWhereInput = {
    AND?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    OR?: WorkoutScalarWhereInput[]
    NOT?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringNullableFilter<"Workout"> | string | null
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutOwnerInput, UserWorkoutUncheckedUpdateWithoutOwnerInput>
    create: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutOwnerInput, UserWorkoutUncheckedUpdateWithoutOwnerInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutOwnerInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutOwnerInput>
  }

  export type UserWorkoutScalarWhereInput = {
    AND?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
    OR?: UserWorkoutScalarWhereInput[]
    NOT?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
    id?: StringFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
  }

  export type WorkoutExerciseCreateWithoutExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet?: CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput
    coreCardioSet?: CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseCreateManyExerciseInputEnvelope = {
    data: WorkoutExerciseCreateManyExerciseInput | WorkoutExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutExerciseScalarWhereInput = {
    AND?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    OR?: WorkoutExerciseScalarWhereInput[]
    NOT?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    id?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreStrengthSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    coreCardioSetId?: StringNullableFilter<"WorkoutExercise"> | string | null
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
  }

  export type WorkoutExerciseCreateWithoutCoreCardioSetInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet?: CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutCoreCardioSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type WorkoutExerciseCreateManyCoreCardioSetInputEnvelope = {
    data: WorkoutExerciseCreateManyCoreCardioSetInput | WorkoutExerciseCreateManyCoreCardioSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput = {
    id?: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput = {
    id?: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetWorkoutTimeCreateOrConnectWithoutCoreCardioSetInput = {
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
    create: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInputEnvelope = {
    data: CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInput | CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput = {
    id?: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput = {
    id?: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetAvgSpeedCreateOrConnectWithoutCoreCardioSetInput = {
    where: CoreCardioSetAvgSpeedWhereUniqueInput
    create: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetAvgSpeedCreateManyCoreCardioSetInputEnvelope = {
    data: CoreCardioSetAvgSpeedCreateManyCoreCardioSetInput | CoreCardioSetAvgSpeedCreateManyCoreCardioSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreCardioSetDistanceCreateWithoutCoreCardioSetInput = {
    id?: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput = {
    id?: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetDistanceCreateOrConnectWithoutCoreCardioSetInput = {
    where: CoreCardioSetDistanceWhereUniqueInput
    create: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetDistanceCreateManyCoreCardioSetInputEnvelope = {
    data: CoreCardioSetDistanceCreateManyCoreCardioSetInput | CoreCardioSetDistanceCreateManyCoreCardioSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput = {
    id?: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput = {
    id?: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetCalorieTargetCreateOrConnectWithoutCoreCardioSetInput = {
    where: CoreCardioSetCalorieTargetWhereUniqueInput
    create: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetCalorieTargetCreateManyCoreCardioSetInputEnvelope = {
    data: CoreCardioSetCalorieTargetCreateManyCoreCardioSetInput | CoreCardioSetCalorieTargetCreateManyCoreCardioSetInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutCoreCardioSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedUpdateWithoutCoreCardioSetInput>
    create: XOR<WorkoutExerciseCreateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutCoreCardioSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutCoreCardioSetInput, WorkoutExerciseUncheckedUpdateWithoutCoreCardioSetInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutCoreCardioSetInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetWorkoutTimeUpsertWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
    update: XOR<CoreCardioSetWorkoutTimeUpdateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedUpdateWithoutCoreCardioSetInput>
    create: XOR<CoreCardioSetWorkoutTimeCreateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetWorkoutTimeUpdateWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetWorkoutTimeWhereUniqueInput
    data: XOR<CoreCardioSetWorkoutTimeUpdateWithoutCoreCardioSetInput, CoreCardioSetWorkoutTimeUncheckedUpdateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetWorkoutTimeUpdateManyWithWhereWithoutCoreCardioSetInput = {
    where: CoreCardioSetWorkoutTimeScalarWhereInput
    data: XOR<CoreCardioSetWorkoutTimeUpdateManyMutationInput, CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetWorkoutTimeScalarWhereInput = {
    AND?: CoreCardioSetWorkoutTimeScalarWhereInput | CoreCardioSetWorkoutTimeScalarWhereInput[]
    OR?: CoreCardioSetWorkoutTimeScalarWhereInput[]
    NOT?: CoreCardioSetWorkoutTimeScalarWhereInput | CoreCardioSetWorkoutTimeScalarWhereInput[]
    id?: StringFilter<"CoreCardioSetWorkoutTime"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetWorkoutTime"> | string
    workTime?: IntNullableFilter<"CoreCardioSetWorkoutTime"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetWorkoutTime"> | Date | string
  }

  export type CoreCardioSetAvgSpeedUpsertWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetAvgSpeedWhereUniqueInput
    update: XOR<CoreCardioSetAvgSpeedUpdateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedUpdateWithoutCoreCardioSetInput>
    create: XOR<CoreCardioSetAvgSpeedCreateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetAvgSpeedUpdateWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetAvgSpeedWhereUniqueInput
    data: XOR<CoreCardioSetAvgSpeedUpdateWithoutCoreCardioSetInput, CoreCardioSetAvgSpeedUncheckedUpdateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetAvgSpeedUpdateManyWithWhereWithoutCoreCardioSetInput = {
    where: CoreCardioSetAvgSpeedScalarWhereInput
    data: XOR<CoreCardioSetAvgSpeedUpdateManyMutationInput, CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetAvgSpeedScalarWhereInput = {
    AND?: CoreCardioSetAvgSpeedScalarWhereInput | CoreCardioSetAvgSpeedScalarWhereInput[]
    OR?: CoreCardioSetAvgSpeedScalarWhereInput[]
    NOT?: CoreCardioSetAvgSpeedScalarWhereInput | CoreCardioSetAvgSpeedScalarWhereInput[]
    id?: StringFilter<"CoreCardioSetAvgSpeed"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetAvgSpeed"> | string
    avgSpeed?: FloatNullableFilter<"CoreCardioSetAvgSpeed"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetAvgSpeed"> | Date | string
  }

  export type CoreCardioSetDistanceUpsertWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetDistanceWhereUniqueInput
    update: XOR<CoreCardioSetDistanceUpdateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedUpdateWithoutCoreCardioSetInput>
    create: XOR<CoreCardioSetDistanceCreateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetDistanceUpdateWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetDistanceWhereUniqueInput
    data: XOR<CoreCardioSetDistanceUpdateWithoutCoreCardioSetInput, CoreCardioSetDistanceUncheckedUpdateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetDistanceUpdateManyWithWhereWithoutCoreCardioSetInput = {
    where: CoreCardioSetDistanceScalarWhereInput
    data: XOR<CoreCardioSetDistanceUpdateManyMutationInput, CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetDistanceScalarWhereInput = {
    AND?: CoreCardioSetDistanceScalarWhereInput | CoreCardioSetDistanceScalarWhereInput[]
    OR?: CoreCardioSetDistanceScalarWhereInput[]
    NOT?: CoreCardioSetDistanceScalarWhereInput | CoreCardioSetDistanceScalarWhereInput[]
    id?: StringFilter<"CoreCardioSetDistance"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetDistance"> | string
    distance?: FloatNullableFilter<"CoreCardioSetDistance"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetDistance"> | Date | string
  }

  export type CoreCardioSetCalorieTargetUpsertWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetCalorieTargetWhereUniqueInput
    update: XOR<CoreCardioSetCalorieTargetUpdateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedUpdateWithoutCoreCardioSetInput>
    create: XOR<CoreCardioSetCalorieTargetCreateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedCreateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetCalorieTargetUpdateWithWhereUniqueWithoutCoreCardioSetInput = {
    where: CoreCardioSetCalorieTargetWhereUniqueInput
    data: XOR<CoreCardioSetCalorieTargetUpdateWithoutCoreCardioSetInput, CoreCardioSetCalorieTargetUncheckedUpdateWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetCalorieTargetUpdateManyWithWhereWithoutCoreCardioSetInput = {
    where: CoreCardioSetCalorieTargetScalarWhereInput
    data: XOR<CoreCardioSetCalorieTargetUpdateManyMutationInput, CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetInput>
  }

  export type CoreCardioSetCalorieTargetScalarWhereInput = {
    AND?: CoreCardioSetCalorieTargetScalarWhereInput | CoreCardioSetCalorieTargetScalarWhereInput[]
    OR?: CoreCardioSetCalorieTargetScalarWhereInput[]
    NOT?: CoreCardioSetCalorieTargetScalarWhereInput | CoreCardioSetCalorieTargetScalarWhereInput[]
    id?: StringFilter<"CoreCardioSetCalorieTarget"> | string
    coreCardioSetId?: StringFilter<"CoreCardioSetCalorieTarget"> | string
    calorieTarget?: IntNullableFilter<"CoreCardioSetCalorieTarget"> | number | null
    createdAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
    updatedAt?: DateTimeFilter<"CoreCardioSetCalorieTarget"> | Date | string
  }

  export type CoreCardioSetCreateWithoutCalorieTargetInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateWithoutCalorieTargetInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetCreateOrConnectWithoutCalorieTargetInput = {
    where: CoreCardioSetWhereUniqueInput
    create: XOR<CoreCardioSetCreateWithoutCalorieTargetInput, CoreCardioSetUncheckedCreateWithoutCalorieTargetInput>
  }

  export type CoreCardioSetUpsertWithoutCalorieTargetInput = {
    update: XOR<CoreCardioSetUpdateWithoutCalorieTargetInput, CoreCardioSetUncheckedUpdateWithoutCalorieTargetInput>
    create: XOR<CoreCardioSetCreateWithoutCalorieTargetInput, CoreCardioSetUncheckedCreateWithoutCalorieTargetInput>
    where?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetUpdateToOneWithWhereWithoutCalorieTargetInput = {
    where?: CoreCardioSetWhereInput
    data: XOR<CoreCardioSetUpdateWithoutCalorieTargetInput, CoreCardioSetUncheckedUpdateWithoutCalorieTargetInput>
  }

  export type CoreCardioSetUpdateWithoutCalorieTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateWithoutCalorieTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetCreateWithoutDistanceInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateWithoutDistanceInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetCreateOrConnectWithoutDistanceInput = {
    where: CoreCardioSetWhereUniqueInput
    create: XOR<CoreCardioSetCreateWithoutDistanceInput, CoreCardioSetUncheckedCreateWithoutDistanceInput>
  }

  export type CoreCardioSetUpsertWithoutDistanceInput = {
    update: XOR<CoreCardioSetUpdateWithoutDistanceInput, CoreCardioSetUncheckedUpdateWithoutDistanceInput>
    create: XOR<CoreCardioSetCreateWithoutDistanceInput, CoreCardioSetUncheckedCreateWithoutDistanceInput>
    where?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetUpdateToOneWithWhereWithoutDistanceInput = {
    where?: CoreCardioSetWhereInput
    data: XOR<CoreCardioSetUpdateWithoutDistanceInput, CoreCardioSetUncheckedUpdateWithoutDistanceInput>
  }

  export type CoreCardioSetUpdateWithoutDistanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateWithoutDistanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetCreateWithoutAvgSpeedInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateWithoutAvgSpeedInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetCreateOrConnectWithoutAvgSpeedInput = {
    where: CoreCardioSetWhereUniqueInput
    create: XOR<CoreCardioSetCreateWithoutAvgSpeedInput, CoreCardioSetUncheckedCreateWithoutAvgSpeedInput>
  }

  export type CoreCardioSetUpsertWithoutAvgSpeedInput = {
    update: XOR<CoreCardioSetUpdateWithoutAvgSpeedInput, CoreCardioSetUncheckedUpdateWithoutAvgSpeedInput>
    create: XOR<CoreCardioSetCreateWithoutAvgSpeedInput, CoreCardioSetUncheckedCreateWithoutAvgSpeedInput>
    where?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetUpdateToOneWithWhereWithoutAvgSpeedInput = {
    where?: CoreCardioSetWhereInput
    data: XOR<CoreCardioSetUpdateWithoutAvgSpeedInput, CoreCardioSetUncheckedUpdateWithoutAvgSpeedInput>
  }

  export type CoreCardioSetUpdateWithoutAvgSpeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateWithoutAvgSpeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    workTime?: CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetCreateWithoutWorkTimeInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateWithoutWorkTimeInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetCreateOrConnectWithoutWorkTimeInput = {
    where: CoreCardioSetWhereUniqueInput
    create: XOR<CoreCardioSetCreateWithoutWorkTimeInput, CoreCardioSetUncheckedCreateWithoutWorkTimeInput>
  }

  export type CoreCardioSetUpsertWithoutWorkTimeInput = {
    update: XOR<CoreCardioSetUpdateWithoutWorkTimeInput, CoreCardioSetUncheckedUpdateWithoutWorkTimeInput>
    create: XOR<CoreCardioSetCreateWithoutWorkTimeInput, CoreCardioSetUncheckedCreateWithoutWorkTimeInput>
    where?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetUpdateToOneWithWhereWithoutWorkTimeInput = {
    where?: CoreCardioSetWhereInput
    data: XOR<CoreCardioSetUpdateWithoutWorkTimeInput, CoreCardioSetUncheckedUpdateWithoutWorkTimeInput>
  }

  export type CoreCardioSetUpdateWithoutWorkTimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateWithoutWorkTimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type UserWorkoutExerciseCreateWithoutUserCardioSetInput = {
    id?: string
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSet?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetInput = {
    id?: string
    workoutExerciseId: string
    userWorkoutId: string
    userStrengthSet?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetInput>
  }

  export type UserWorkoutExerciseUpsertWithoutUserCardioSetInput = {
    update: XOR<UserWorkoutExerciseUpdateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetInput>
    where?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseUpdateToOneWithWhereWithoutUserCardioSetInput = {
    where?: UserWorkoutExerciseWhereInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserCardioSetInput, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetInput>
  }

  export type UserWorkoutExerciseUpdateWithoutUserCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSet?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSet?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseCreateWithoutCoreStrengthSetInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreCardioSet?: CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput = {
    id?: string
    order?: number
    notes?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutCoreStrengthSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type WorkoutExerciseCreateManyCoreStrengthSetInputEnvelope = {
    data: WorkoutExerciseCreateManyCoreStrengthSetInput | WorkoutExerciseCreateManyCoreStrengthSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput = {
    id?: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput = {
    id?: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetRepsCreateOrConnectWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetRepsWhereUniqueInput
    create: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetRepsCreateManyCoreStrengthSetInputEnvelope = {
    data: CoreStrengthSetRepsCreateManyCoreStrengthSetInput | CoreStrengthSetRepsCreateManyCoreStrengthSetInput[]
    skipDuplicates?: boolean
  }

  export type CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput = {
    id?: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput = {
    id?: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetWeightCreateOrConnectWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetWeightWhereUniqueInput
    create: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetWeightCreateManyCoreStrengthSetInputEnvelope = {
    data: CoreStrengthSetWeightCreateManyCoreStrengthSetInput | CoreStrengthSetWeightCreateManyCoreStrengthSetInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedUpdateWithoutCoreStrengthSetInput>
    create: XOR<WorkoutExerciseCreateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutCoreStrengthSetInput, WorkoutExerciseUncheckedUpdateWithoutCoreStrengthSetInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutCoreStrengthSetInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetRepsUpsertWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetRepsWhereUniqueInput
    update: XOR<CoreStrengthSetRepsUpdateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedUpdateWithoutCoreStrengthSetInput>
    create: XOR<CoreStrengthSetRepsCreateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetRepsUpdateWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetRepsWhereUniqueInput
    data: XOR<CoreStrengthSetRepsUpdateWithoutCoreStrengthSetInput, CoreStrengthSetRepsUncheckedUpdateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetRepsUpdateManyWithWhereWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetRepsScalarWhereInput
    data: XOR<CoreStrengthSetRepsUpdateManyMutationInput, CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetRepsScalarWhereInput = {
    AND?: CoreStrengthSetRepsScalarWhereInput | CoreStrengthSetRepsScalarWhereInput[]
    OR?: CoreStrengthSetRepsScalarWhereInput[]
    NOT?: CoreStrengthSetRepsScalarWhereInput | CoreStrengthSetRepsScalarWhereInput[]
    id?: StringFilter<"CoreStrengthSetReps"> | string
    coreStrengthSetId?: StringFilter<"CoreStrengthSetReps"> | string
    reps?: IntFilter<"CoreStrengthSetReps"> | number
    createdAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetReps"> | Date | string
  }

  export type CoreStrengthSetWeightUpsertWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetWeightWhereUniqueInput
    update: XOR<CoreStrengthSetWeightUpdateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedUpdateWithoutCoreStrengthSetInput>
    create: XOR<CoreStrengthSetWeightCreateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedCreateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetWeightUpdateWithWhereUniqueWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetWeightWhereUniqueInput
    data: XOR<CoreStrengthSetWeightUpdateWithoutCoreStrengthSetInput, CoreStrengthSetWeightUncheckedUpdateWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetWeightUpdateManyWithWhereWithoutCoreStrengthSetInput = {
    where: CoreStrengthSetWeightScalarWhereInput
    data: XOR<CoreStrengthSetWeightUpdateManyMutationInput, CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetInput>
  }

  export type CoreStrengthSetWeightScalarWhereInput = {
    AND?: CoreStrengthSetWeightScalarWhereInput | CoreStrengthSetWeightScalarWhereInput[]
    OR?: CoreStrengthSetWeightScalarWhereInput[]
    NOT?: CoreStrengthSetWeightScalarWhereInput | CoreStrengthSetWeightScalarWhereInput[]
    id?: StringFilter<"CoreStrengthSetWeight"> | string
    coreStrengthSetId?: StringFilter<"CoreStrengthSetWeight"> | string
    isBodyWeight?: BoolFilter<"CoreStrengthSetWeight"> | boolean
    weight?: FloatNullableFilter<"CoreStrengthSetWeight"> | number | null
    createdAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
    updatedAt?: DateTimeFilter<"CoreStrengthSetWeight"> | Date | string
  }

  export type CoreStrengthSetCreateWithoutRepsInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetUncheckedCreateWithoutRepsInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightUncheckedCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetCreateOrConnectWithoutRepsInput = {
    where: CoreStrengthSetWhereUniqueInput
    create: XOR<CoreStrengthSetCreateWithoutRepsInput, CoreStrengthSetUncheckedCreateWithoutRepsInput>
  }

  export type CoreStrengthSetUpsertWithoutRepsInput = {
    update: XOR<CoreStrengthSetUpdateWithoutRepsInput, CoreStrengthSetUncheckedUpdateWithoutRepsInput>
    create: XOR<CoreStrengthSetCreateWithoutRepsInput, CoreStrengthSetUncheckedCreateWithoutRepsInput>
    where?: CoreStrengthSetWhereInput
  }

  export type CoreStrengthSetUpdateToOneWithWhereWithoutRepsInput = {
    where?: CoreStrengthSetWhereInput
    data: XOR<CoreStrengthSetUpdateWithoutRepsInput, CoreStrengthSetUncheckedUpdateWithoutRepsInput>
  }

  export type CoreStrengthSetUpdateWithoutRepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetUncheckedUpdateWithoutRepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetCreateWithoutWeightInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseCreateNestedManyWithoutCoreStrengthSetInput
    reps?: CoreStrengthSetRepsCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetUncheckedCreateWithoutWeightInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercise?: WorkoutExerciseUncheckedCreateNestedManyWithoutCoreStrengthSetInput
    reps?: CoreStrengthSetRepsUncheckedCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetCreateOrConnectWithoutWeightInput = {
    where: CoreStrengthSetWhereUniqueInput
    create: XOR<CoreStrengthSetCreateWithoutWeightInput, CoreStrengthSetUncheckedCreateWithoutWeightInput>
  }

  export type CoreStrengthSetUpsertWithoutWeightInput = {
    update: XOR<CoreStrengthSetUpdateWithoutWeightInput, CoreStrengthSetUncheckedUpdateWithoutWeightInput>
    create: XOR<CoreStrengthSetCreateWithoutWeightInput, CoreStrengthSetUncheckedCreateWithoutWeightInput>
    where?: CoreStrengthSetWhereInput
  }

  export type CoreStrengthSetUpdateToOneWithWhereWithoutWeightInput = {
    where?: CoreStrengthSetWhereInput
    data: XOR<CoreStrengthSetUpdateWithoutWeightInput, CoreStrengthSetUncheckedUpdateWithoutWeightInput>
  }

  export type CoreStrengthSetUpdateWithoutWeightInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUpdateManyWithoutCoreStrengthSetNestedInput
    reps?: CoreStrengthSetRepsUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetUncheckedUpdateWithoutWeightInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercise?: WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
    reps?: CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type UserWorkoutExerciseCreateWithoutUserStrengthSetInput = {
    id?: string
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userCardioSet?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetInput = {
    id?: string
    workoutExerciseId: string
    userWorkoutId: string
    userCardioSet?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetInput>
  }

  export type UserWorkoutExerciseUpsertWithoutUserStrengthSetInput = {
    update: XOR<UserWorkoutExerciseUpdateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetInput>
    where?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseUpdateToOneWithWhereWithoutUserStrengthSetInput = {
    where?: UserWorkoutExerciseWhereInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserStrengthSetInput, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetInput>
  }

  export type UserWorkoutExerciseUpdateWithoutUserStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userCardioSet?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userCardioSet?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type ProgramWorkoutCreateWithoutProgramInput = {
    id?: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateWithoutProgramInput = {
    id?: string
    workoutId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateOrConnectWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    create: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type ProgramWorkoutCreateManyProgramInputEnvelope = {
    data: ProgramWorkoutCreateManyProgramInput | ProgramWorkoutCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type UserWorkoutCreateManyProgramInputEnvelope = {
    data: UserWorkoutCreateManyProgramInput | UserWorkoutCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProgramsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutProgramsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutProgramsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
  }

  export type ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    update: XOR<ProgramWorkoutUpdateWithoutProgramInput, ProgramWorkoutUncheckedUpdateWithoutProgramInput>
    create: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    data: XOR<ProgramWorkoutUpdateWithoutProgramInput, ProgramWorkoutUncheckedUpdateWithoutProgramInput>
  }

  export type ProgramWorkoutUpdateManyWithWhereWithoutProgramInput = {
    where: ProgramWorkoutScalarWhereInput
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyWithoutProgramInput>
  }

  export type ProgramWorkoutScalarWhereInput = {
    AND?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
    OR?: ProgramWorkoutScalarWhereInput[]
    NOT?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
    id?: StringFilter<"ProgramWorkout"> | string
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutProgramInput, UserWorkoutUncheckedUpdateWithoutProgramInput>
    create: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutProgramInput, UserWorkoutUncheckedUpdateWithoutProgramInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutProgramInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutProgramInput>
  }

  export type UserUpsertWithoutProgramsInput = {
    update: XOR<UserUpdateWithoutProgramsInput, UserUncheckedUpdateWithoutProgramsInput>
    create: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProgramsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProgramsInput, UserUncheckedUpdateWithoutProgramsInput>
  }

  export type UserUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type ProgramCreateWithoutProgramWorkoutsInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateWithoutProgramWorkoutsInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutProgramWorkoutsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
  }

  export type WorkoutCreateWithoutProgramWorkoutsInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutProgramWorkoutsInput = {
    id?: string
    name?: string | null
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutProgramWorkoutsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
  }

  export type ProgramUpsertWithoutProgramWorkoutsInput = {
    update: XOR<ProgramUpdateWithoutProgramWorkoutsInput, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
    create: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutProgramWorkoutsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutProgramWorkoutsInput, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type ProgramUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WorkoutUpsertWithoutProgramWorkoutsInput = {
    update: XOR<WorkoutUpdateWithoutProgramWorkoutsInput, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
    create: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutProgramWorkoutsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutProgramWorkoutsInput, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type WorkoutUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserCreateWithoutWorkoutsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutWorkoutsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutWorkoutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
  }

  export type WorkoutExerciseCreateWithoutWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet?: CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput
    coreCardioSet?: CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseCreateManyWorkoutInputEnvelope = {
    data: WorkoutExerciseCreateManyWorkoutInput | WorkoutExerciseCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ProgramWorkoutCreateWithoutWorkoutInput = {
    id?: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: string
    programId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    create: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgramWorkoutCreateManyWorkoutInputEnvelope = {
    data: ProgramWorkoutCreateManyWorkoutInput | ProgramWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
  }

  export type UserWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type UserWorkoutCreateManyWorkoutInputEnvelope = {
    data: UserWorkoutCreateManyWorkoutInput | UserWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutsInput = {
    update: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type UserUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    update: XOR<ProgramWorkoutUpdateWithoutWorkoutInput, ProgramWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    data: XOR<ProgramWorkoutUpdateWithoutWorkoutInput, ProgramWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: ProgramWorkoutScalarWhereInput
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutWorkoutInput, UserWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutWorkoutInput, UserWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type CoreStrengthSetCreateWithoutWorkoutExerciseInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reps?: CoreStrengthSetRepsCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetUncheckedCreateWithoutWorkoutExerciseInput = {
    id?: string
    restTime?: number
    numberOfSets?: number
    hasWarmup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reps?: CoreStrengthSetRepsUncheckedCreateNestedManyWithoutCoreStrengthSetInput
    weight?: CoreStrengthSetWeightUncheckedCreateNestedManyWithoutCoreStrengthSetInput
  }

  export type CoreStrengthSetCreateOrConnectWithoutWorkoutExerciseInput = {
    where: CoreStrengthSetWhereUniqueInput
    create: XOR<CoreStrengthSetCreateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type CoreCardioSetCreateWithoutWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workTime?: CoreCardioSetWorkoutTimeCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetUncheckedCreateWithoutWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    avgHeartRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workTime?: CoreCardioSetWorkoutTimeUncheckedCreateNestedManyWithoutCoreCardioSetInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedCreateNestedManyWithoutCoreCardioSetInput
    distance?: CoreCardioSetDistanceUncheckedCreateNestedManyWithoutCoreCardioSetInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedCreateNestedManyWithoutCoreCardioSetInput
  }

  export type CoreCardioSetCreateOrConnectWithoutWorkoutExerciseInput = {
    where: CoreCardioSetWhereUniqueInput
    create: XOR<CoreCardioSetCreateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type ExerciseCreateWithoutWorkoutExercisesInput = {
    id?: string
    name: string
    youtubeUrl: string
    type?: $Enums.ExerciseType
    notes?: string | null
    equipment?: ExerciseCreateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseCreatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUncheckedCreateWithoutWorkoutExercisesInput = {
    id?: string
    name: string
    youtubeUrl: string
    type?: $Enums.ExerciseType
    notes?: string | null
    equipment?: ExerciseCreateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseCreatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseCreateOrConnectWithoutWorkoutExercisesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
  }

  export type WorkoutCreateWithoutWorkoutExercisesInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutWorkoutExercisesInput = {
    id?: string
    name?: string | null
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutWorkoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
  }

  export type UserWorkoutExerciseCreateWithoutWorkoutExerciseInput = {
    id?: string
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSet?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput = {
    id?: string
    userWorkoutId: string
    userStrengthSet?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope = {
    data: UserWorkoutExerciseCreateManyWorkoutExerciseInput | UserWorkoutExerciseCreateManyWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type CoreStrengthSetUpsertWithoutWorkoutExerciseInput = {
    update: XOR<CoreStrengthSetUpdateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedUpdateWithoutWorkoutExerciseInput>
    create: XOR<CoreStrengthSetCreateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedCreateWithoutWorkoutExerciseInput>
    where?: CoreStrengthSetWhereInput
  }

  export type CoreStrengthSetUpdateToOneWithWhereWithoutWorkoutExerciseInput = {
    where?: CoreStrengthSetWhereInput
    data: XOR<CoreStrengthSetUpdateWithoutWorkoutExerciseInput, CoreStrengthSetUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type CoreStrengthSetUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reps?: CoreStrengthSetRepsUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreStrengthSetUncheckedUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    restTime?: IntFieldUpdateOperationsInput | number
    numberOfSets?: IntFieldUpdateOperationsInput | number
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reps?: CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
    weight?: CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetNestedInput
  }

  export type CoreCardioSetUpsertWithoutWorkoutExerciseInput = {
    update: XOR<CoreCardioSetUpdateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedUpdateWithoutWorkoutExerciseInput>
    create: XOR<CoreCardioSetCreateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedCreateWithoutWorkoutExerciseInput>
    where?: CoreCardioSetWhereInput
  }

  export type CoreCardioSetUpdateToOneWithWhereWithoutWorkoutExerciseInput = {
    where?: CoreCardioSetWhereInput
    data: XOR<CoreCardioSetUpdateWithoutWorkoutExerciseInput, CoreCardioSetUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type CoreCardioSetUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workTime?: CoreCardioSetWorkoutTimeUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type CoreCardioSetUncheckedUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workTime?: CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    avgSpeed?: CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    distance?: CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetNestedInput
    calorieTarget?: CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetNestedInput
  }

  export type ExerciseUpsertWithoutWorkoutExercisesInput = {
    update: XOR<ExerciseUpdateWithoutWorkoutExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
    create: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutWorkoutExercisesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutWorkoutExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type ExerciseUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: ExerciseUpdateequipmentInput | $Enums.ExerciseEquipment[]
    muscles?: ExerciseUpdatemusclesInput | $Enums.ExerciseMuscle[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUpsertWithoutWorkoutExercisesInput = {
    update: XOR<WorkoutUpdateWithoutWorkoutExercisesInput, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
    create: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutWorkoutExercisesInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutWorkoutExercisesInput, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type WorkoutUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    update: XOR<UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput>
    create: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    data: XOR<UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseScalarWhereInput
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseScalarWhereInput = {
    AND?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
    OR?: UserWorkoutExerciseScalarWhereInput[]
    NOT?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
    id?: StringFilter<"UserWorkoutExercise"> | string
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
  }

  export type WorkoutExerciseCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    order?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coreStrengthSet?: CoreStrengthSetCreateNestedOneWithoutWorkoutExerciseInput
    coreCardioSet?: CoreCardioSetCreateNestedOneWithoutWorkoutExerciseInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
  }

  export type UserStrengthSetCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    create: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope = {
    data: UserStrengthSetCreateManyUserWorkoutExerciseInput | UserStrengthSetCreateManyUserWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserCardioSetCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    create: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope = {
    data: UserCardioSetCreateManyUserWorkoutExerciseInput | UserCardioSetCreateManyUserWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithoutUserWorkoutExercisesInput = {
    update: XOR<WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
    create: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    where?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseUpdateToOneWithWhereWithoutUserWorkoutExercisesInput = {
    where?: WorkoutExerciseWhereInput
    data: XOR<WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput
    coreCardioSet?: CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpsertWithoutUserWorkoutExercisesInput = {
    update: XOR<UserWorkoutUpdateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
    create: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    where?: UserWorkoutWhereInput
  }

  export type UserWorkoutUpdateToOneWithWhereWithoutUserWorkoutExercisesInput = {
    where?: UserWorkoutWhereInput
    data: XOR<UserWorkoutUpdateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    update: XOR<UserStrengthSetUpdateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
    create: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    data: XOR<UserStrengthSetUpdateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetScalarWhereInput
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetScalarWhereInput = {
    AND?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
    OR?: UserStrengthSetScalarWhereInput[]
    NOT?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
    id?: StringFilter<"UserStrengthSet"> | string
    reps?: IntFilter<"UserStrengthSet"> | number
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
  }

  export type UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    update: XOR<UserCardioSetUpdateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
    create: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    data: XOR<UserCardioSetUpdateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetScalarWhereInput
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetScalarWhereInput = {
    AND?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
    OR?: UserCardioSetScalarWhereInput[]
    NOT?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
    id?: StringFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    calorieTarget?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
  }

  export type UserCreateWithoutUserWorkoutInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutUserWorkoutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseCreateWithoutUserWorkoutInput = {
    id?: string
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSet?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    workoutExerciseId: string
    userStrengthSet?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSet?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope = {
    data: UserWorkoutExerciseCreateManyUserWorkoutInput | UserWorkoutExerciseCreateManyUserWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ProgramCreateWithoutUserWorkoutInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutUserWorkoutInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
  }

  export type WorkoutCreateWithoutUserWorkoutsInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutUserWorkoutsInput = {
    id?: string
    name?: string | null
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutUserWorkoutsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
  }

  export type UserUpsertWithoutUserWorkoutInput = {
    update: XOR<UserUpdateWithoutUserWorkoutInput, UserUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserWorkoutInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserWorkoutInput, UserUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    update: XOR<UserWorkoutExerciseUpdateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseScalarWhereInput
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutInput>
  }

  export type ProgramUpsertWithoutUserWorkoutInput = {
    update: XOR<ProgramUpdateWithoutUserWorkoutInput, ProgramUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutUserWorkoutInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutUserWorkoutInput, ProgramUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type ProgramUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WorkoutUpsertWithoutUserWorkoutsInput = {
    update: XOR<WorkoutUpdateWithoutUserWorkoutsInput, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
    create: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutUserWorkoutsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutUserWorkoutsInput, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
  }

  export type WorkoutUpdateWithoutUserWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutUserWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type ProgramCreateManyOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutCreateManyOwnerInput = {
    id?: string
    name?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type ProgramUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput
    coreCardioSet?: CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyCoreCardioSetInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetWorkoutTimeCreateManyCoreCardioSetInput = {
    id?: string
    workTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetAvgSpeedCreateManyCoreCardioSetInput = {
    id?: string
    avgSpeed?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetDistanceCreateManyCoreCardioSetInput = {
    id?: string
    distance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreCardioSetCalorieTargetCreateManyCoreCardioSetInput = {
    id?: string
    calorieTarget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeUncheckedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetWorkoutTimeUncheckedUpdateManyWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedUncheckedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetAvgSpeedUncheckedUpdateManyWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceUncheckedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetDistanceUncheckedUpdateManyWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetUncheckedUpdateWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreCardioSetCalorieTargetUncheckedUpdateManyWithoutCoreCardioSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyCoreStrengthSetInput = {
    id?: string
    order?: number
    notes?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetRepsCreateManyCoreStrengthSetInput = {
    id?: string
    reps?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoreStrengthSetWeightCreateManyCoreStrengthSetInput = {
    id?: string
    isBodyWeight?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreCardioSet?: CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsUncheckedUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetRepsUncheckedUpdateManyWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightUncheckedUpdateWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoreStrengthSetWeightUncheckedUpdateManyWithoutCoreStrengthSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateManyProgramInput = {
    id?: string
    workoutId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type ProgramWorkoutUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    coreStrengthSetId?: string | null
    coreCardioSetId?: string | null
    exerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateManyWorkoutInput = {
    id?: string
    programId: string
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    createdAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coreStrengthSet?: CoreStrengthSetUpdateOneWithoutWorkoutExerciseNestedInput
    coreCardioSet?: CoreCardioSetUpdateOneWithoutWorkoutExerciseNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coreStrengthSetId?: NullableStringFieldUpdateOperationsInput | string | null
    coreCardioSetId?: NullableStringFieldUpdateOperationsInput | string | null
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateManyWorkoutExerciseInput = {
    id?: string
    userWorkoutId: string
  }

  export type UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSet?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSet?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStrengthSetCreateManyUserWorkoutExerciseInput = {
    id?: string
    reps?: number
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetCreateManyUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    calorieTarget?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    calorieTarget?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateManyUserWorkoutInput = {
    id?: string
    workoutExerciseId: string
  }

  export type UserWorkoutExerciseUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSet?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userStrengthSet?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSet?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}