
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model Muscle
 * 
 */
export type Muscle = $Result.DefaultSelection<Prisma.$MusclePayload>
/**
 * Model MuscleAlias
 * 
 */
export type MuscleAlias = $Result.DefaultSelection<Prisma.$MuscleAliasPayload>
/**
 * Model Equipment
 * 
 */
export type Equipment = $Result.DefaultSelection<Prisma.$EquipmentPayload>
/**
 * Model EquipmentCategory
 * 
 */
export type EquipmentCategory = $Result.DefaultSelection<Prisma.$EquipmentCategoryPayload>
/**
 * Model UserCardioSet
 * 
 */
export type UserCardioSet = $Result.DefaultSelection<Prisma.$UserCardioSetPayload>
/**
 * Model UserStrengthSet
 * 
 */
export type UserStrengthSet = $Result.DefaultSelection<Prisma.$UserStrengthSetPayload>
/**
 * Model Program
 * 
 */
export type Program = $Result.DefaultSelection<Prisma.$ProgramPayload>
/**
 * Model ProgramWorkout
 * 
 */
export type ProgramWorkout = $Result.DefaultSelection<Prisma.$ProgramWorkoutPayload>
/**
 * Model Workout
 * 
 */
export type Workout = $Result.DefaultSelection<Prisma.$WorkoutPayload>
/**
 * Model WorkoutExercise
 * 
 */
export type WorkoutExercise = $Result.DefaultSelection<Prisma.$WorkoutExercisePayload>
/**
 * Model UserWorkoutExercise
 * 
 */
export type UserWorkoutExercise = $Result.DefaultSelection<Prisma.$UserWorkoutExercisePayload>
/**
 * Model UserWorkout
 * 
 */
export type UserWorkout = $Result.DefaultSelection<Prisma.$UserWorkoutPayload>
/**
 * Model FoodItem
 * 
 */
export type FoodItem = $Result.DefaultSelection<Prisma.$FoodItemPayload>
/**
 * Model FoodItemLabel
 * 
 */
export type FoodItemLabel = $Result.DefaultSelection<Prisma.$FoodItemLabelPayload>
/**
 * Model FoodItemImg
 * 
 */
export type FoodItemImg = $Result.DefaultSelection<Prisma.$FoodItemImgPayload>
/**
 * Model FoodItemBrand
 * 
 */
export type FoodItemBrand = $Result.DefaultSelection<Prisma.$FoodItemBrandPayload>
/**
 * Model FoodItemCategory
 * 
 */
export type FoodItemCategory = $Result.DefaultSelection<Prisma.$FoodItemCategoryPayload>
/**
 * Model Meal
 * 
 */
export type Meal = $Result.DefaultSelection<Prisma.$MealPayload>
/**
 * Model MealFoodItem
 * 
 */
export type MealFoodItem = $Result.DefaultSelection<Prisma.$MealFoodItemPayload>
/**
 * Model UserMeal
 * 
 */
export type UserMeal = $Result.DefaultSelection<Prisma.$UserMealPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ExerciseType: {
  strength: 'strength',
  cardio: 'cardio',
  flexibility: 'flexibility',
  miscellaneous: 'miscellaneous'
};

export type ExerciseType = (typeof ExerciseType)[keyof typeof ExerciseType]


export const DaysOfWeek: {
  sunday: 'sunday',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday'
};

export type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek]


export const MealType: {
  breakfast: 'breakfast',
  lunch: 'lunch',
  dinner: 'dinner',
  snack: 'snack'
};

export type MealType = (typeof MealType)[keyof typeof MealType]


export const WorkoutGoal: {
  hypertrophy: 'hypertrophy'
};

export type WorkoutGoal = (typeof WorkoutGoal)[keyof typeof WorkoutGoal]


export const WorkoutLevel: {
  beginner: 'beginner'
};

export type WorkoutLevel = (typeof WorkoutLevel)[keyof typeof WorkoutLevel]

}

export type ExerciseType = $Enums.ExerciseType

export const ExerciseType: typeof $Enums.ExerciseType

export type DaysOfWeek = $Enums.DaysOfWeek

export const DaysOfWeek: typeof $Enums.DaysOfWeek

export type MealType = $Enums.MealType

export const MealType: typeof $Enums.MealType

export type WorkoutGoal = $Enums.WorkoutGoal

export const WorkoutGoal: typeof $Enums.WorkoutGoal

export type WorkoutLevel = $Enums.WorkoutLevel

export const WorkoutLevel: typeof $Enums.WorkoutLevel

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.muscle`: Exposes CRUD operations for the **Muscle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Muscles
    * const muscles = await prisma.muscle.findMany()
    * ```
    */
  get muscle(): Prisma.MuscleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.muscleAlias`: Exposes CRUD operations for the **MuscleAlias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MuscleAliases
    * const muscleAliases = await prisma.muscleAlias.findMany()
    * ```
    */
  get muscleAlias(): Prisma.MuscleAliasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipment`: Exposes CRUD operations for the **Equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipment
    * const equipment = await prisma.equipment.findMany()
    * ```
    */
  get equipment(): Prisma.EquipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipmentCategory`: Exposes CRUD operations for the **EquipmentCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EquipmentCategories
    * const equipmentCategories = await prisma.equipmentCategory.findMany()
    * ```
    */
  get equipmentCategory(): Prisma.EquipmentCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCardioSet`: Exposes CRUD operations for the **UserCardioSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCardioSets
    * const userCardioSets = await prisma.userCardioSet.findMany()
    * ```
    */
  get userCardioSet(): Prisma.UserCardioSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStrengthSet`: Exposes CRUD operations for the **UserStrengthSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStrengthSets
    * const userStrengthSets = await prisma.userStrengthSet.findMany()
    * ```
    */
  get userStrengthSet(): Prisma.UserStrengthSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programs
    * const programs = await prisma.program.findMany()
    * ```
    */
  get program(): Prisma.ProgramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.programWorkout`: Exposes CRUD operations for the **ProgramWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProgramWorkouts
    * const programWorkouts = await prisma.programWorkout.findMany()
    * ```
    */
  get programWorkout(): Prisma.ProgramWorkoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **Workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.WorkoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutExercise`: Exposes CRUD operations for the **WorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutExercises
    * const workoutExercises = await prisma.workoutExercise.findMany()
    * ```
    */
  get workoutExercise(): Prisma.WorkoutExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userWorkoutExercise`: Exposes CRUD operations for the **UserWorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWorkoutExercises
    * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany()
    * ```
    */
  get userWorkoutExercise(): Prisma.UserWorkoutExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userWorkout`: Exposes CRUD operations for the **UserWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWorkouts
    * const userWorkouts = await prisma.userWorkout.findMany()
    * ```
    */
  get userWorkout(): Prisma.UserWorkoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodItem`: Exposes CRUD operations for the **FoodItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItems
    * const foodItems = await prisma.foodItem.findMany()
    * ```
    */
  get foodItem(): Prisma.FoodItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodItemLabel`: Exposes CRUD operations for the **FoodItemLabel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItemLabels
    * const foodItemLabels = await prisma.foodItemLabel.findMany()
    * ```
    */
  get foodItemLabel(): Prisma.FoodItemLabelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodItemImg`: Exposes CRUD operations for the **FoodItemImg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItemImgs
    * const foodItemImgs = await prisma.foodItemImg.findMany()
    * ```
    */
  get foodItemImg(): Prisma.FoodItemImgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodItemBrand`: Exposes CRUD operations for the **FoodItemBrand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItemBrands
    * const foodItemBrands = await prisma.foodItemBrand.findMany()
    * ```
    */
  get foodItemBrand(): Prisma.FoodItemBrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodItemCategory`: Exposes CRUD operations for the **FoodItemCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodItemCategories
    * const foodItemCategories = await prisma.foodItemCategory.findMany()
    * ```
    */
  get foodItemCategory(): Prisma.FoodItemCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meal`: Exposes CRUD operations for the **Meal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meals
    * const meals = await prisma.meal.findMany()
    * ```
    */
  get meal(): Prisma.MealDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mealFoodItem`: Exposes CRUD operations for the **MealFoodItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealFoodItems
    * const mealFoodItems = await prisma.mealFoodItem.findMany()
    * ```
    */
  get mealFoodItem(): Prisma.MealFoodItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userMeal`: Exposes CRUD operations for the **UserMeal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMeals
    * const userMeals = await prisma.userMeal.findMany()
    * ```
    */
  get userMeal(): Prisma.UserMealDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.0
   * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Exercise: 'Exercise',
    Muscle: 'Muscle',
    MuscleAlias: 'MuscleAlias',
    Equipment: 'Equipment',
    EquipmentCategory: 'EquipmentCategory',
    UserCardioSet: 'UserCardioSet',
    UserStrengthSet: 'UserStrengthSet',
    Program: 'Program',
    ProgramWorkout: 'ProgramWorkout',
    Workout: 'Workout',
    WorkoutExercise: 'WorkoutExercise',
    UserWorkoutExercise: 'UserWorkoutExercise',
    UserWorkout: 'UserWorkout',
    FoodItem: 'FoodItem',
    FoodItemLabel: 'FoodItemLabel',
    FoodItemImg: 'FoodItemImg',
    FoodItemBrand: 'FoodItemBrand',
    FoodItemCategory: 'FoodItemCategory',
    Meal: 'Meal',
    MealFoodItem: 'MealFoodItem',
    UserMeal: 'UserMeal',
    Image: 'Image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "exercise" | "muscle" | "muscleAlias" | "equipment" | "equipmentCategory" | "userCardioSet" | "userStrengthSet" | "program" | "programWorkout" | "workout" | "workoutExercise" | "userWorkoutExercise" | "userWorkout" | "foodItem" | "foodItemLabel" | "foodItemImg" | "foodItemBrand" | "foodItemCategory" | "meal" | "mealFoodItem" | "userMeal" | "image"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      Muscle: {
        payload: Prisma.$MusclePayload<ExtArgs>
        fields: Prisma.MuscleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MuscleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MuscleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          findFirst: {
            args: Prisma.MuscleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MuscleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          findMany: {
            args: Prisma.MuscleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>[]
          }
          create: {
            args: Prisma.MuscleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          createMany: {
            args: Prisma.MuscleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MuscleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>[]
          }
          delete: {
            args: Prisma.MuscleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          update: {
            args: Prisma.MuscleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          deleteMany: {
            args: Prisma.MuscleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MuscleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MuscleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>[]
          }
          upsert: {
            args: Prisma.MuscleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          aggregate: {
            args: Prisma.MuscleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMuscle>
          }
          groupBy: {
            args: Prisma.MuscleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MuscleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MuscleCountArgs<ExtArgs>
            result: $Utils.Optional<MuscleCountAggregateOutputType> | number
          }
        }
      }
      MuscleAlias: {
        payload: Prisma.$MuscleAliasPayload<ExtArgs>
        fields: Prisma.MuscleAliasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MuscleAliasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MuscleAliasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          findFirst: {
            args: Prisma.MuscleAliasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MuscleAliasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          findMany: {
            args: Prisma.MuscleAliasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>[]
          }
          create: {
            args: Prisma.MuscleAliasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          createMany: {
            args: Prisma.MuscleAliasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MuscleAliasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>[]
          }
          delete: {
            args: Prisma.MuscleAliasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          update: {
            args: Prisma.MuscleAliasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          deleteMany: {
            args: Prisma.MuscleAliasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MuscleAliasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MuscleAliasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>[]
          }
          upsert: {
            args: Prisma.MuscleAliasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MuscleAliasPayload>
          }
          aggregate: {
            args: Prisma.MuscleAliasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMuscleAlias>
          }
          groupBy: {
            args: Prisma.MuscleAliasGroupByArgs<ExtArgs>
            result: $Utils.Optional<MuscleAliasGroupByOutputType>[]
          }
          count: {
            args: Prisma.MuscleAliasCountArgs<ExtArgs>
            result: $Utils.Optional<MuscleAliasCountAggregateOutputType> | number
          }
        }
      }
      Equipment: {
        payload: Prisma.$EquipmentPayload<ExtArgs>
        fields: Prisma.EquipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findFirst: {
            args: Prisma.EquipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findMany: {
            args: Prisma.EquipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          create: {
            args: Prisma.EquipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          createMany: {
            args: Prisma.EquipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          delete: {
            args: Prisma.EquipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          update: {
            args: Prisma.EquipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          deleteMany: {
            args: Prisma.EquipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          upsert: {
            args: Prisma.EquipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          aggregate: {
            args: Prisma.EquipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipment>
          }
          groupBy: {
            args: Prisma.EquipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipmentCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCountAggregateOutputType> | number
          }
        }
      }
      EquipmentCategory: {
        payload: Prisma.$EquipmentCategoryPayload<ExtArgs>
        fields: Prisma.EquipmentCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipmentCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipmentCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          findFirst: {
            args: Prisma.EquipmentCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipmentCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          findMany: {
            args: Prisma.EquipmentCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>[]
          }
          create: {
            args: Prisma.EquipmentCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          createMany: {
            args: Prisma.EquipmentCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipmentCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>[]
          }
          delete: {
            args: Prisma.EquipmentCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          update: {
            args: Prisma.EquipmentCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          deleteMany: {
            args: Prisma.EquipmentCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipmentCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipmentCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>[]
          }
          upsert: {
            args: Prisma.EquipmentCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentCategoryPayload>
          }
          aggregate: {
            args: Prisma.EquipmentCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipmentCategory>
          }
          groupBy: {
            args: Prisma.EquipmentCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipmentCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCategoryCountAggregateOutputType> | number
          }
        }
      }
      UserCardioSet: {
        payload: Prisma.$UserCardioSetPayload<ExtArgs>
        fields: Prisma.UserCardioSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCardioSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCardioSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          findFirst: {
            args: Prisma.UserCardioSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCardioSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          findMany: {
            args: Prisma.UserCardioSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          create: {
            args: Prisma.UserCardioSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          createMany: {
            args: Prisma.UserCardioSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCardioSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          delete: {
            args: Prisma.UserCardioSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          update: {
            args: Prisma.UserCardioSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          deleteMany: {
            args: Prisma.UserCardioSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCardioSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCardioSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>[]
          }
          upsert: {
            args: Prisma.UserCardioSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardioSetPayload>
          }
          aggregate: {
            args: Prisma.UserCardioSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCardioSet>
          }
          groupBy: {
            args: Prisma.UserCardioSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCardioSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCardioSetCountArgs<ExtArgs>
            result: $Utils.Optional<UserCardioSetCountAggregateOutputType> | number
          }
        }
      }
      UserStrengthSet: {
        payload: Prisma.$UserStrengthSetPayload<ExtArgs>
        fields: Prisma.UserStrengthSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStrengthSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStrengthSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          findFirst: {
            args: Prisma.UserStrengthSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStrengthSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          findMany: {
            args: Prisma.UserStrengthSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          create: {
            args: Prisma.UserStrengthSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          createMany: {
            args: Prisma.UserStrengthSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStrengthSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          delete: {
            args: Prisma.UserStrengthSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          update: {
            args: Prisma.UserStrengthSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          deleteMany: {
            args: Prisma.UserStrengthSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStrengthSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStrengthSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>[]
          }
          upsert: {
            args: Prisma.UserStrengthSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStrengthSetPayload>
          }
          aggregate: {
            args: Prisma.UserStrengthSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStrengthSet>
          }
          groupBy: {
            args: Prisma.UserStrengthSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStrengthSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStrengthSetCountArgs<ExtArgs>
            result: $Utils.Optional<UserStrengthSetCountAggregateOutputType> | number
          }
        }
      }
      Program: {
        payload: Prisma.$ProgramPayload<ExtArgs>
        fields: Prisma.ProgramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findFirst: {
            args: Prisma.ProgramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findMany: {
            args: Prisma.ProgramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          create: {
            args: Prisma.ProgramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          createMany: {
            args: Prisma.ProgramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          delete: {
            args: Prisma.ProgramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          update: {
            args: Prisma.ProgramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          deleteMany: {
            args: Prisma.ProgramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          upsert: {
            args: Prisma.ProgramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          aggregate: {
            args: Prisma.ProgramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgram>
          }
          groupBy: {
            args: Prisma.ProgramGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramCountAggregateOutputType> | number
          }
        }
      }
      ProgramWorkout: {
        payload: Prisma.$ProgramWorkoutPayload<ExtArgs>
        fields: Prisma.ProgramWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramWorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          findFirst: {
            args: Prisma.ProgramWorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramWorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          findMany: {
            args: Prisma.ProgramWorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          create: {
            args: Prisma.ProgramWorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          createMany: {
            args: Prisma.ProgramWorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramWorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          delete: {
            args: Prisma.ProgramWorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          update: {
            args: Prisma.ProgramWorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.ProgramWorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramWorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>[]
          }
          upsert: {
            args: Prisma.ProgramWorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramWorkoutPayload>
          }
          aggregate: {
            args: Prisma.ProgramWorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgramWorkout>
          }
          groupBy: {
            args: Prisma.ProgramWorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramWorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramWorkoutCountAggregateOutputType> | number
          }
        }
      }
      Workout: {
        payload: Prisma.$WorkoutPayload<ExtArgs>
        fields: Prisma.WorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findFirst: {
            args: Prisma.WorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findMany: {
            args: Prisma.WorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          create: {
            args: Prisma.WorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          createMany: {
            args: Prisma.WorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          delete: {
            args: Prisma.WorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          update: {
            args: Prisma.WorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          upsert: {
            args: Prisma.WorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.WorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      WorkoutExercise: {
        payload: Prisma.$WorkoutExercisePayload<ExtArgs>
        fields: Prisma.WorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          update: {
            args: Prisma.WorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          upsert: {
            args: Prisma.WorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutExercise>
          }
          groupBy: {
            args: Prisma.WorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      UserWorkoutExercise: {
        payload: Prisma.$UserWorkoutExercisePayload<ExtArgs>
        fields: Prisma.UserWorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserWorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.UserWorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.UserWorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.UserWorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.UserWorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.UserWorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          update: {
            args: Prisma.UserWorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.UserWorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserWorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>[]
          }
          upsert: {
            args: Prisma.UserWorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.UserWorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserWorkoutExercise>
          }
          groupBy: {
            args: Prisma.UserWorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserWorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      UserWorkout: {
        payload: Prisma.$UserWorkoutPayload<ExtArgs>
        fields: Prisma.UserWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserWorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserWorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          findFirst: {
            args: Prisma.UserWorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserWorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          findMany: {
            args: Prisma.UserWorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          create: {
            args: Prisma.UserWorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          createMany: {
            args: Prisma.UserWorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserWorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          delete: {
            args: Prisma.UserWorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          update: {
            args: Prisma.UserWorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.UserWorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserWorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserWorkoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>[]
          }
          upsert: {
            args: Prisma.UserWorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWorkoutPayload>
          }
          aggregate: {
            args: Prisma.UserWorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserWorkout>
          }
          groupBy: {
            args: Prisma.UserWorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserWorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<UserWorkoutCountAggregateOutputType> | number
          }
        }
      }
      FoodItem: {
        payload: Prisma.$FoodItemPayload<ExtArgs>
        fields: Prisma.FoodItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          findFirst: {
            args: Prisma.FoodItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          findMany: {
            args: Prisma.FoodItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>[]
          }
          create: {
            args: Prisma.FoodItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          createMany: {
            args: Prisma.FoodItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>[]
          }
          delete: {
            args: Prisma.FoodItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          update: {
            args: Prisma.FoodItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>[]
          }
          upsert: {
            args: Prisma.FoodItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemPayload>
          }
          aggregate: {
            args: Prisma.FoodItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItem>
          }
          groupBy: {
            args: Prisma.FoodItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemCountAggregateOutputType> | number
          }
        }
      }
      FoodItemLabel: {
        payload: Prisma.$FoodItemLabelPayload<ExtArgs>
        fields: Prisma.FoodItemLabelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemLabelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemLabelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          findFirst: {
            args: Prisma.FoodItemLabelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemLabelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          findMany: {
            args: Prisma.FoodItemLabelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>[]
          }
          create: {
            args: Prisma.FoodItemLabelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          createMany: {
            args: Prisma.FoodItemLabelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemLabelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>[]
          }
          delete: {
            args: Prisma.FoodItemLabelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          update: {
            args: Prisma.FoodItemLabelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemLabelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemLabelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodItemLabelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>[]
          }
          upsert: {
            args: Prisma.FoodItemLabelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemLabelPayload>
          }
          aggregate: {
            args: Prisma.FoodItemLabelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItemLabel>
          }
          groupBy: {
            args: Prisma.FoodItemLabelGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemLabelGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemLabelCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemLabelCountAggregateOutputType> | number
          }
        }
      }
      FoodItemImg: {
        payload: Prisma.$FoodItemImgPayload<ExtArgs>
        fields: Prisma.FoodItemImgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemImgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemImgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          findFirst: {
            args: Prisma.FoodItemImgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemImgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          findMany: {
            args: Prisma.FoodItemImgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>[]
          }
          create: {
            args: Prisma.FoodItemImgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          createMany: {
            args: Prisma.FoodItemImgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemImgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>[]
          }
          delete: {
            args: Prisma.FoodItemImgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          update: {
            args: Prisma.FoodItemImgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemImgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemImgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodItemImgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>[]
          }
          upsert: {
            args: Prisma.FoodItemImgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemImgPayload>
          }
          aggregate: {
            args: Prisma.FoodItemImgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItemImg>
          }
          groupBy: {
            args: Prisma.FoodItemImgGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemImgGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemImgCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemImgCountAggregateOutputType> | number
          }
        }
      }
      FoodItemBrand: {
        payload: Prisma.$FoodItemBrandPayload<ExtArgs>
        fields: Prisma.FoodItemBrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemBrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemBrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          findFirst: {
            args: Prisma.FoodItemBrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemBrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          findMany: {
            args: Prisma.FoodItemBrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>[]
          }
          create: {
            args: Prisma.FoodItemBrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          createMany: {
            args: Prisma.FoodItemBrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemBrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>[]
          }
          delete: {
            args: Prisma.FoodItemBrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          update: {
            args: Prisma.FoodItemBrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemBrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemBrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodItemBrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>[]
          }
          upsert: {
            args: Prisma.FoodItemBrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemBrandPayload>
          }
          aggregate: {
            args: Prisma.FoodItemBrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItemBrand>
          }
          groupBy: {
            args: Prisma.FoodItemBrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemBrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemBrandCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemBrandCountAggregateOutputType> | number
          }
        }
      }
      FoodItemCategory: {
        payload: Prisma.$FoodItemCategoryPayload<ExtArgs>
        fields: Prisma.FoodItemCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodItemCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodItemCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          findFirst: {
            args: Prisma.FoodItemCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodItemCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          findMany: {
            args: Prisma.FoodItemCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>[]
          }
          create: {
            args: Prisma.FoodItemCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          createMany: {
            args: Prisma.FoodItemCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodItemCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>[]
          }
          delete: {
            args: Prisma.FoodItemCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          update: {
            args: Prisma.FoodItemCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          deleteMany: {
            args: Prisma.FoodItemCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodItemCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodItemCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>[]
          }
          upsert: {
            args: Prisma.FoodItemCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodItemCategoryPayload>
          }
          aggregate: {
            args: Prisma.FoodItemCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodItemCategory>
          }
          groupBy: {
            args: Prisma.FoodItemCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodItemCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodItemCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<FoodItemCategoryCountAggregateOutputType> | number
          }
        }
      }
      Meal: {
        payload: Prisma.$MealPayload<ExtArgs>
        fields: Prisma.MealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findFirst: {
            args: Prisma.MealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findMany: {
            args: Prisma.MealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          create: {
            args: Prisma.MealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          createMany: {
            args: Prisma.MealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          delete: {
            args: Prisma.MealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          update: {
            args: Prisma.MealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          deleteMany: {
            args: Prisma.MealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MealUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          upsert: {
            args: Prisma.MealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          aggregate: {
            args: Prisma.MealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeal>
          }
          groupBy: {
            args: Prisma.MealGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealCountArgs<ExtArgs>
            result: $Utils.Optional<MealCountAggregateOutputType> | number
          }
        }
      }
      MealFoodItem: {
        payload: Prisma.$MealFoodItemPayload<ExtArgs>
        fields: Prisma.MealFoodItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealFoodItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealFoodItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          findFirst: {
            args: Prisma.MealFoodItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealFoodItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          findMany: {
            args: Prisma.MealFoodItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>[]
          }
          create: {
            args: Prisma.MealFoodItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          createMany: {
            args: Prisma.MealFoodItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealFoodItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>[]
          }
          delete: {
            args: Prisma.MealFoodItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          update: {
            args: Prisma.MealFoodItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          deleteMany: {
            args: Prisma.MealFoodItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealFoodItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MealFoodItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>[]
          }
          upsert: {
            args: Prisma.MealFoodItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodItemPayload>
          }
          aggregate: {
            args: Prisma.MealFoodItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealFoodItem>
          }
          groupBy: {
            args: Prisma.MealFoodItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealFoodItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealFoodItemCountArgs<ExtArgs>
            result: $Utils.Optional<MealFoodItemCountAggregateOutputType> | number
          }
        }
      }
      UserMeal: {
        payload: Prisma.$UserMealPayload<ExtArgs>
        fields: Prisma.UserMealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          findFirst: {
            args: Prisma.UserMealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          findMany: {
            args: Prisma.UserMealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>[]
          }
          create: {
            args: Prisma.UserMealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          createMany: {
            args: Prisma.UserMealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>[]
          }
          delete: {
            args: Prisma.UserMealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          update: {
            args: Prisma.UserMealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          deleteMany: {
            args: Prisma.UserMealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserMealUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>[]
          }
          upsert: {
            args: Prisma.UserMealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMealPayload>
          }
          aggregate: {
            args: Prisma.UserMealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMeal>
          }
          groupBy: {
            args: Prisma.UserMealGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMealGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMealCountArgs<ExtArgs>
            result: $Utils.Optional<UserMealCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    exercise?: ExerciseOmit
    muscle?: MuscleOmit
    muscleAlias?: MuscleAliasOmit
    equipment?: EquipmentOmit
    equipmentCategory?: EquipmentCategoryOmit
    userCardioSet?: UserCardioSetOmit
    userStrengthSet?: UserStrengthSetOmit
    program?: ProgramOmit
    programWorkout?: ProgramWorkoutOmit
    workout?: WorkoutOmit
    workoutExercise?: WorkoutExerciseOmit
    userWorkoutExercise?: UserWorkoutExerciseOmit
    userWorkout?: UserWorkoutOmit
    foodItem?: FoodItemOmit
    foodItemLabel?: FoodItemLabelOmit
    foodItemImg?: FoodItemImgOmit
    foodItemBrand?: FoodItemBrandOmit
    foodItemCategory?: FoodItemCategoryOmit
    meal?: MealOmit
    mealFoodItem?: MealFoodItemOmit
    userMeal?: UserMealOmit
    image?: ImageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    programs: number
    workouts: number
    userWorkout: number
    meals: number
    userMeals: number
    exercises: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programs?: boolean | UserCountOutputTypeCountProgramsArgs
    workouts?: boolean | UserCountOutputTypeCountWorkoutsArgs
    userWorkout?: boolean | UserCountOutputTypeCountUserWorkoutArgs
    meals?: boolean | UserCountOutputTypeCountMealsArgs
    userMeals?: boolean | UserCountOutputTypeCountUserMealsArgs
    exercises?: boolean | UserCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProgramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMealWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    equipment: number
    muscles: number
    workoutExercises: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | ExerciseCountOutputTypeCountEquipmentArgs
    muscles?: boolean | ExerciseCountOutputTypeCountMusclesArgs
    workoutExercises?: boolean | ExerciseCountOutputTypeCountWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountEquipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountMusclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }


  /**
   * Count Type MuscleCountOutputType
   */

  export type MuscleCountOutputType = {
    exercises: number
    aliases: number
  }

  export type MuscleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | MuscleCountOutputTypeCountExercisesArgs
    aliases?: boolean | MuscleCountOutputTypeCountAliasesArgs
  }

  // Custom InputTypes
  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleCountOutputType
     */
    select?: MuscleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeCountAliasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleAliasWhereInput
  }


  /**
   * Count Type EquipmentCountOutputType
   */

  export type EquipmentCountOutputType = {
    exercises: number
    categories: number
  }

  export type EquipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | EquipmentCountOutputTypeCountExercisesArgs
    categories?: boolean | EquipmentCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCountOutputType
     */
    select?: EquipmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentCategoryWhereInput
  }


  /**
   * Count Type EquipmentCategoryCountOutputType
   */

  export type EquipmentCategoryCountOutputType = {
    equipments: number
  }

  export type EquipmentCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipments?: boolean | EquipmentCategoryCountOutputTypeCountEquipmentsArgs
  }

  // Custom InputTypes
  /**
   * EquipmentCategoryCountOutputType without action
   */
  export type EquipmentCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategoryCountOutputType
     */
    select?: EquipmentCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentCategoryCountOutputType without action
   */
  export type EquipmentCategoryCountOutputTypeCountEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
  }


  /**
   * Count Type ProgramCountOutputType
   */

  export type ProgramCountOutputType = {
    programWorkouts: number
    userWorkout: number
  }

  export type ProgramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programWorkouts?: boolean | ProgramCountOutputTypeCountProgramWorkoutsArgs
    userWorkout?: boolean | ProgramCountOutputTypeCountUserWorkoutArgs
  }

  // Custom InputTypes
  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramCountOutputType
     */
    select?: ProgramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountProgramWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountUserWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }


  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    workoutExercises: number
    programWorkouts: number
    userWorkouts: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercises?: boolean | WorkoutCountOutputTypeCountWorkoutExercisesArgs
    programWorkouts?: boolean | WorkoutCountOutputTypeCountProgramWorkoutsArgs
    userWorkouts?: boolean | WorkoutCountOutputTypeCountUserWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountProgramWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountUserWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
  }


  /**
   * Count Type WorkoutExerciseCountOutputType
   */

  export type WorkoutExerciseCountOutputType = {
    userWorkoutExercises: number
  }

  export type WorkoutExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercises?: boolean | WorkoutExerciseCountOutputTypeCountUserWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExerciseCountOutputType
     */
    select?: WorkoutExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutExerciseCountOutputType without action
   */
  export type WorkoutExerciseCountOutputTypeCountUserWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
  }


  /**
   * Count Type UserWorkoutExerciseCountOutputType
   */

  export type UserWorkoutExerciseCountOutputType = {
    userStrengthSets: number
    userCardioSets: number
  }

  export type UserWorkoutExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStrengthSets?: boolean | UserWorkoutExerciseCountOutputTypeCountUserStrengthSetsArgs
    userCardioSets?: boolean | UserWorkoutExerciseCountOutputTypeCountUserCardioSetsArgs
  }

  // Custom InputTypes
  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExerciseCountOutputType
     */
    select?: UserWorkoutExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeCountUserStrengthSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStrengthSetWhereInput
  }

  /**
   * UserWorkoutExerciseCountOutputType without action
   */
  export type UserWorkoutExerciseCountOutputTypeCountUserCardioSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardioSetWhereInput
  }


  /**
   * Count Type UserWorkoutCountOutputType
   */

  export type UserWorkoutCountOutputType = {
    userWorkoutExercises: number
  }

  export type UserWorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercises?: boolean | UserWorkoutCountOutputTypeCountUserWorkoutExercisesArgs
  }

  // Custom InputTypes
  /**
   * UserWorkoutCountOutputType without action
   */
  export type UserWorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutCountOutputType
     */
    select?: UserWorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserWorkoutCountOutputType without action
   */
  export type UserWorkoutCountOutputTypeCountUserWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
  }


  /**
   * Count Type FoodItemCountOutputType
   */

  export type FoodItemCountOutputType = {
    categories: number
    labels: number
    mealFoodItem: number
    images: number
  }

  export type FoodItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | FoodItemCountOutputTypeCountCategoriesArgs
    labels?: boolean | FoodItemCountOutputTypeCountLabelsArgs
    mealFoodItem?: boolean | FoodItemCountOutputTypeCountMealFoodItemArgs
    images?: boolean | FoodItemCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * FoodItemCountOutputType without action
   */
  export type FoodItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCountOutputType
     */
    select?: FoodItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodItemCountOutputType without action
   */
  export type FoodItemCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemCategoryWhereInput
  }

  /**
   * FoodItemCountOutputType without action
   */
  export type FoodItemCountOutputTypeCountLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemLabelWhereInput
  }

  /**
   * FoodItemCountOutputType without action
   */
  export type FoodItemCountOutputTypeCountMealFoodItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodItemWhereInput
  }

  /**
   * FoodItemCountOutputType without action
   */
  export type FoodItemCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemImgWhereInput
  }


  /**
   * Count Type FoodItemLabelCountOutputType
   */

  export type FoodItemLabelCountOutputType = {
    foodItems: number
  }

  export type FoodItemLabelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemLabelCountOutputTypeCountFoodItemsArgs
  }

  // Custom InputTypes
  /**
   * FoodItemLabelCountOutputType without action
   */
  export type FoodItemLabelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabelCountOutputType
     */
    select?: FoodItemLabelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodItemLabelCountOutputType without action
   */
  export type FoodItemLabelCountOutputTypeCountFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
  }


  /**
   * Count Type FoodItemBrandCountOutputType
   */

  export type FoodItemBrandCountOutputType = {
    foodItems: number
  }

  export type FoodItemBrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemBrandCountOutputTypeCountFoodItemsArgs
  }

  // Custom InputTypes
  /**
   * FoodItemBrandCountOutputType without action
   */
  export type FoodItemBrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrandCountOutputType
     */
    select?: FoodItemBrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodItemBrandCountOutputType without action
   */
  export type FoodItemBrandCountOutputTypeCountFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
  }


  /**
   * Count Type FoodItemCategoryCountOutputType
   */

  export type FoodItemCategoryCountOutputType = {
    foodItems: number
  }

  export type FoodItemCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemCategoryCountOutputTypeCountFoodItemsArgs
  }

  // Custom InputTypes
  /**
   * FoodItemCategoryCountOutputType without action
   */
  export type FoodItemCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategoryCountOutputType
     */
    select?: FoodItemCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodItemCategoryCountOutputType without action
   */
  export type FoodItemCategoryCountOutputTypeCountFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
  }


  /**
   * Count Type MealCountOutputType
   */

  export type MealCountOutputType = {
    mealFoodItems: number
    userMeals: number
    images: number
  }

  export type MealCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealFoodItems?: boolean | MealCountOutputTypeCountMealFoodItemsArgs
    userMeals?: boolean | MealCountOutputTypeCountUserMealsArgs
    images?: boolean | MealCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCountOutputType
     */
    select?: MealCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountMealFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodItemWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountUserMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMealWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    googleId: number
    firstName: number
    lastName: number
    imgUrl: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    googleId?: true
    firstName?: true
    lastName?: true
    imgUrl?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string | null
    googleId: string | null
    firstName: string | null
    lastName: string | null
    imgUrl: string | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    programs?: boolean | User$programsArgs<ExtArgs>
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    userWorkout?: boolean | User$userWorkoutArgs<ExtArgs>
    meals?: boolean | User$mealsArgs<ExtArgs>
    userMeals?: boolean | User$userMealsArgs<ExtArgs>
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    googleId?: boolean
    firstName?: boolean
    lastName?: boolean
    imgUrl?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "googleId" | "firstName" | "lastName" | "imgUrl" | "isAdmin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programs?: boolean | User$programsArgs<ExtArgs>
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    userWorkout?: boolean | User$userWorkoutArgs<ExtArgs>
    meals?: boolean | User$mealsArgs<ExtArgs>
    userMeals?: boolean | User$userMealsArgs<ExtArgs>
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      programs: Prisma.$ProgramPayload<ExtArgs>[]
      workouts: Prisma.$WorkoutPayload<ExtArgs>[]
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>[]
      meals: Prisma.$MealPayload<ExtArgs>[]
      userMeals: Prisma.$UserMealPayload<ExtArgs>[]
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string | null
      googleId: string | null
      firstName: string | null
      lastName: string | null
      imgUrl: string | null
      isAdmin: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programs<T extends User$programsArgs<ExtArgs> = {}>(args?: Subset<T, User$programsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workouts<T extends User$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkout<T extends User$userWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, User$userWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meals<T extends User$mealsArgs<ExtArgs> = {}>(args?: Subset<T, User$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userMeals<T extends User$userMealsArgs<ExtArgs> = {}>(args?: Subset<T, User$userMealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    exercises<T extends User$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, User$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly imgUrl: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.programs
   */
  export type User$programsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    cursor?: ProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * User.workouts
   */
  export type User$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * User.userWorkout
   */
  export type User$userWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * User.meals
   */
  export type User$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    where?: MealWhereInput
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    cursor?: MealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * User.userMeals
   */
  export type User$userMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    where?: UserMealWhereInput
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    cursor?: UserMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMealScalarFieldEnum | UserMealScalarFieldEnum[]
  }

  /**
   * User.exercises
   */
  export type User$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    youtubeUrl: string | null
    notes: string | null
    isCompounded: boolean | null
    type: $Enums.ExerciseType | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    youtubeUrl: string | null
    notes: string | null
    isCompounded: boolean | null
    type: $Enums.ExerciseType | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    youtubeUrl: number
    notes: number
    isCompounded: number
    type: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    notes?: true
    isCompounded?: true
    type?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    notes?: true
    isCompounded?: true
    type?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    youtubeUrl?: true
    notes?: true
    isCompounded?: true
    type?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    youtubeUrl: string
    notes: string | null
    isCompounded: boolean
    type: $Enums.ExerciseType
    ownerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    notes?: boolean
    isCompounded?: boolean
    type?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipment?: boolean | Exercise$equipmentArgs<ExtArgs>
    muscles?: boolean | Exercise$musclesArgs<ExtArgs>
    workoutExercises?: boolean | Exercise$workoutExercisesArgs<ExtArgs>
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    notes?: boolean
    isCompounded?: boolean
    type?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    notes?: boolean
    isCompounded?: boolean
    type?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    youtubeUrl?: boolean
    notes?: boolean
    isCompounded?: boolean
    type?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "youtubeUrl" | "notes" | "isCompounded" | "type" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["exercise"]>
  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | Exercise$equipmentArgs<ExtArgs>
    muscles?: boolean | Exercise$musclesArgs<ExtArgs>
    workoutExercises?: boolean | Exercise$workoutExercisesArgs<ExtArgs>
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
  }
  export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Exercise$ownerArgs<ExtArgs>
  }

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      equipment: Prisma.$EquipmentPayload<ExtArgs>[]
      muscles: Prisma.$MusclePayload<ExtArgs>[]
      workoutExercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      youtubeUrl: string
      notes: string | null
      isCompounded: boolean
      type: $Enums.ExerciseType
      ownerId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipment<T extends Exercise$equipmentArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$equipmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    muscles<T extends Exercise$musclesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$musclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workoutExercises<T extends Exercise$workoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends Exercise$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly youtubeUrl: FieldRef<"Exercise", 'String'>
    readonly notes: FieldRef<"Exercise", 'String'>
    readonly isCompounded: FieldRef<"Exercise", 'Boolean'>
    readonly type: FieldRef<"Exercise", 'ExerciseType'>
    readonly ownerId: FieldRef<"Exercise", 'String'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedAt: FieldRef<"Exercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise updateManyAndReturn
   */
  export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to delete.
     */
    limit?: number
  }

  /**
   * Exercise.equipment
   */
  export type Exercise$equipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    cursor?: EquipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Exercise.muscles
   */
  export type Exercise$musclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    where?: MuscleWhereInput
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    cursor?: MuscleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Exercise.workoutExercises
   */
  export type Exercise$workoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Exercise.owner
   */
  export type Exercise$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model Muscle
   */

  export type AggregateMuscle = {
    _count: MuscleCountAggregateOutputType | null
    _avg: MuscleAvgAggregateOutputType | null
    _sum: MuscleSumAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  export type MuscleAvgAggregateOutputType = {
    order: number | null
  }

  export type MuscleSumAggregateOutputType = {
    order: number | null
  }

  export type MuscleMinAggregateOutputType = {
    id: string | null
    name: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleCountAggregateOutputType = {
    id: number
    name: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MuscleAvgAggregateInputType = {
    order?: true
  }

  export type MuscleSumAggregateInputType = {
    order?: true
  }

  export type MuscleMinAggregateInputType = {
    id?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleMaxAggregateInputType = {
    id?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleCountAggregateInputType = {
    id?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MuscleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Muscle to aggregate.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Muscles
    **/
    _count?: true | MuscleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MuscleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MuscleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MuscleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MuscleMaxAggregateInputType
  }

  export type GetMuscleAggregateType<T extends MuscleAggregateArgs> = {
        [P in keyof T & keyof AggregateMuscle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuscle[P]>
      : GetScalarType<T[P], AggregateMuscle[P]>
  }




  export type MuscleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleWhereInput
    orderBy?: MuscleOrderByWithAggregationInput | MuscleOrderByWithAggregationInput[]
    by: MuscleScalarFieldEnum[] | MuscleScalarFieldEnum
    having?: MuscleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MuscleCountAggregateInputType | true
    _avg?: MuscleAvgAggregateInputType
    _sum?: MuscleSumAggregateInputType
    _min?: MuscleMinAggregateInputType
    _max?: MuscleMaxAggregateInputType
  }

  export type MuscleGroupByOutputType = {
    id: string
    name: string
    order: number
    createdAt: Date
    updatedAt: Date
    _count: MuscleCountAggregateOutputType | null
    _avg: MuscleAvgAggregateOutputType | null
    _sum: MuscleSumAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  type GetMuscleGroupByPayload<T extends MuscleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MuscleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MuscleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MuscleGroupByOutputType[P]>
            : GetScalarType<T[P], MuscleGroupByOutputType[P]>
        }
      >
    >


  export type MuscleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercises?: boolean | Muscle$exercisesArgs<ExtArgs>
    aliases?: boolean | Muscle$aliasesArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscle"]>

  export type MuscleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["muscle"]>

  export type MuscleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["muscle"]>

  export type MuscleSelectScalar = {
    id?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MuscleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["muscle"]>
  export type MuscleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Muscle$exercisesArgs<ExtArgs>
    aliases?: boolean | Muscle$aliasesArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MuscleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MuscleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MusclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Muscle"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      aliases: Prisma.$MuscleAliasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["muscle"]>
    composites: {}
  }

  type MuscleGetPayload<S extends boolean | null | undefined | MuscleDefaultArgs> = $Result.GetResult<Prisma.$MusclePayload, S>

  type MuscleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MuscleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: MuscleCountAggregateInputType | true
    }

  export interface MuscleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Muscle'], meta: { name: 'Muscle' } }
    /**
     * Find zero or one Muscle that matches the filter.
     * @param {MuscleFindUniqueArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MuscleFindUniqueArgs>(args: SelectSubset<T, MuscleFindUniqueArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Muscle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MuscleFindUniqueOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MuscleFindUniqueOrThrowArgs>(args: SelectSubset<T, MuscleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Muscle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindFirstArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MuscleFindFirstArgs>(args?: SelectSubset<T, MuscleFindFirstArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Muscle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindFirstOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MuscleFindFirstOrThrowArgs>(args?: SelectSubset<T, MuscleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Muscles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Muscles
     * const muscles = await prisma.muscle.findMany()
     * 
     * // Get first 10 Muscles
     * const muscles = await prisma.muscle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const muscleWithIdOnly = await prisma.muscle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MuscleFindManyArgs>(args?: SelectSubset<T, MuscleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Muscle.
     * @param {MuscleCreateArgs} args - Arguments to create a Muscle.
     * @example
     * // Create one Muscle
     * const Muscle = await prisma.muscle.create({
     *   data: {
     *     // ... data to create a Muscle
     *   }
     * })
     * 
     */
    create<T extends MuscleCreateArgs>(args: SelectSubset<T, MuscleCreateArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Muscles.
     * @param {MuscleCreateManyArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MuscleCreateManyArgs>(args?: SelectSubset<T, MuscleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Muscles and returns the data saved in the database.
     * @param {MuscleCreateManyAndReturnArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Muscles and only return the `id`
     * const muscleWithIdOnly = await prisma.muscle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MuscleCreateManyAndReturnArgs>(args?: SelectSubset<T, MuscleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Muscle.
     * @param {MuscleDeleteArgs} args - Arguments to delete one Muscle.
     * @example
     * // Delete one Muscle
     * const Muscle = await prisma.muscle.delete({
     *   where: {
     *     // ... filter to delete one Muscle
     *   }
     * })
     * 
     */
    delete<T extends MuscleDeleteArgs>(args: SelectSubset<T, MuscleDeleteArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Muscle.
     * @param {MuscleUpdateArgs} args - Arguments to update one Muscle.
     * @example
     * // Update one Muscle
     * const muscle = await prisma.muscle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MuscleUpdateArgs>(args: SelectSubset<T, MuscleUpdateArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Muscles.
     * @param {MuscleDeleteManyArgs} args - Arguments to filter Muscles to delete.
     * @example
     * // Delete a few Muscles
     * const { count } = await prisma.muscle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MuscleDeleteManyArgs>(args?: SelectSubset<T, MuscleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Muscles
     * const muscle = await prisma.muscle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MuscleUpdateManyArgs>(args: SelectSubset<T, MuscleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muscles and returns the data updated in the database.
     * @param {MuscleUpdateManyAndReturnArgs} args - Arguments to update many Muscles.
     * @example
     * // Update many Muscles
     * const muscle = await prisma.muscle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Muscles and only return the `id`
     * const muscleWithIdOnly = await prisma.muscle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MuscleUpdateManyAndReturnArgs>(args: SelectSubset<T, MuscleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Muscle.
     * @param {MuscleUpsertArgs} args - Arguments to update or create a Muscle.
     * @example
     * // Update or create a Muscle
     * const muscle = await prisma.muscle.upsert({
     *   create: {
     *     // ... data to create a Muscle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Muscle we want to update
     *   }
     * })
     */
    upsert<T extends MuscleUpsertArgs>(args: SelectSubset<T, MuscleUpsertArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleCountArgs} args - Arguments to filter Muscles to count.
     * @example
     * // Count the number of Muscles
     * const count = await prisma.muscle.count({
     *   where: {
     *     // ... the filter for the Muscles we want to count
     *   }
     * })
    **/
    count<T extends MuscleCountArgs>(
      args?: Subset<T, MuscleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MuscleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MuscleAggregateArgs>(args: Subset<T, MuscleAggregateArgs>): Prisma.PrismaPromise<GetMuscleAggregateType<T>>

    /**
     * Group by Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MuscleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MuscleGroupByArgs['orderBy'] }
        : { orderBy?: MuscleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MuscleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMuscleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Muscle model
   */
  readonly fields: MuscleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Muscle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MuscleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends Muscle$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Muscle$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aliases<T extends Muscle$aliasesArgs<ExtArgs> = {}>(args?: Subset<T, Muscle$aliasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Muscle model
   */
  interface MuscleFieldRefs {
    readonly id: FieldRef<"Muscle", 'String'>
    readonly name: FieldRef<"Muscle", 'String'>
    readonly order: FieldRef<"Muscle", 'Int'>
    readonly createdAt: FieldRef<"Muscle", 'DateTime'>
    readonly updatedAt: FieldRef<"Muscle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Muscle findUnique
   */
  export type MuscleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where: MuscleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle findUniqueOrThrow
   */
  export type MuscleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where: MuscleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle findFirst
   */
  export type MuscleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle findFirstOrThrow
   */
  export type MuscleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle findMany
   */
  export type MuscleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscles to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle create
   */
  export type MuscleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The data needed to create a Muscle.
     */
    data: XOR<MuscleCreateInput, MuscleUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle createMany
   */
  export type MuscleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Muscles.
     */
    data: MuscleCreateManyInput | MuscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Muscle createManyAndReturn
   */
  export type MuscleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * The data used to create many Muscles.
     */
    data: MuscleCreateManyInput | MuscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Muscle update
   */
  export type MuscleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The data needed to update a Muscle.
     */
    data: XOR<MuscleUpdateInput, MuscleUncheckedUpdateInput>
    /**
     * Choose, which Muscle to update.
     */
    where: MuscleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle updateMany
   */
  export type MuscleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Muscles.
     */
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyInput>
    /**
     * Filter which Muscles to update
     */
    where?: MuscleWhereInput
    /**
     * Limit how many Muscles to update.
     */
    limit?: number
  }

  /**
   * Muscle updateManyAndReturn
   */
  export type MuscleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * The data used to update Muscles.
     */
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyInput>
    /**
     * Filter which Muscles to update
     */
    where?: MuscleWhereInput
    /**
     * Limit how many Muscles to update.
     */
    limit?: number
  }

  /**
   * Muscle upsert
   */
  export type MuscleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The filter to search for the Muscle to update in case it exists.
     */
    where: MuscleWhereUniqueInput
    /**
     * In case the Muscle found by the `where` argument doesn't exist, create a new Muscle with this data.
     */
    create: XOR<MuscleCreateInput, MuscleUncheckedCreateInput>
    /**
     * In case the Muscle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MuscleUpdateInput, MuscleUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle delete
   */
  export type MuscleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter which Muscle to delete.
     */
    where: MuscleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Muscle deleteMany
   */
  export type MuscleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Muscles to delete
     */
    where?: MuscleWhereInput
    /**
     * Limit how many Muscles to delete.
     */
    limit?: number
  }

  /**
   * Muscle.exercises
   */
  export type Muscle$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Muscle.aliases
   */
  export type Muscle$aliasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    where?: MuscleAliasWhereInput
    orderBy?: MuscleAliasOrderByWithRelationInput | MuscleAliasOrderByWithRelationInput[]
    cursor?: MuscleAliasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MuscleAliasScalarFieldEnum | MuscleAliasScalarFieldEnum[]
  }

  /**
   * Muscle without action
   */
  export type MuscleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Muscle
     */
    omit?: MuscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
  }


  /**
   * Model MuscleAlias
   */

  export type AggregateMuscleAlias = {
    _count: MuscleAliasCountAggregateOutputType | null
    _min: MuscleAliasMinAggregateOutputType | null
    _max: MuscleAliasMaxAggregateOutputType | null
  }

  export type MuscleAliasMinAggregateOutputType = {
    id: string | null
    name: string | null
    language: string | null
    muscleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleAliasMaxAggregateOutputType = {
    id: string | null
    name: string | null
    language: string | null
    muscleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MuscleAliasCountAggregateOutputType = {
    id: number
    name: number
    language: number
    muscleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MuscleAliasMinAggregateInputType = {
    id?: true
    name?: true
    language?: true
    muscleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleAliasMaxAggregateInputType = {
    id?: true
    name?: true
    language?: true
    muscleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MuscleAliasCountAggregateInputType = {
    id?: true
    name?: true
    language?: true
    muscleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MuscleAliasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MuscleAlias to aggregate.
     */
    where?: MuscleAliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAliases to fetch.
     */
    orderBy?: MuscleAliasOrderByWithRelationInput | MuscleAliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MuscleAliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MuscleAliases
    **/
    _count?: true | MuscleAliasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MuscleAliasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MuscleAliasMaxAggregateInputType
  }

  export type GetMuscleAliasAggregateType<T extends MuscleAliasAggregateArgs> = {
        [P in keyof T & keyof AggregateMuscleAlias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuscleAlias[P]>
      : GetScalarType<T[P], AggregateMuscleAlias[P]>
  }




  export type MuscleAliasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleAliasWhereInput
    orderBy?: MuscleAliasOrderByWithAggregationInput | MuscleAliasOrderByWithAggregationInput[]
    by: MuscleAliasScalarFieldEnum[] | MuscleAliasScalarFieldEnum
    having?: MuscleAliasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MuscleAliasCountAggregateInputType | true
    _min?: MuscleAliasMinAggregateInputType
    _max?: MuscleAliasMaxAggregateInputType
  }

  export type MuscleAliasGroupByOutputType = {
    id: string
    name: string
    language: string | null
    muscleId: string
    createdAt: Date
    updatedAt: Date
    _count: MuscleAliasCountAggregateOutputType | null
    _min: MuscleAliasMinAggregateOutputType | null
    _max: MuscleAliasMaxAggregateOutputType | null
  }

  type GetMuscleAliasGroupByPayload<T extends MuscleAliasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MuscleAliasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MuscleAliasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MuscleAliasGroupByOutputType[P]>
            : GetScalarType<T[P], MuscleAliasGroupByOutputType[P]>
        }
      >
    >


  export type MuscleAliasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    language?: boolean
    muscleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscleAlias"]>

  export type MuscleAliasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    language?: boolean
    muscleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscleAlias"]>

  export type MuscleAliasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    language?: boolean
    muscleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscleAlias"]>

  export type MuscleAliasSelectScalar = {
    id?: boolean
    name?: boolean
    language?: boolean
    muscleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MuscleAliasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "language" | "muscleId" | "createdAt" | "updatedAt", ExtArgs["result"]["muscleAlias"]>
  export type MuscleAliasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }
  export type MuscleAliasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }
  export type MuscleAliasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscle?: boolean | MuscleDefaultArgs<ExtArgs>
  }

  export type $MuscleAliasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MuscleAlias"
    objects: {
      muscle: Prisma.$MusclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      language: string | null
      muscleId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["muscleAlias"]>
    composites: {}
  }

  type MuscleAliasGetPayload<S extends boolean | null | undefined | MuscleAliasDefaultArgs> = $Result.GetResult<Prisma.$MuscleAliasPayload, S>

  type MuscleAliasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MuscleAliasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: MuscleAliasCountAggregateInputType | true
    }

  export interface MuscleAliasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MuscleAlias'], meta: { name: 'MuscleAlias' } }
    /**
     * Find zero or one MuscleAlias that matches the filter.
     * @param {MuscleAliasFindUniqueArgs} args - Arguments to find a MuscleAlias
     * @example
     * // Get one MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MuscleAliasFindUniqueArgs>(args: SelectSubset<T, MuscleAliasFindUniqueArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MuscleAlias that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MuscleAliasFindUniqueOrThrowArgs} args - Arguments to find a MuscleAlias
     * @example
     * // Get one MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MuscleAliasFindUniqueOrThrowArgs>(args: SelectSubset<T, MuscleAliasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MuscleAlias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasFindFirstArgs} args - Arguments to find a MuscleAlias
     * @example
     * // Get one MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MuscleAliasFindFirstArgs>(args?: SelectSubset<T, MuscleAliasFindFirstArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MuscleAlias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasFindFirstOrThrowArgs} args - Arguments to find a MuscleAlias
     * @example
     * // Get one MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MuscleAliasFindFirstOrThrowArgs>(args?: SelectSubset<T, MuscleAliasFindFirstOrThrowArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MuscleAliases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MuscleAliases
     * const muscleAliases = await prisma.muscleAlias.findMany()
     * 
     * // Get first 10 MuscleAliases
     * const muscleAliases = await prisma.muscleAlias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const muscleAliasWithIdOnly = await prisma.muscleAlias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MuscleAliasFindManyArgs>(args?: SelectSubset<T, MuscleAliasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MuscleAlias.
     * @param {MuscleAliasCreateArgs} args - Arguments to create a MuscleAlias.
     * @example
     * // Create one MuscleAlias
     * const MuscleAlias = await prisma.muscleAlias.create({
     *   data: {
     *     // ... data to create a MuscleAlias
     *   }
     * })
     * 
     */
    create<T extends MuscleAliasCreateArgs>(args: SelectSubset<T, MuscleAliasCreateArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MuscleAliases.
     * @param {MuscleAliasCreateManyArgs} args - Arguments to create many MuscleAliases.
     * @example
     * // Create many MuscleAliases
     * const muscleAlias = await prisma.muscleAlias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MuscleAliasCreateManyArgs>(args?: SelectSubset<T, MuscleAliasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MuscleAliases and returns the data saved in the database.
     * @param {MuscleAliasCreateManyAndReturnArgs} args - Arguments to create many MuscleAliases.
     * @example
     * // Create many MuscleAliases
     * const muscleAlias = await prisma.muscleAlias.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MuscleAliases and only return the `id`
     * const muscleAliasWithIdOnly = await prisma.muscleAlias.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MuscleAliasCreateManyAndReturnArgs>(args?: SelectSubset<T, MuscleAliasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MuscleAlias.
     * @param {MuscleAliasDeleteArgs} args - Arguments to delete one MuscleAlias.
     * @example
     * // Delete one MuscleAlias
     * const MuscleAlias = await prisma.muscleAlias.delete({
     *   where: {
     *     // ... filter to delete one MuscleAlias
     *   }
     * })
     * 
     */
    delete<T extends MuscleAliasDeleteArgs>(args: SelectSubset<T, MuscleAliasDeleteArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MuscleAlias.
     * @param {MuscleAliasUpdateArgs} args - Arguments to update one MuscleAlias.
     * @example
     * // Update one MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MuscleAliasUpdateArgs>(args: SelectSubset<T, MuscleAliasUpdateArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MuscleAliases.
     * @param {MuscleAliasDeleteManyArgs} args - Arguments to filter MuscleAliases to delete.
     * @example
     * // Delete a few MuscleAliases
     * const { count } = await prisma.muscleAlias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MuscleAliasDeleteManyArgs>(args?: SelectSubset<T, MuscleAliasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MuscleAliases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MuscleAliases
     * const muscleAlias = await prisma.muscleAlias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MuscleAliasUpdateManyArgs>(args: SelectSubset<T, MuscleAliasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MuscleAliases and returns the data updated in the database.
     * @param {MuscleAliasUpdateManyAndReturnArgs} args - Arguments to update many MuscleAliases.
     * @example
     * // Update many MuscleAliases
     * const muscleAlias = await prisma.muscleAlias.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MuscleAliases and only return the `id`
     * const muscleAliasWithIdOnly = await prisma.muscleAlias.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MuscleAliasUpdateManyAndReturnArgs>(args: SelectSubset<T, MuscleAliasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MuscleAlias.
     * @param {MuscleAliasUpsertArgs} args - Arguments to update or create a MuscleAlias.
     * @example
     * // Update or create a MuscleAlias
     * const muscleAlias = await prisma.muscleAlias.upsert({
     *   create: {
     *     // ... data to create a MuscleAlias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MuscleAlias we want to update
     *   }
     * })
     */
    upsert<T extends MuscleAliasUpsertArgs>(args: SelectSubset<T, MuscleAliasUpsertArgs<ExtArgs>>): Prisma__MuscleAliasClient<$Result.GetResult<Prisma.$MuscleAliasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MuscleAliases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasCountArgs} args - Arguments to filter MuscleAliases to count.
     * @example
     * // Count the number of MuscleAliases
     * const count = await prisma.muscleAlias.count({
     *   where: {
     *     // ... the filter for the MuscleAliases we want to count
     *   }
     * })
    **/
    count<T extends MuscleAliasCountArgs>(
      args?: Subset<T, MuscleAliasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MuscleAliasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MuscleAlias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MuscleAliasAggregateArgs>(args: Subset<T, MuscleAliasAggregateArgs>): Prisma.PrismaPromise<GetMuscleAliasAggregateType<T>>

    /**
     * Group by MuscleAlias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAliasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MuscleAliasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MuscleAliasGroupByArgs['orderBy'] }
        : { orderBy?: MuscleAliasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MuscleAliasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMuscleAliasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MuscleAlias model
   */
  readonly fields: MuscleAliasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MuscleAlias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MuscleAliasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    muscle<T extends MuscleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MuscleDefaultArgs<ExtArgs>>): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MuscleAlias model
   */
  interface MuscleAliasFieldRefs {
    readonly id: FieldRef<"MuscleAlias", 'String'>
    readonly name: FieldRef<"MuscleAlias", 'String'>
    readonly language: FieldRef<"MuscleAlias", 'String'>
    readonly muscleId: FieldRef<"MuscleAlias", 'String'>
    readonly createdAt: FieldRef<"MuscleAlias", 'DateTime'>
    readonly updatedAt: FieldRef<"MuscleAlias", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MuscleAlias findUnique
   */
  export type MuscleAliasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter, which MuscleAlias to fetch.
     */
    where: MuscleAliasWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias findUniqueOrThrow
   */
  export type MuscleAliasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter, which MuscleAlias to fetch.
     */
    where: MuscleAliasWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias findFirst
   */
  export type MuscleAliasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter, which MuscleAlias to fetch.
     */
    where?: MuscleAliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAliases to fetch.
     */
    orderBy?: MuscleAliasOrderByWithRelationInput | MuscleAliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MuscleAliases.
     */
    cursor?: MuscleAliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MuscleAliases.
     */
    distinct?: MuscleAliasScalarFieldEnum | MuscleAliasScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias findFirstOrThrow
   */
  export type MuscleAliasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter, which MuscleAlias to fetch.
     */
    where?: MuscleAliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAliases to fetch.
     */
    orderBy?: MuscleAliasOrderByWithRelationInput | MuscleAliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MuscleAliases.
     */
    cursor?: MuscleAliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MuscleAliases.
     */
    distinct?: MuscleAliasScalarFieldEnum | MuscleAliasScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias findMany
   */
  export type MuscleAliasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter, which MuscleAliases to fetch.
     */
    where?: MuscleAliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MuscleAliases to fetch.
     */
    orderBy?: MuscleAliasOrderByWithRelationInput | MuscleAliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MuscleAliases.
     */
    cursor?: MuscleAliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MuscleAliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MuscleAliases.
     */
    skip?: number
    distinct?: MuscleAliasScalarFieldEnum | MuscleAliasScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias create
   */
  export type MuscleAliasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * The data needed to create a MuscleAlias.
     */
    data: XOR<MuscleAliasCreateInput, MuscleAliasUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias createMany
   */
  export type MuscleAliasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MuscleAliases.
     */
    data: MuscleAliasCreateManyInput | MuscleAliasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MuscleAlias createManyAndReturn
   */
  export type MuscleAliasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * The data used to create many MuscleAliases.
     */
    data: MuscleAliasCreateManyInput | MuscleAliasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MuscleAlias update
   */
  export type MuscleAliasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * The data needed to update a MuscleAlias.
     */
    data: XOR<MuscleAliasUpdateInput, MuscleAliasUncheckedUpdateInput>
    /**
     * Choose, which MuscleAlias to update.
     */
    where: MuscleAliasWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias updateMany
   */
  export type MuscleAliasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MuscleAliases.
     */
    data: XOR<MuscleAliasUpdateManyMutationInput, MuscleAliasUncheckedUpdateManyInput>
    /**
     * Filter which MuscleAliases to update
     */
    where?: MuscleAliasWhereInput
    /**
     * Limit how many MuscleAliases to update.
     */
    limit?: number
  }

  /**
   * MuscleAlias updateManyAndReturn
   */
  export type MuscleAliasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * The data used to update MuscleAliases.
     */
    data: XOR<MuscleAliasUpdateManyMutationInput, MuscleAliasUncheckedUpdateManyInput>
    /**
     * Filter which MuscleAliases to update
     */
    where?: MuscleAliasWhereInput
    /**
     * Limit how many MuscleAliases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MuscleAlias upsert
   */
  export type MuscleAliasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * The filter to search for the MuscleAlias to update in case it exists.
     */
    where: MuscleAliasWhereUniqueInput
    /**
     * In case the MuscleAlias found by the `where` argument doesn't exist, create a new MuscleAlias with this data.
     */
    create: XOR<MuscleAliasCreateInput, MuscleAliasUncheckedCreateInput>
    /**
     * In case the MuscleAlias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MuscleAliasUpdateInput, MuscleAliasUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias delete
   */
  export type MuscleAliasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
    /**
     * Filter which MuscleAlias to delete.
     */
    where: MuscleAliasWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MuscleAlias deleteMany
   */
  export type MuscleAliasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MuscleAliases to delete
     */
    where?: MuscleAliasWhereInput
    /**
     * Limit how many MuscleAliases to delete.
     */
    limit?: number
  }

  /**
   * MuscleAlias without action
   */
  export type MuscleAliasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleAlias
     */
    select?: MuscleAliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MuscleAlias
     */
    omit?: MuscleAliasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleAliasInclude<ExtArgs> | null
  }


  /**
   * Model Equipment
   */

  export type AggregateEquipment = {
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  export type EquipmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipmentCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquipmentMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipmentMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipmentCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to aggregate.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipment
    **/
    _count?: true | EquipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentMaxAggregateInputType
  }

  export type GetEquipmentAggregateType<T extends EquipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipment[P]>
      : GetScalarType<T[P], AggregateEquipment[P]>
  }




  export type EquipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithAggregationInput | EquipmentOrderByWithAggregationInput[]
    by: EquipmentScalarFieldEnum[] | EquipmentScalarFieldEnum
    having?: EquipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentCountAggregateInputType | true
    _min?: EquipmentMinAggregateInputType
    _max?: EquipmentMaxAggregateInputType
  }

  export type EquipmentGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  type GetEquipmentGroupByPayload<T extends EquipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercises?: boolean | Equipment$exercisesArgs<ExtArgs>
    categories?: boolean | Equipment$categoriesArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EquipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["equipment"]>
  export type EquipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Equipment$exercisesArgs<ExtArgs>
    categories?: boolean | Equipment$categoriesArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipment"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      categories: Prisma.$EquipmentCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["equipment"]>
    composites: {}
  }

  type EquipmentGetPayload<S extends boolean | null | undefined | EquipmentDefaultArgs> = $Result.GetResult<Prisma.$EquipmentPayload, S>

  type EquipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: EquipmentCountAggregateInputType | true
    }

  export interface EquipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipment'], meta: { name: 'Equipment' } }
    /**
     * Find zero or one Equipment that matches the filter.
     * @param {EquipmentFindUniqueArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipmentFindUniqueArgs>(args: SelectSubset<T, EquipmentFindUniqueArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipmentFindUniqueOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipmentFindFirstArgs>(args?: SelectSubset<T, EquipmentFindFirstArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipment
     * const equipment = await prisma.equipment.findMany()
     * 
     * // Get first 10 Equipment
     * const equipment = await prisma.equipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentWithIdOnly = await prisma.equipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipmentFindManyArgs>(args?: SelectSubset<T, EquipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipment.
     * @param {EquipmentCreateArgs} args - Arguments to create a Equipment.
     * @example
     * // Create one Equipment
     * const Equipment = await prisma.equipment.create({
     *   data: {
     *     // ... data to create a Equipment
     *   }
     * })
     * 
     */
    create<T extends EquipmentCreateArgs>(args: SelectSubset<T, EquipmentCreateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipment.
     * @param {EquipmentCreateManyArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipmentCreateManyArgs>(args?: SelectSubset<T, EquipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipment and returns the data saved in the database.
     * @param {EquipmentCreateManyAndReturnArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipment.
     * @param {EquipmentDeleteArgs} args - Arguments to delete one Equipment.
     * @example
     * // Delete one Equipment
     * const Equipment = await prisma.equipment.delete({
     *   where: {
     *     // ... filter to delete one Equipment
     *   }
     * })
     * 
     */
    delete<T extends EquipmentDeleteArgs>(args: SelectSubset<T, EquipmentDeleteArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipment.
     * @param {EquipmentUpdateArgs} args - Arguments to update one Equipment.
     * @example
     * // Update one Equipment
     * const equipment = await prisma.equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipmentUpdateArgs>(args: SelectSubset<T, EquipmentUpdateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipment.
     * @param {EquipmentDeleteManyArgs} args - Arguments to filter Equipment to delete.
     * @example
     * // Delete a few Equipment
     * const { count } = await prisma.equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipmentDeleteManyArgs>(args?: SelectSubset<T, EquipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipmentUpdateManyArgs>(args: SelectSubset<T, EquipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment and returns the data updated in the database.
     * @param {EquipmentUpdateManyAndReturnArgs} args - Arguments to update many Equipment.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipment.
     * @param {EquipmentUpsertArgs} args - Arguments to update or create a Equipment.
     * @example
     * // Update or create a Equipment
     * const equipment = await prisma.equipment.upsert({
     *   create: {
     *     // ... data to create a Equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipment we want to update
     *   }
     * })
     */
    upsert<T extends EquipmentUpsertArgs>(args: SelectSubset<T, EquipmentUpsertArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCountArgs} args - Arguments to filter Equipment to count.
     * @example
     * // Count the number of Equipment
     * const count = await prisma.equipment.count({
     *   where: {
     *     // ... the filter for the Equipment we want to count
     *   }
     * })
    **/
    count<T extends EquipmentCountArgs>(
      args?: Subset<T, EquipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentAggregateArgs>(args: Subset<T, EquipmentAggregateArgs>): Prisma.PrismaPromise<GetEquipmentAggregateType<T>>

    /**
     * Group by Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipment model
   */
  readonly fields: EquipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends Equipment$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Equipment$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Equipment$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Equipment$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipment model
   */
  interface EquipmentFieldRefs {
    readonly id: FieldRef<"Equipment", 'String'>
    readonly name: FieldRef<"Equipment", 'String'>
    readonly createdAt: FieldRef<"Equipment", 'DateTime'>
    readonly updatedAt: FieldRef<"Equipment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Equipment findUnique
   */
  export type EquipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment findUniqueOrThrow
   */
  export type EquipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment findFirst
   */
  export type EquipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment findFirstOrThrow
   */
  export type EquipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment findMany
   */
  export type EquipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment create
   */
  export type EquipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipment.
     */
    data: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment createMany
   */
  export type EquipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipment createManyAndReturn
   */
  export type EquipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipment update
   */
  export type EquipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipment.
     */
    data: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
    /**
     * Choose, which Equipment to update.
     */
    where: EquipmentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment updateMany
   */
  export type EquipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
  }

  /**
   * Equipment updateManyAndReturn
   */
  export type EquipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
  }

  /**
   * Equipment upsert
   */
  export type EquipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipment to update in case it exists.
     */
    where: EquipmentWhereUniqueInput
    /**
     * In case the Equipment found by the `where` argument doesn't exist, create a new Equipment with this data.
     */
    create: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
    /**
     * In case the Equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment delete
   */
  export type EquipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter which Equipment to delete.
     */
    where: EquipmentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Equipment deleteMany
   */
  export type EquipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to delete
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to delete.
     */
    limit?: number
  }

  /**
   * Equipment.exercises
   */
  export type Equipment$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Equipment.categories
   */
  export type Equipment$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    where?: EquipmentCategoryWhereInput
    orderBy?: EquipmentCategoryOrderByWithRelationInput | EquipmentCategoryOrderByWithRelationInput[]
    cursor?: EquipmentCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquipmentCategoryScalarFieldEnum | EquipmentCategoryScalarFieldEnum[]
  }

  /**
   * Equipment without action
   */
  export type EquipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
  }


  /**
   * Model EquipmentCategory
   */

  export type AggregateEquipmentCategory = {
    _count: EquipmentCategoryCountAggregateOutputType | null
    _min: EquipmentCategoryMinAggregateOutputType | null
    _max: EquipmentCategoryMaxAggregateOutputType | null
  }

  export type EquipmentCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipmentCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EquipmentCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EquipmentCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipmentCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EquipmentCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EquipmentCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquipmentCategory to aggregate.
     */
    where?: EquipmentCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentCategories to fetch.
     */
    orderBy?: EquipmentCategoryOrderByWithRelationInput | EquipmentCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipmentCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EquipmentCategories
    **/
    _count?: true | EquipmentCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentCategoryMaxAggregateInputType
  }

  export type GetEquipmentCategoryAggregateType<T extends EquipmentCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipmentCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipmentCategory[P]>
      : GetScalarType<T[P], AggregateEquipmentCategory[P]>
  }




  export type EquipmentCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentCategoryWhereInput
    orderBy?: EquipmentCategoryOrderByWithAggregationInput | EquipmentCategoryOrderByWithAggregationInput[]
    by: EquipmentCategoryScalarFieldEnum[] | EquipmentCategoryScalarFieldEnum
    having?: EquipmentCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentCategoryCountAggregateInputType | true
    _min?: EquipmentCategoryMinAggregateInputType
    _max?: EquipmentCategoryMaxAggregateInputType
  }

  export type EquipmentCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: EquipmentCategoryCountAggregateOutputType | null
    _min: EquipmentCategoryMinAggregateOutputType | null
    _max: EquipmentCategoryMaxAggregateOutputType | null
  }

  type GetEquipmentCategoryGroupByPayload<T extends EquipmentCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentCategoryGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    equipments?: boolean | EquipmentCategory$equipmentsArgs<ExtArgs>
    _count?: boolean | EquipmentCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipmentCategory"]>

  export type EquipmentCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipmentCategory"]>

  export type EquipmentCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["equipmentCategory"]>

  export type EquipmentCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EquipmentCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["equipmentCategory"]>
  export type EquipmentCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipments?: boolean | EquipmentCategory$equipmentsArgs<ExtArgs>
    _count?: boolean | EquipmentCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipmentCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipmentCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EquipmentCategory"
    objects: {
      equipments: Prisma.$EquipmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["equipmentCategory"]>
    composites: {}
  }

  type EquipmentCategoryGetPayload<S extends boolean | null | undefined | EquipmentCategoryDefaultArgs> = $Result.GetResult<Prisma.$EquipmentCategoryPayload, S>

  type EquipmentCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipmentCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: EquipmentCategoryCountAggregateInputType | true
    }

  export interface EquipmentCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EquipmentCategory'], meta: { name: 'EquipmentCategory' } }
    /**
     * Find zero or one EquipmentCategory that matches the filter.
     * @param {EquipmentCategoryFindUniqueArgs} args - Arguments to find a EquipmentCategory
     * @example
     * // Get one EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipmentCategoryFindUniqueArgs>(args: SelectSubset<T, EquipmentCategoryFindUniqueArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EquipmentCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipmentCategoryFindUniqueOrThrowArgs} args - Arguments to find a EquipmentCategory
     * @example
     * // Get one EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipmentCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipmentCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquipmentCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryFindFirstArgs} args - Arguments to find a EquipmentCategory
     * @example
     * // Get one EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipmentCategoryFindFirstArgs>(args?: SelectSubset<T, EquipmentCategoryFindFirstArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquipmentCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryFindFirstOrThrowArgs} args - Arguments to find a EquipmentCategory
     * @example
     * // Get one EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipmentCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipmentCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EquipmentCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EquipmentCategories
     * const equipmentCategories = await prisma.equipmentCategory.findMany()
     * 
     * // Get first 10 EquipmentCategories
     * const equipmentCategories = await prisma.equipmentCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentCategoryWithIdOnly = await prisma.equipmentCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipmentCategoryFindManyArgs>(args?: SelectSubset<T, EquipmentCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EquipmentCategory.
     * @param {EquipmentCategoryCreateArgs} args - Arguments to create a EquipmentCategory.
     * @example
     * // Create one EquipmentCategory
     * const EquipmentCategory = await prisma.equipmentCategory.create({
     *   data: {
     *     // ... data to create a EquipmentCategory
     *   }
     * })
     * 
     */
    create<T extends EquipmentCategoryCreateArgs>(args: SelectSubset<T, EquipmentCategoryCreateArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EquipmentCategories.
     * @param {EquipmentCategoryCreateManyArgs} args - Arguments to create many EquipmentCategories.
     * @example
     * // Create many EquipmentCategories
     * const equipmentCategory = await prisma.equipmentCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipmentCategoryCreateManyArgs>(args?: SelectSubset<T, EquipmentCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EquipmentCategories and returns the data saved in the database.
     * @param {EquipmentCategoryCreateManyAndReturnArgs} args - Arguments to create many EquipmentCategories.
     * @example
     * // Create many EquipmentCategories
     * const equipmentCategory = await prisma.equipmentCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EquipmentCategories and only return the `id`
     * const equipmentCategoryWithIdOnly = await prisma.equipmentCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipmentCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipmentCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EquipmentCategory.
     * @param {EquipmentCategoryDeleteArgs} args - Arguments to delete one EquipmentCategory.
     * @example
     * // Delete one EquipmentCategory
     * const EquipmentCategory = await prisma.equipmentCategory.delete({
     *   where: {
     *     // ... filter to delete one EquipmentCategory
     *   }
     * })
     * 
     */
    delete<T extends EquipmentCategoryDeleteArgs>(args: SelectSubset<T, EquipmentCategoryDeleteArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EquipmentCategory.
     * @param {EquipmentCategoryUpdateArgs} args - Arguments to update one EquipmentCategory.
     * @example
     * // Update one EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipmentCategoryUpdateArgs>(args: SelectSubset<T, EquipmentCategoryUpdateArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EquipmentCategories.
     * @param {EquipmentCategoryDeleteManyArgs} args - Arguments to filter EquipmentCategories to delete.
     * @example
     * // Delete a few EquipmentCategories
     * const { count } = await prisma.equipmentCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipmentCategoryDeleteManyArgs>(args?: SelectSubset<T, EquipmentCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquipmentCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EquipmentCategories
     * const equipmentCategory = await prisma.equipmentCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipmentCategoryUpdateManyArgs>(args: SelectSubset<T, EquipmentCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquipmentCategories and returns the data updated in the database.
     * @param {EquipmentCategoryUpdateManyAndReturnArgs} args - Arguments to update many EquipmentCategories.
     * @example
     * // Update many EquipmentCategories
     * const equipmentCategory = await prisma.equipmentCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EquipmentCategories and only return the `id`
     * const equipmentCategoryWithIdOnly = await prisma.equipmentCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipmentCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipmentCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EquipmentCategory.
     * @param {EquipmentCategoryUpsertArgs} args - Arguments to update or create a EquipmentCategory.
     * @example
     * // Update or create a EquipmentCategory
     * const equipmentCategory = await prisma.equipmentCategory.upsert({
     *   create: {
     *     // ... data to create a EquipmentCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EquipmentCategory we want to update
     *   }
     * })
     */
    upsert<T extends EquipmentCategoryUpsertArgs>(args: SelectSubset<T, EquipmentCategoryUpsertArgs<ExtArgs>>): Prisma__EquipmentCategoryClient<$Result.GetResult<Prisma.$EquipmentCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EquipmentCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryCountArgs} args - Arguments to filter EquipmentCategories to count.
     * @example
     * // Count the number of EquipmentCategories
     * const count = await prisma.equipmentCategory.count({
     *   where: {
     *     // ... the filter for the EquipmentCategories we want to count
     *   }
     * })
    **/
    count<T extends EquipmentCategoryCountArgs>(
      args?: Subset<T, EquipmentCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EquipmentCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentCategoryAggregateArgs>(args: Subset<T, EquipmentCategoryAggregateArgs>): Prisma.PrismaPromise<GetEquipmentCategoryAggregateType<T>>

    /**
     * Group by EquipmentCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentCategoryGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EquipmentCategory model
   */
  readonly fields: EquipmentCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EquipmentCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipmentCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipments<T extends EquipmentCategory$equipmentsArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentCategory$equipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EquipmentCategory model
   */
  interface EquipmentCategoryFieldRefs {
    readonly id: FieldRef<"EquipmentCategory", 'String'>
    readonly name: FieldRef<"EquipmentCategory", 'String'>
    readonly createdAt: FieldRef<"EquipmentCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"EquipmentCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EquipmentCategory findUnique
   */
  export type EquipmentCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentCategory to fetch.
     */
    where: EquipmentCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory findUniqueOrThrow
   */
  export type EquipmentCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentCategory to fetch.
     */
    where: EquipmentCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory findFirst
   */
  export type EquipmentCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentCategory to fetch.
     */
    where?: EquipmentCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentCategories to fetch.
     */
    orderBy?: EquipmentCategoryOrderByWithRelationInput | EquipmentCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipmentCategories.
     */
    cursor?: EquipmentCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipmentCategories.
     */
    distinct?: EquipmentCategoryScalarFieldEnum | EquipmentCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory findFirstOrThrow
   */
  export type EquipmentCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentCategory to fetch.
     */
    where?: EquipmentCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentCategories to fetch.
     */
    orderBy?: EquipmentCategoryOrderByWithRelationInput | EquipmentCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipmentCategories.
     */
    cursor?: EquipmentCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipmentCategories.
     */
    distinct?: EquipmentCategoryScalarFieldEnum | EquipmentCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory findMany
   */
  export type EquipmentCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentCategories to fetch.
     */
    where?: EquipmentCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentCategories to fetch.
     */
    orderBy?: EquipmentCategoryOrderByWithRelationInput | EquipmentCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EquipmentCategories.
     */
    cursor?: EquipmentCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentCategories.
     */
    skip?: number
    distinct?: EquipmentCategoryScalarFieldEnum | EquipmentCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory create
   */
  export type EquipmentCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a EquipmentCategory.
     */
    data: XOR<EquipmentCategoryCreateInput, EquipmentCategoryUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory createMany
   */
  export type EquipmentCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EquipmentCategories.
     */
    data: EquipmentCategoryCreateManyInput | EquipmentCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquipmentCategory createManyAndReturn
   */
  export type EquipmentCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many EquipmentCategories.
     */
    data: EquipmentCategoryCreateManyInput | EquipmentCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquipmentCategory update
   */
  export type EquipmentCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a EquipmentCategory.
     */
    data: XOR<EquipmentCategoryUpdateInput, EquipmentCategoryUncheckedUpdateInput>
    /**
     * Choose, which EquipmentCategory to update.
     */
    where: EquipmentCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory updateMany
   */
  export type EquipmentCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EquipmentCategories.
     */
    data: XOR<EquipmentCategoryUpdateManyMutationInput, EquipmentCategoryUncheckedUpdateManyInput>
    /**
     * Filter which EquipmentCategories to update
     */
    where?: EquipmentCategoryWhereInput
    /**
     * Limit how many EquipmentCategories to update.
     */
    limit?: number
  }

  /**
   * EquipmentCategory updateManyAndReturn
   */
  export type EquipmentCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * The data used to update EquipmentCategories.
     */
    data: XOR<EquipmentCategoryUpdateManyMutationInput, EquipmentCategoryUncheckedUpdateManyInput>
    /**
     * Filter which EquipmentCategories to update
     */
    where?: EquipmentCategoryWhereInput
    /**
     * Limit how many EquipmentCategories to update.
     */
    limit?: number
  }

  /**
   * EquipmentCategory upsert
   */
  export type EquipmentCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the EquipmentCategory to update in case it exists.
     */
    where: EquipmentCategoryWhereUniqueInput
    /**
     * In case the EquipmentCategory found by the `where` argument doesn't exist, create a new EquipmentCategory with this data.
     */
    create: XOR<EquipmentCategoryCreateInput, EquipmentCategoryUncheckedCreateInput>
    /**
     * In case the EquipmentCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipmentCategoryUpdateInput, EquipmentCategoryUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory delete
   */
  export type EquipmentCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
    /**
     * Filter which EquipmentCategory to delete.
     */
    where: EquipmentCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * EquipmentCategory deleteMany
   */
  export type EquipmentCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquipmentCategories to delete
     */
    where?: EquipmentCategoryWhereInput
    /**
     * Limit how many EquipmentCategories to delete.
     */
    limit?: number
  }

  /**
   * EquipmentCategory.equipments
   */
  export type EquipmentCategory$equipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    cursor?: EquipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * EquipmentCategory without action
   */
  export type EquipmentCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCategory
     */
    select?: EquipmentCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentCategory
     */
    omit?: EquipmentCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentCategoryInclude<ExtArgs> | null
  }


  /**
   * Model UserCardioSet
   */

  export type AggregateUserCardioSet = {
    _count: UserCardioSetCountAggregateOutputType | null
    _avg: UserCardioSetAvgAggregateOutputType | null
    _sum: UserCardioSetSumAggregateOutputType | null
    _min: UserCardioSetMinAggregateOutputType | null
    _max: UserCardioSetMaxAggregateOutputType | null
  }

  export type UserCardioSetAvgAggregateOutputType = {
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    caloriesBurned: number | null
  }

  export type UserCardioSetSumAggregateOutputType = {
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    caloriesBurned: number | null
  }

  export type UserCardioSetMinAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    isCompleted: boolean | null
    caloriesBurned: number | null
    userWorkoutExerciseId: string | null
    skippedReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardioSetMaxAggregateOutputType = {
    id: string | null
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number | null
    isCompleted: boolean | null
    caloriesBurned: number | null
    userWorkoutExerciseId: string | null
    skippedReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardioSetCountAggregateOutputType = {
    id: number
    warmupTime: number
    workTime: number
    avgHeartRate: number
    avgSpeed: number
    distance: number
    order: number
    isCompleted: number
    caloriesBurned: number
    userWorkoutExerciseId: number
    skippedReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserCardioSetAvgAggregateInputType = {
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    caloriesBurned?: true
  }

  export type UserCardioSetSumAggregateInputType = {
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    caloriesBurned?: true
  }

  export type UserCardioSetMinAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    caloriesBurned?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardioSetMaxAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    caloriesBurned?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardioSetCountAggregateInputType = {
    id?: true
    warmupTime?: true
    workTime?: true
    avgHeartRate?: true
    avgSpeed?: true
    distance?: true
    order?: true
    isCompleted?: true
    caloriesBurned?: true
    userWorkoutExerciseId?: true
    skippedReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserCardioSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardioSet to aggregate.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCardioSets
    **/
    _count?: true | UserCardioSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCardioSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCardioSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCardioSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCardioSetMaxAggregateInputType
  }

  export type GetUserCardioSetAggregateType<T extends UserCardioSetAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCardioSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCardioSet[P]>
      : GetScalarType<T[P], AggregateUserCardioSet[P]>
  }




  export type UserCardioSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardioSetWhereInput
    orderBy?: UserCardioSetOrderByWithAggregationInput | UserCardioSetOrderByWithAggregationInput[]
    by: UserCardioSetScalarFieldEnum[] | UserCardioSetScalarFieldEnum
    having?: UserCardioSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCardioSetCountAggregateInputType | true
    _avg?: UserCardioSetAvgAggregateInputType
    _sum?: UserCardioSetSumAggregateInputType
    _min?: UserCardioSetMinAggregateInputType
    _max?: UserCardioSetMaxAggregateInputType
  }

  export type UserCardioSetGroupByOutputType = {
    id: string
    warmupTime: number | null
    workTime: number | null
    avgHeartRate: number | null
    avgSpeed: number | null
    distance: number | null
    order: number
    isCompleted: boolean
    caloriesBurned: number | null
    userWorkoutExerciseId: string
    skippedReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCardioSetCountAggregateOutputType | null
    _avg: UserCardioSetAvgAggregateOutputType | null
    _sum: UserCardioSetSumAggregateOutputType | null
    _min: UserCardioSetMinAggregateOutputType | null
    _max: UserCardioSetMaxAggregateOutputType | null
  }

  type GetUserCardioSetGroupByPayload<T extends UserCardioSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCardioSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCardioSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCardioSetGroupByOutputType[P]>
            : GetScalarType<T[P], UserCardioSetGroupByOutputType[P]>
        }
      >
    >


  export type UserCardioSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    caloriesBurned?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    caloriesBurned?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    caloriesBurned?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCardioSet"]>

  export type UserCardioSetSelectScalar = {
    id?: boolean
    warmupTime?: boolean
    workTime?: boolean
    avgHeartRate?: boolean
    avgSpeed?: boolean
    distance?: boolean
    order?: boolean
    isCompleted?: boolean
    caloriesBurned?: boolean
    userWorkoutExerciseId?: boolean
    skippedReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserCardioSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "warmupTime" | "workTime" | "avgHeartRate" | "avgSpeed" | "distance" | "order" | "isCompleted" | "caloriesBurned" | "userWorkoutExerciseId" | "skippedReason" | "createdAt" | "updatedAt", ExtArgs["result"]["userCardioSet"]>
  export type UserCardioSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserCardioSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserCardioSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }

  export type $UserCardioSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCardioSet"
    objects: {
      userWorkoutExercise: Prisma.$UserWorkoutExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      warmupTime: number | null
      workTime: number | null
      avgHeartRate: number | null
      avgSpeed: number | null
      distance: number | null
      order: number
      isCompleted: boolean
      caloriesBurned: number | null
      userWorkoutExerciseId: string
      skippedReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userCardioSet"]>
    composites: {}
  }

  type UserCardioSetGetPayload<S extends boolean | null | undefined | UserCardioSetDefaultArgs> = $Result.GetResult<Prisma.$UserCardioSetPayload, S>

  type UserCardioSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCardioSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserCardioSetCountAggregateInputType | true
    }

  export interface UserCardioSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCardioSet'], meta: { name: 'UserCardioSet' } }
    /**
     * Find zero or one UserCardioSet that matches the filter.
     * @param {UserCardioSetFindUniqueArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCardioSetFindUniqueArgs>(args: SelectSubset<T, UserCardioSetFindUniqueArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserCardioSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCardioSetFindUniqueOrThrowArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCardioSetFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCardioSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCardioSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindFirstArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCardioSetFindFirstArgs>(args?: SelectSubset<T, UserCardioSetFindFirstArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCardioSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindFirstOrThrowArgs} args - Arguments to find a UserCardioSet
     * @example
     * // Get one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCardioSetFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCardioSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserCardioSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCardioSets
     * const userCardioSets = await prisma.userCardioSet.findMany()
     * 
     * // Get first 10 UserCardioSets
     * const userCardioSets = await prisma.userCardioSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCardioSetFindManyArgs>(args?: SelectSubset<T, UserCardioSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserCardioSet.
     * @param {UserCardioSetCreateArgs} args - Arguments to create a UserCardioSet.
     * @example
     * // Create one UserCardioSet
     * const UserCardioSet = await prisma.userCardioSet.create({
     *   data: {
     *     // ... data to create a UserCardioSet
     *   }
     * })
     * 
     */
    create<T extends UserCardioSetCreateArgs>(args: SelectSubset<T, UserCardioSetCreateArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserCardioSets.
     * @param {UserCardioSetCreateManyArgs} args - Arguments to create many UserCardioSets.
     * @example
     * // Create many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCardioSetCreateManyArgs>(args?: SelectSubset<T, UserCardioSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCardioSets and returns the data saved in the database.
     * @param {UserCardioSetCreateManyAndReturnArgs} args - Arguments to create many UserCardioSets.
     * @example
     * // Create many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCardioSets and only return the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCardioSetCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCardioSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserCardioSet.
     * @param {UserCardioSetDeleteArgs} args - Arguments to delete one UserCardioSet.
     * @example
     * // Delete one UserCardioSet
     * const UserCardioSet = await prisma.userCardioSet.delete({
     *   where: {
     *     // ... filter to delete one UserCardioSet
     *   }
     * })
     * 
     */
    delete<T extends UserCardioSetDeleteArgs>(args: SelectSubset<T, UserCardioSetDeleteArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserCardioSet.
     * @param {UserCardioSetUpdateArgs} args - Arguments to update one UserCardioSet.
     * @example
     * // Update one UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCardioSetUpdateArgs>(args: SelectSubset<T, UserCardioSetUpdateArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserCardioSets.
     * @param {UserCardioSetDeleteManyArgs} args - Arguments to filter UserCardioSets to delete.
     * @example
     * // Delete a few UserCardioSets
     * const { count } = await prisma.userCardioSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCardioSetDeleteManyArgs>(args?: SelectSubset<T, UserCardioSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCardioSetUpdateManyArgs>(args: SelectSubset<T, UserCardioSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCardioSets and returns the data updated in the database.
     * @param {UserCardioSetUpdateManyAndReturnArgs} args - Arguments to update many UserCardioSets.
     * @example
     * // Update many UserCardioSets
     * const userCardioSet = await prisma.userCardioSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCardioSets and only return the `id`
     * const userCardioSetWithIdOnly = await prisma.userCardioSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCardioSetUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCardioSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserCardioSet.
     * @param {UserCardioSetUpsertArgs} args - Arguments to update or create a UserCardioSet.
     * @example
     * // Update or create a UserCardioSet
     * const userCardioSet = await prisma.userCardioSet.upsert({
     *   create: {
     *     // ... data to create a UserCardioSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCardioSet we want to update
     *   }
     * })
     */
    upsert<T extends UserCardioSetUpsertArgs>(args: SelectSubset<T, UserCardioSetUpsertArgs<ExtArgs>>): Prisma__UserCardioSetClient<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserCardioSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetCountArgs} args - Arguments to filter UserCardioSets to count.
     * @example
     * // Count the number of UserCardioSets
     * const count = await prisma.userCardioSet.count({
     *   where: {
     *     // ... the filter for the UserCardioSets we want to count
     *   }
     * })
    **/
    count<T extends UserCardioSetCountArgs>(
      args?: Subset<T, UserCardioSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCardioSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCardioSetAggregateArgs>(args: Subset<T, UserCardioSetAggregateArgs>): Prisma.PrismaPromise<GetUserCardioSetAggregateType<T>>

    /**
     * Group by UserCardioSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardioSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCardioSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCardioSetGroupByArgs['orderBy'] }
        : { orderBy?: UserCardioSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCardioSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCardioSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCardioSet model
   */
  readonly fields: UserCardioSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCardioSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCardioSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userWorkoutExercise<T extends UserWorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCardioSet model
   */
  interface UserCardioSetFieldRefs {
    readonly id: FieldRef<"UserCardioSet", 'String'>
    readonly warmupTime: FieldRef<"UserCardioSet", 'Int'>
    readonly workTime: FieldRef<"UserCardioSet", 'Int'>
    readonly avgHeartRate: FieldRef<"UserCardioSet", 'Int'>
    readonly avgSpeed: FieldRef<"UserCardioSet", 'Float'>
    readonly distance: FieldRef<"UserCardioSet", 'Float'>
    readonly order: FieldRef<"UserCardioSet", 'Int'>
    readonly isCompleted: FieldRef<"UserCardioSet", 'Boolean'>
    readonly caloriesBurned: FieldRef<"UserCardioSet", 'Int'>
    readonly userWorkoutExerciseId: FieldRef<"UserCardioSet", 'String'>
    readonly skippedReason: FieldRef<"UserCardioSet", 'String'>
    readonly createdAt: FieldRef<"UserCardioSet", 'DateTime'>
    readonly updatedAt: FieldRef<"UserCardioSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCardioSet findUnique
   */
  export type UserCardioSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where: UserCardioSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet findUniqueOrThrow
   */
  export type UserCardioSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where: UserCardioSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet findFirst
   */
  export type UserCardioSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardioSets.
     */
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet findFirstOrThrow
   */
  export type UserCardioSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSet to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardioSets.
     */
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet findMany
   */
  export type UserCardioSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter, which UserCardioSets to fetch.
     */
    where?: UserCardioSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardioSets to fetch.
     */
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCardioSets.
     */
    cursor?: UserCardioSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardioSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardioSets.
     */
    skip?: number
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet create
   */
  export type UserCardioSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCardioSet.
     */
    data: XOR<UserCardioSetCreateInput, UserCardioSetUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet createMany
   */
  export type UserCardioSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCardioSets.
     */
    data: UserCardioSetCreateManyInput | UserCardioSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCardioSet createManyAndReturn
   */
  export type UserCardioSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * The data used to create many UserCardioSets.
     */
    data: UserCardioSetCreateManyInput | UserCardioSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCardioSet update
   */
  export type UserCardioSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCardioSet.
     */
    data: XOR<UserCardioSetUpdateInput, UserCardioSetUncheckedUpdateInput>
    /**
     * Choose, which UserCardioSet to update.
     */
    where: UserCardioSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet updateMany
   */
  export type UserCardioSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCardioSets.
     */
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which UserCardioSets to update
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to update.
     */
    limit?: number
  }

  /**
   * UserCardioSet updateManyAndReturn
   */
  export type UserCardioSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * The data used to update UserCardioSets.
     */
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyInput>
    /**
     * Filter which UserCardioSets to update
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCardioSet upsert
   */
  export type UserCardioSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCardioSet to update in case it exists.
     */
    where: UserCardioSetWhereUniqueInput
    /**
     * In case the UserCardioSet found by the `where` argument doesn't exist, create a new UserCardioSet with this data.
     */
    create: XOR<UserCardioSetCreateInput, UserCardioSetUncheckedCreateInput>
    /**
     * In case the UserCardioSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCardioSetUpdateInput, UserCardioSetUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet delete
   */
  export type UserCardioSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    /**
     * Filter which UserCardioSet to delete.
     */
    where: UserCardioSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserCardioSet deleteMany
   */
  export type UserCardioSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardioSets to delete
     */
    where?: UserCardioSetWhereInput
    /**
     * Limit how many UserCardioSets to delete.
     */
    limit?: number
  }

  /**
   * UserCardioSet without action
   */
  export type UserCardioSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
  }


  /**
   * Model UserStrengthSet
   */

  export type AggregateUserStrengthSet = {
    _count: UserStrengthSetCountAggregateOutputType | null
    _avg: UserStrengthSetAvgAggregateOutputType | null
    _sum: UserStrengthSetSumAggregateOutputType | null
    _min: UserStrengthSetMinAggregateOutputType | null
    _max: UserStrengthSetMaxAggregateOutputType | null
  }

  export type UserStrengthSetAvgAggregateOutputType = {
    reps: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type UserStrengthSetSumAggregateOutputType = {
    reps: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type UserStrengthSetMinAggregateOutputType = {
    id: string | null
    reps: number | null
    weight: number | null
    isBodyWeight: boolean | null
    restTime: number | null
    order: number | null
    isCompleted: boolean | null
    isWarmup: boolean | null
    isMuscleFailure: boolean | null
    isJointPain: boolean | null
    skippedReason: string | null
    userWorkoutExerciseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStrengthSetMaxAggregateOutputType = {
    id: string | null
    reps: number | null
    weight: number | null
    isBodyWeight: boolean | null
    restTime: number | null
    order: number | null
    isCompleted: boolean | null
    isWarmup: boolean | null
    isMuscleFailure: boolean | null
    isJointPain: boolean | null
    skippedReason: string | null
    userWorkoutExerciseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStrengthSetCountAggregateOutputType = {
    id: number
    reps: number
    weight: number
    isBodyWeight: number
    restTime: number
    order: number
    isCompleted: number
    isWarmup: number
    isMuscleFailure: number
    isJointPain: number
    skippedReason: number
    userWorkoutExerciseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStrengthSetAvgAggregateInputType = {
    reps?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type UserStrengthSetSumAggregateInputType = {
    reps?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type UserStrengthSetMinAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStrengthSetMaxAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStrengthSetCountAggregateInputType = {
    id?: true
    reps?: true
    weight?: true
    isBodyWeight?: true
    restTime?: true
    order?: true
    isCompleted?: true
    isWarmup?: true
    isMuscleFailure?: true
    isJointPain?: true
    skippedReason?: true
    userWorkoutExerciseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStrengthSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStrengthSet to aggregate.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStrengthSets
    **/
    _count?: true | UserStrengthSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStrengthSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStrengthSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStrengthSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStrengthSetMaxAggregateInputType
  }

  export type GetUserStrengthSetAggregateType<T extends UserStrengthSetAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStrengthSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStrengthSet[P]>
      : GetScalarType<T[P], AggregateUserStrengthSet[P]>
  }




  export type UserStrengthSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStrengthSetWhereInput
    orderBy?: UserStrengthSetOrderByWithAggregationInput | UserStrengthSetOrderByWithAggregationInput[]
    by: UserStrengthSetScalarFieldEnum[] | UserStrengthSetScalarFieldEnum
    having?: UserStrengthSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStrengthSetCountAggregateInputType | true
    _avg?: UserStrengthSetAvgAggregateInputType
    _sum?: UserStrengthSetSumAggregateInputType
    _min?: UserStrengthSetMinAggregateInputType
    _max?: UserStrengthSetMaxAggregateInputType
  }

  export type UserStrengthSetGroupByOutputType = {
    id: string
    reps: number | null
    weight: number | null
    isBodyWeight: boolean
    restTime: number
    order: number
    isCompleted: boolean
    isWarmup: boolean
    isMuscleFailure: boolean
    isJointPain: boolean
    skippedReason: string | null
    userWorkoutExerciseId: string
    createdAt: Date
    updatedAt: Date
    _count: UserStrengthSetCountAggregateOutputType | null
    _avg: UserStrengthSetAvgAggregateOutputType | null
    _sum: UserStrengthSetSumAggregateOutputType | null
    _min: UserStrengthSetMinAggregateOutputType | null
    _max: UserStrengthSetMaxAggregateOutputType | null
  }

  type GetUserStrengthSetGroupByPayload<T extends UserStrengthSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStrengthSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStrengthSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStrengthSetGroupByOutputType[P]>
            : GetScalarType<T[P], UserStrengthSetGroupByOutputType[P]>
        }
      >
    >


  export type UserStrengthSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStrengthSet"]>

  export type UserStrengthSetSelectScalar = {
    id?: boolean
    reps?: boolean
    weight?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    order?: boolean
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: boolean
    userWorkoutExerciseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserStrengthSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reps" | "weight" | "isBodyWeight" | "restTime" | "order" | "isCompleted" | "isWarmup" | "isMuscleFailure" | "isJointPain" | "skippedReason" | "userWorkoutExerciseId" | "createdAt" | "updatedAt", ExtArgs["result"]["userStrengthSet"]>
  export type UserStrengthSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserStrengthSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }
  export type UserStrengthSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userWorkoutExercise?: boolean | UserWorkoutExerciseDefaultArgs<ExtArgs>
  }

  export type $UserStrengthSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStrengthSet"
    objects: {
      userWorkoutExercise: Prisma.$UserWorkoutExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reps: number | null
      weight: number | null
      isBodyWeight: boolean
      restTime: number
      order: number
      isCompleted: boolean
      isWarmup: boolean
      isMuscleFailure: boolean
      isJointPain: boolean
      skippedReason: string | null
      userWorkoutExerciseId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userStrengthSet"]>
    composites: {}
  }

  type UserStrengthSetGetPayload<S extends boolean | null | undefined | UserStrengthSetDefaultArgs> = $Result.GetResult<Prisma.$UserStrengthSetPayload, S>

  type UserStrengthSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStrengthSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserStrengthSetCountAggregateInputType | true
    }

  export interface UserStrengthSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStrengthSet'], meta: { name: 'UserStrengthSet' } }
    /**
     * Find zero or one UserStrengthSet that matches the filter.
     * @param {UserStrengthSetFindUniqueArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStrengthSetFindUniqueArgs>(args: SelectSubset<T, UserStrengthSetFindUniqueArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStrengthSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStrengthSetFindUniqueOrThrowArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStrengthSetFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStrengthSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStrengthSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindFirstArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStrengthSetFindFirstArgs>(args?: SelectSubset<T, UserStrengthSetFindFirstArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStrengthSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindFirstOrThrowArgs} args - Arguments to find a UserStrengthSet
     * @example
     * // Get one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStrengthSetFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStrengthSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStrengthSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStrengthSets
     * const userStrengthSets = await prisma.userStrengthSet.findMany()
     * 
     * // Get first 10 UserStrengthSets
     * const userStrengthSets = await prisma.userStrengthSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStrengthSetFindManyArgs>(args?: SelectSubset<T, UserStrengthSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStrengthSet.
     * @param {UserStrengthSetCreateArgs} args - Arguments to create a UserStrengthSet.
     * @example
     * // Create one UserStrengthSet
     * const UserStrengthSet = await prisma.userStrengthSet.create({
     *   data: {
     *     // ... data to create a UserStrengthSet
     *   }
     * })
     * 
     */
    create<T extends UserStrengthSetCreateArgs>(args: SelectSubset<T, UserStrengthSetCreateArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStrengthSets.
     * @param {UserStrengthSetCreateManyArgs} args - Arguments to create many UserStrengthSets.
     * @example
     * // Create many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStrengthSetCreateManyArgs>(args?: SelectSubset<T, UserStrengthSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStrengthSets and returns the data saved in the database.
     * @param {UserStrengthSetCreateManyAndReturnArgs} args - Arguments to create many UserStrengthSets.
     * @example
     * // Create many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStrengthSets and only return the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStrengthSetCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStrengthSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStrengthSet.
     * @param {UserStrengthSetDeleteArgs} args - Arguments to delete one UserStrengthSet.
     * @example
     * // Delete one UserStrengthSet
     * const UserStrengthSet = await prisma.userStrengthSet.delete({
     *   where: {
     *     // ... filter to delete one UserStrengthSet
     *   }
     * })
     * 
     */
    delete<T extends UserStrengthSetDeleteArgs>(args: SelectSubset<T, UserStrengthSetDeleteArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStrengthSet.
     * @param {UserStrengthSetUpdateArgs} args - Arguments to update one UserStrengthSet.
     * @example
     * // Update one UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStrengthSetUpdateArgs>(args: SelectSubset<T, UserStrengthSetUpdateArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStrengthSets.
     * @param {UserStrengthSetDeleteManyArgs} args - Arguments to filter UserStrengthSets to delete.
     * @example
     * // Delete a few UserStrengthSets
     * const { count } = await prisma.userStrengthSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStrengthSetDeleteManyArgs>(args?: SelectSubset<T, UserStrengthSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStrengthSetUpdateManyArgs>(args: SelectSubset<T, UserStrengthSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStrengthSets and returns the data updated in the database.
     * @param {UserStrengthSetUpdateManyAndReturnArgs} args - Arguments to update many UserStrengthSets.
     * @example
     * // Update many UserStrengthSets
     * const userStrengthSet = await prisma.userStrengthSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStrengthSets and only return the `id`
     * const userStrengthSetWithIdOnly = await prisma.userStrengthSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStrengthSetUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStrengthSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStrengthSet.
     * @param {UserStrengthSetUpsertArgs} args - Arguments to update or create a UserStrengthSet.
     * @example
     * // Update or create a UserStrengthSet
     * const userStrengthSet = await prisma.userStrengthSet.upsert({
     *   create: {
     *     // ... data to create a UserStrengthSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStrengthSet we want to update
     *   }
     * })
     */
    upsert<T extends UserStrengthSetUpsertArgs>(args: SelectSubset<T, UserStrengthSetUpsertArgs<ExtArgs>>): Prisma__UserStrengthSetClient<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStrengthSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetCountArgs} args - Arguments to filter UserStrengthSets to count.
     * @example
     * // Count the number of UserStrengthSets
     * const count = await prisma.userStrengthSet.count({
     *   where: {
     *     // ... the filter for the UserStrengthSets we want to count
     *   }
     * })
    **/
    count<T extends UserStrengthSetCountArgs>(
      args?: Subset<T, UserStrengthSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStrengthSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStrengthSetAggregateArgs>(args: Subset<T, UserStrengthSetAggregateArgs>): Prisma.PrismaPromise<GetUserStrengthSetAggregateType<T>>

    /**
     * Group by UserStrengthSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStrengthSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStrengthSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStrengthSetGroupByArgs['orderBy'] }
        : { orderBy?: UserStrengthSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStrengthSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStrengthSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStrengthSet model
   */
  readonly fields: UserStrengthSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStrengthSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStrengthSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userWorkoutExercise<T extends UserWorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStrengthSet model
   */
  interface UserStrengthSetFieldRefs {
    readonly id: FieldRef<"UserStrengthSet", 'String'>
    readonly reps: FieldRef<"UserStrengthSet", 'Int'>
    readonly weight: FieldRef<"UserStrengthSet", 'Float'>
    readonly isBodyWeight: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly restTime: FieldRef<"UserStrengthSet", 'Int'>
    readonly order: FieldRef<"UserStrengthSet", 'Int'>
    readonly isCompleted: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isWarmup: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isMuscleFailure: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly isJointPain: FieldRef<"UserStrengthSet", 'Boolean'>
    readonly skippedReason: FieldRef<"UserStrengthSet", 'String'>
    readonly userWorkoutExerciseId: FieldRef<"UserStrengthSet", 'String'>
    readonly createdAt: FieldRef<"UserStrengthSet", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStrengthSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStrengthSet findUnique
   */
  export type UserStrengthSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where: UserStrengthSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet findUniqueOrThrow
   */
  export type UserStrengthSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where: UserStrengthSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet findFirst
   */
  export type UserStrengthSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStrengthSets.
     */
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet findFirstOrThrow
   */
  export type UserStrengthSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSet to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStrengthSets.
     */
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet findMany
   */
  export type UserStrengthSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter, which UserStrengthSets to fetch.
     */
    where?: UserStrengthSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStrengthSets to fetch.
     */
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStrengthSets.
     */
    cursor?: UserStrengthSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStrengthSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStrengthSets.
     */
    skip?: number
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet create
   */
  export type UserStrengthSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStrengthSet.
     */
    data: XOR<UserStrengthSetCreateInput, UserStrengthSetUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet createMany
   */
  export type UserStrengthSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStrengthSets.
     */
    data: UserStrengthSetCreateManyInput | UserStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStrengthSet createManyAndReturn
   */
  export type UserStrengthSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to create many UserStrengthSets.
     */
    data: UserStrengthSetCreateManyInput | UserStrengthSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStrengthSet update
   */
  export type UserStrengthSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStrengthSet.
     */
    data: XOR<UserStrengthSetUpdateInput, UserStrengthSetUncheckedUpdateInput>
    /**
     * Choose, which UserStrengthSet to update.
     */
    where: UserStrengthSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet updateMany
   */
  export type UserStrengthSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStrengthSets.
     */
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which UserStrengthSets to update
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to update.
     */
    limit?: number
  }

  /**
   * UserStrengthSet updateManyAndReturn
   */
  export type UserStrengthSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * The data used to update UserStrengthSets.
     */
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyInput>
    /**
     * Filter which UserStrengthSets to update
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStrengthSet upsert
   */
  export type UserStrengthSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStrengthSet to update in case it exists.
     */
    where: UserStrengthSetWhereUniqueInput
    /**
     * In case the UserStrengthSet found by the `where` argument doesn't exist, create a new UserStrengthSet with this data.
     */
    create: XOR<UserStrengthSetCreateInput, UserStrengthSetUncheckedCreateInput>
    /**
     * In case the UserStrengthSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStrengthSetUpdateInput, UserStrengthSetUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet delete
   */
  export type UserStrengthSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    /**
     * Filter which UserStrengthSet to delete.
     */
    where: UserStrengthSetWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserStrengthSet deleteMany
   */
  export type UserStrengthSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStrengthSets to delete
     */
    where?: UserStrengthSetWhereInput
    /**
     * Limit how many UserStrengthSets to delete.
     */
    limit?: number
  }

  /**
   * UserStrengthSet without action
   */
  export type UserStrengthSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
  }


  /**
   * Model Program
   */

  export type AggregateProgram = {
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  export type ProgramMinAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramMaxAggregateOutputType = {
    id: string | null
    name: string | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramCountAggregateOutputType = {
    id: number
    name: number
    notes: number
    startDate: number
    endDate: number
    isActive: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgramMinAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramMaxAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramCountAggregateInputType = {
    id?: true
    name?: true
    notes?: true
    startDate?: true
    endDate?: true
    isActive?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Program to aggregate.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Programs
    **/
    _count?: true | ProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramMaxAggregateInputType
  }

  export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgram[P]>
      : GetScalarType<T[P], AggregateProgram[P]>
  }




  export type ProgramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithAggregationInput | ProgramOrderByWithAggregationInput[]
    by: ProgramScalarFieldEnum[] | ProgramScalarFieldEnum
    having?: ProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramCountAggregateInputType | true
    _min?: ProgramMinAggregateInputType
    _max?: ProgramMaxAggregateInputType
  }

  export type ProgramGroupByOutputType = {
    id: string
    name: string
    notes: string | null
    startDate: Date
    endDate: Date
    isActive: boolean
    ownerId: string
    createdAt: Date
    updatedAt: Date
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  type GetProgramGroupByPayload<T extends ProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramGroupByOutputType[P]>
        }
      >
    >


  export type ProgramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    programWorkouts?: boolean | Program$programWorkoutsArgs<ExtArgs>
    userWorkout?: boolean | Program$userWorkoutArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectScalar = {
    id?: boolean
    name?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProgramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "notes" | "startDate" | "endDate" | "isActive" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["program"]>
  export type ProgramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programWorkouts?: boolean | Program$programWorkoutsArgs<ExtArgs>
    userWorkout?: boolean | Program$userWorkoutArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProgramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Program"
    objects: {
      programWorkouts: Prisma.$ProgramWorkoutPayload<ExtArgs>[]
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      notes: string | null
      startDate: Date
      endDate: Date
      isActive: boolean
      ownerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["program"]>
    composites: {}
  }

  type ProgramGetPayload<S extends boolean | null | undefined | ProgramDefaultArgs> = $Result.GetResult<Prisma.$ProgramPayload, S>

  type ProgramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ProgramCountAggregateInputType | true
    }

  export interface ProgramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Program'], meta: { name: 'Program' } }
    /**
     * Find zero or one Program that matches the filter.
     * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramFindUniqueArgs>(args: SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Program that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramFindFirstArgs>(args?: SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Programs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Programs
     * const programs = await prisma.program.findMany()
     * 
     * // Get first 10 Programs
     * const programs = await prisma.program.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramFindManyArgs>(args?: SelectSubset<T, ProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Program.
     * @param {ProgramCreateArgs} args - Arguments to create a Program.
     * @example
     * // Create one Program
     * const Program = await prisma.program.create({
     *   data: {
     *     // ... data to create a Program
     *   }
     * })
     * 
     */
    create<T extends ProgramCreateArgs>(args: SelectSubset<T, ProgramCreateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Programs.
     * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramCreateManyArgs>(args?: SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Programs and returns the data saved in the database.
     * @param {ProgramCreateManyAndReturnArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Program.
     * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
     * @example
     * // Delete one Program
     * const Program = await prisma.program.delete({
     *   where: {
     *     // ... filter to delete one Program
     *   }
     * })
     * 
     */
    delete<T extends ProgramDeleteArgs>(args: SelectSubset<T, ProgramDeleteArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Program.
     * @param {ProgramUpdateArgs} args - Arguments to update one Program.
     * @example
     * // Update one Program
     * const program = await prisma.program.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramUpdateArgs>(args: SelectSubset<T, ProgramUpdateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Programs.
     * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
     * @example
     * // Delete a few Programs
     * const { count } = await prisma.program.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramDeleteManyArgs>(args?: SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramUpdateManyArgs>(args: SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs and returns the data updated in the database.
     * @param {ProgramUpdateManyAndReturnArgs} args - Arguments to update many Programs.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Program.
     * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
     * @example
     * // Update or create a Program
     * const program = await prisma.program.upsert({
     *   create: {
     *     // ... data to create a Program
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Program we want to update
     *   }
     * })
     */
    upsert<T extends ProgramUpsertArgs>(args: SelectSubset<T, ProgramUpsertArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
     * @example
     * // Count the number of Programs
     * const count = await prisma.program.count({
     *   where: {
     *     // ... the filter for the Programs we want to count
     *   }
     * })
    **/
    count<T extends ProgramCountArgs>(
      args?: Subset<T, ProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramAggregateArgs>(args: Subset<T, ProgramAggregateArgs>): Prisma.PrismaPromise<GetProgramAggregateType<T>>

    /**
     * Group by Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramGroupByArgs['orderBy'] }
        : { orderBy?: ProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Program model
   */
  readonly fields: ProgramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Program.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programWorkouts<T extends Program$programWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Program$programWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkout<T extends Program$userWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, Program$userWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Program model
   */
  interface ProgramFieldRefs {
    readonly id: FieldRef<"Program", 'String'>
    readonly name: FieldRef<"Program", 'String'>
    readonly notes: FieldRef<"Program", 'String'>
    readonly startDate: FieldRef<"Program", 'DateTime'>
    readonly endDate: FieldRef<"Program", 'DateTime'>
    readonly isActive: FieldRef<"Program", 'Boolean'>
    readonly ownerId: FieldRef<"Program", 'String'>
    readonly createdAt: FieldRef<"Program", 'DateTime'>
    readonly updatedAt: FieldRef<"Program", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Program findUnique
   */
  export type ProgramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program findUniqueOrThrow
   */
  export type ProgramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program findFirst
   */
  export type ProgramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program findFirstOrThrow
   */
  export type ProgramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program findMany
   */
  export type ProgramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Programs to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program create
   */
  export type ProgramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to create a Program.
     */
    data: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program createMany
   */
  export type ProgramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Program createManyAndReturn
   */
  export type ProgramCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program update
   */
  export type ProgramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to update a Program.
     */
    data: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
    /**
     * Choose, which Program to update.
     */
    where: ProgramWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program updateMany
   */
  export type ProgramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
  }

  /**
   * Program updateManyAndReturn
   */
  export type ProgramUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program upsert
   */
  export type ProgramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The filter to search for the Program to update in case it exists.
     */
    where: ProgramWhereUniqueInput
    /**
     * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
     */
    create: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
    /**
     * In case the Program was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program delete
   */
  export type ProgramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter which Program to delete.
     */
    where: ProgramWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Program deleteMany
   */
  export type ProgramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Programs to delete
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to delete.
     */
    limit?: number
  }

  /**
   * Program.programWorkouts
   */
  export type Program$programWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    cursor?: ProgramWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * Program.userWorkout
   */
  export type Program$userWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * Program without action
   */
  export type ProgramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
  }


  /**
   * Model ProgramWorkout
   */

  export type AggregateProgramWorkout = {
    _count: ProgramWorkoutCountAggregateOutputType | null
    _min: ProgramWorkoutMinAggregateOutputType | null
    _max: ProgramWorkoutMaxAggregateOutputType | null
  }

  export type ProgramWorkoutMinAggregateOutputType = {
    id: string | null
    programId: string | null
    workoutId: string | null
    workoutLevel: $Enums.WorkoutLevel | null
    workoutGoal: $Enums.WorkoutGoal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramWorkoutMaxAggregateOutputType = {
    id: string | null
    programId: string | null
    workoutId: string | null
    workoutLevel: $Enums.WorkoutLevel | null
    workoutGoal: $Enums.WorkoutGoal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramWorkoutCountAggregateOutputType = {
    id: number
    programId: number
    workoutId: number
    workoutLevel: number
    workoutGoal: number
    daysOfWeek: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgramWorkoutMinAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    workoutLevel?: true
    workoutGoal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramWorkoutMaxAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    workoutLevel?: true
    workoutGoal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramWorkoutCountAggregateInputType = {
    id?: true
    programId?: true
    workoutId?: true
    workoutLevel?: true
    workoutGoal?: true
    daysOfWeek?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgramWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramWorkout to aggregate.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProgramWorkouts
    **/
    _count?: true | ProgramWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramWorkoutMaxAggregateInputType
  }

  export type GetProgramWorkoutAggregateType<T extends ProgramWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateProgramWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgramWorkout[P]>
      : GetScalarType<T[P], AggregateProgramWorkout[P]>
  }




  export type ProgramWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithAggregationInput | ProgramWorkoutOrderByWithAggregationInput[]
    by: ProgramWorkoutScalarFieldEnum[] | ProgramWorkoutScalarFieldEnum
    having?: ProgramWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramWorkoutCountAggregateInputType | true
    _min?: ProgramWorkoutMinAggregateInputType
    _max?: ProgramWorkoutMaxAggregateInputType
  }

  export type ProgramWorkoutGroupByOutputType = {
    id: string
    programId: string
    workoutId: string
    workoutLevel: $Enums.WorkoutLevel
    workoutGoal: $Enums.WorkoutGoal
    daysOfWeek: $Enums.DaysOfWeek[]
    createdAt: Date
    updatedAt: Date
    _count: ProgramWorkoutCountAggregateOutputType | null
    _min: ProgramWorkoutMinAggregateOutputType | null
    _max: ProgramWorkoutMaxAggregateOutputType | null
  }

  type GetProgramWorkoutGroupByPayload<T extends ProgramWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type ProgramWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    workoutLevel?: boolean
    workoutGoal?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    workoutLevel?: boolean
    workoutGoal?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    workoutLevel?: boolean
    workoutGoal?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programWorkout"]>

  export type ProgramWorkoutSelectScalar = {
    id?: boolean
    programId?: boolean
    workoutId?: boolean
    workoutLevel?: boolean
    workoutGoal?: boolean
    daysOfWeek?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProgramWorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "programId" | "workoutId" | "workoutLevel" | "workoutGoal" | "daysOfWeek" | "createdAt" | "updatedAt", ExtArgs["result"]["programWorkout"]>
  export type ProgramWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type ProgramWorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type ProgramWorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $ProgramWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProgramWorkout"
    objects: {
      program: Prisma.$ProgramPayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      programId: string
      workoutId: string
      workoutLevel: $Enums.WorkoutLevel
      workoutGoal: $Enums.WorkoutGoal
      daysOfWeek: $Enums.DaysOfWeek[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["programWorkout"]>
    composites: {}
  }

  type ProgramWorkoutGetPayload<S extends boolean | null | undefined | ProgramWorkoutDefaultArgs> = $Result.GetResult<Prisma.$ProgramWorkoutPayload, S>

  type ProgramWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramWorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ProgramWorkoutCountAggregateInputType | true
    }

  export interface ProgramWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProgramWorkout'], meta: { name: 'ProgramWorkout' } }
    /**
     * Find zero or one ProgramWorkout that matches the filter.
     * @param {ProgramWorkoutFindUniqueArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramWorkoutFindUniqueArgs>(args: SelectSubset<T, ProgramWorkoutFindUniqueArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProgramWorkout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramWorkoutFindUniqueOrThrowArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramWorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindFirstArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramWorkoutFindFirstArgs>(args?: SelectSubset<T, ProgramWorkoutFindFirstArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindFirstOrThrowArgs} args - Arguments to find a ProgramWorkout
     * @example
     * // Get one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramWorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramWorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProgramWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProgramWorkouts
     * const programWorkouts = await prisma.programWorkout.findMany()
     * 
     * // Get first 10 ProgramWorkouts
     * const programWorkouts = await prisma.programWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramWorkoutFindManyArgs>(args?: SelectSubset<T, ProgramWorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProgramWorkout.
     * @param {ProgramWorkoutCreateArgs} args - Arguments to create a ProgramWorkout.
     * @example
     * // Create one ProgramWorkout
     * const ProgramWorkout = await prisma.programWorkout.create({
     *   data: {
     *     // ... data to create a ProgramWorkout
     *   }
     * })
     * 
     */
    create<T extends ProgramWorkoutCreateArgs>(args: SelectSubset<T, ProgramWorkoutCreateArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProgramWorkouts.
     * @param {ProgramWorkoutCreateManyArgs} args - Arguments to create many ProgramWorkouts.
     * @example
     * // Create many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramWorkoutCreateManyArgs>(args?: SelectSubset<T, ProgramWorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProgramWorkouts and returns the data saved in the database.
     * @param {ProgramWorkoutCreateManyAndReturnArgs} args - Arguments to create many ProgramWorkouts.
     * @example
     * // Create many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProgramWorkouts and only return the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramWorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramWorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProgramWorkout.
     * @param {ProgramWorkoutDeleteArgs} args - Arguments to delete one ProgramWorkout.
     * @example
     * // Delete one ProgramWorkout
     * const ProgramWorkout = await prisma.programWorkout.delete({
     *   where: {
     *     // ... filter to delete one ProgramWorkout
     *   }
     * })
     * 
     */
    delete<T extends ProgramWorkoutDeleteArgs>(args: SelectSubset<T, ProgramWorkoutDeleteArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProgramWorkout.
     * @param {ProgramWorkoutUpdateArgs} args - Arguments to update one ProgramWorkout.
     * @example
     * // Update one ProgramWorkout
     * const programWorkout = await prisma.programWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramWorkoutUpdateArgs>(args: SelectSubset<T, ProgramWorkoutUpdateArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProgramWorkouts.
     * @param {ProgramWorkoutDeleteManyArgs} args - Arguments to filter ProgramWorkouts to delete.
     * @example
     * // Delete a few ProgramWorkouts
     * const { count } = await prisma.programWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramWorkoutDeleteManyArgs>(args?: SelectSubset<T, ProgramWorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramWorkoutUpdateManyArgs>(args: SelectSubset<T, ProgramWorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramWorkouts and returns the data updated in the database.
     * @param {ProgramWorkoutUpdateManyAndReturnArgs} args - Arguments to update many ProgramWorkouts.
     * @example
     * // Update many ProgramWorkouts
     * const programWorkout = await prisma.programWorkout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProgramWorkouts and only return the `id`
     * const programWorkoutWithIdOnly = await prisma.programWorkout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramWorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProgramWorkout.
     * @param {ProgramWorkoutUpsertArgs} args - Arguments to update or create a ProgramWorkout.
     * @example
     * // Update or create a ProgramWorkout
     * const programWorkout = await prisma.programWorkout.upsert({
     *   create: {
     *     // ... data to create a ProgramWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProgramWorkout we want to update
     *   }
     * })
     */
    upsert<T extends ProgramWorkoutUpsertArgs>(args: SelectSubset<T, ProgramWorkoutUpsertArgs<ExtArgs>>): Prisma__ProgramWorkoutClient<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProgramWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutCountArgs} args - Arguments to filter ProgramWorkouts to count.
     * @example
     * // Count the number of ProgramWorkouts
     * const count = await prisma.programWorkout.count({
     *   where: {
     *     // ... the filter for the ProgramWorkouts we want to count
     *   }
     * })
    **/
    count<T extends ProgramWorkoutCountArgs>(
      args?: Subset<T, ProgramWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProgramWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramWorkoutAggregateArgs>(args: Subset<T, ProgramWorkoutAggregateArgs>): Prisma.PrismaPromise<GetProgramWorkoutAggregateType<T>>

    /**
     * Group by ProgramWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: ProgramWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProgramWorkout model
   */
  readonly fields: ProgramWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProgramWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProgramWorkout model
   */
  interface ProgramWorkoutFieldRefs {
    readonly id: FieldRef<"ProgramWorkout", 'String'>
    readonly programId: FieldRef<"ProgramWorkout", 'String'>
    readonly workoutId: FieldRef<"ProgramWorkout", 'String'>
    readonly workoutLevel: FieldRef<"ProgramWorkout", 'WorkoutLevel'>
    readonly workoutGoal: FieldRef<"ProgramWorkout", 'WorkoutGoal'>
    readonly daysOfWeek: FieldRef<"ProgramWorkout", 'DaysOfWeek[]'>
    readonly createdAt: FieldRef<"ProgramWorkout", 'DateTime'>
    readonly updatedAt: FieldRef<"ProgramWorkout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProgramWorkout findUnique
   */
  export type ProgramWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where: ProgramWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout findUniqueOrThrow
   */
  export type ProgramWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where: ProgramWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout findFirst
   */
  export type ProgramWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramWorkouts.
     */
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout findFirstOrThrow
   */
  export type ProgramWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkout to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramWorkouts.
     */
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout findMany
   */
  export type ProgramWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which ProgramWorkouts to fetch.
     */
    where?: ProgramWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramWorkouts to fetch.
     */
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProgramWorkouts.
     */
    cursor?: ProgramWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramWorkouts.
     */
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout create
   */
  export type ProgramWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a ProgramWorkout.
     */
    data: XOR<ProgramWorkoutCreateInput, ProgramWorkoutUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout createMany
   */
  export type ProgramWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProgramWorkouts.
     */
    data: ProgramWorkoutCreateManyInput | ProgramWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProgramWorkout createManyAndReturn
   */
  export type ProgramWorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many ProgramWorkouts.
     */
    data: ProgramWorkoutCreateManyInput | ProgramWorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramWorkout update
   */
  export type ProgramWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a ProgramWorkout.
     */
    data: XOR<ProgramWorkoutUpdateInput, ProgramWorkoutUncheckedUpdateInput>
    /**
     * Choose, which ProgramWorkout to update.
     */
    where: ProgramWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout updateMany
   */
  export type ProgramWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProgramWorkouts.
     */
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which ProgramWorkouts to update
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to update.
     */
    limit?: number
  }

  /**
   * ProgramWorkout updateManyAndReturn
   */
  export type ProgramWorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * The data used to update ProgramWorkouts.
     */
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which ProgramWorkouts to update
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramWorkout upsert
   */
  export type ProgramWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the ProgramWorkout to update in case it exists.
     */
    where: ProgramWorkoutWhereUniqueInput
    /**
     * In case the ProgramWorkout found by the `where` argument doesn't exist, create a new ProgramWorkout with this data.
     */
    create: XOR<ProgramWorkoutCreateInput, ProgramWorkoutUncheckedCreateInput>
    /**
     * In case the ProgramWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramWorkoutUpdateInput, ProgramWorkoutUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout delete
   */
  export type ProgramWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    /**
     * Filter which ProgramWorkout to delete.
     */
    where: ProgramWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ProgramWorkout deleteMany
   */
  export type ProgramWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramWorkouts to delete
     */
    where?: ProgramWorkoutWhereInput
    /**
     * Limit how many ProgramWorkouts to delete.
     */
    limit?: number
  }

  /**
   * ProgramWorkout without action
   */
  export type ProgramWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
  }


  /**
   * Model Workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: string | null
    name: string | null
    isTemplate: boolean | null
    notes: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: string | null
    name: string | null
    isTemplate: boolean | null
    notes: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    name: number
    isTemplate: number
    notes: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkoutMinAggregateInputType = {
    id?: true
    name?: true
    isTemplate?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    name?: true
    isTemplate?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    name?: true
    isTemplate?: true
    notes?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workout to aggregate.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type WorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithAggregationInput | WorkoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: WorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: string
    name: string | null
    isTemplate: boolean
    notes: string | null
    ownerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends WorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isTemplate?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
    workoutExercises?: boolean | Workout$workoutExercisesArgs<ExtArgs>
    programWorkouts?: boolean | Workout$programWorkoutsArgs<ExtArgs>
    userWorkouts?: boolean | Workout$userWorkoutsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isTemplate?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isTemplate?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectScalar = {
    id?: boolean
    name?: boolean
    isTemplate?: boolean
    notes?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isTemplate" | "notes" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["workout"]>
  export type WorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
    workoutExercises?: boolean | Workout$workoutExercisesArgs<ExtArgs>
    programWorkouts?: boolean | Workout$programWorkoutsArgs<ExtArgs>
    userWorkouts?: boolean | Workout$userWorkoutsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }
  export type WorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Workout$ownerArgs<ExtArgs>
  }

  export type $WorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workout"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs> | null
      workoutExercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      programWorkouts: Prisma.$ProgramWorkoutPayload<ExtArgs>[]
      userWorkouts: Prisma.$UserWorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      isTemplate: boolean
      notes: string | null
      ownerId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }

  type WorkoutGetPayload<S extends boolean | null | undefined | WorkoutDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPayload, S>

  type WorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface WorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workout'], meta: { name: 'Workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {WorkoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutFindUniqueArgs>(args: SelectSubset<T, WorkoutFindUniqueArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutFindFirstArgs>(args?: SelectSubset<T, WorkoutFindFirstArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutFindManyArgs>(args?: SelectSubset<T, WorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workout.
     * @param {WorkoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
     */
    create<T extends WorkoutCreateArgs>(args: SelectSubset<T, WorkoutCreateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workouts.
     * @param {WorkoutCreateManyArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutCreateManyArgs>(args?: SelectSubset<T, WorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workouts and returns the data saved in the database.
     * @param {WorkoutCreateManyAndReturnArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workout.
     * @param {WorkoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
     */
    delete<T extends WorkoutDeleteArgs>(args: SelectSubset<T, WorkoutDeleteArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workout.
     * @param {WorkoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutUpdateArgs>(args: SelectSubset<T, WorkoutUpdateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutDeleteManyArgs>(args?: SelectSubset<T, WorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutUpdateManyArgs>(args: SelectSubset<T, WorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts and returns the data updated in the database.
     * @param {WorkoutUpdateManyAndReturnArgs} args - Arguments to update many Workouts.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workout.
     * @param {WorkoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutUpsertArgs>(args: SelectSubset<T, WorkoutUpsertArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutCountArgs>(
      args?: Subset<T, WorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workout model
   */
  readonly fields: WorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends Workout$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Workout$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workoutExercises<T extends Workout$workoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Workout$workoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    programWorkouts<T extends Workout$programWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$programWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userWorkouts<T extends Workout$userWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$userWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workout model
   */
  interface WorkoutFieldRefs {
    readonly id: FieldRef<"Workout", 'String'>
    readonly name: FieldRef<"Workout", 'String'>
    readonly isTemplate: FieldRef<"Workout", 'Boolean'>
    readonly notes: FieldRef<"Workout", 'String'>
    readonly ownerId: FieldRef<"Workout", 'String'>
    readonly createdAt: FieldRef<"Workout", 'DateTime'>
    readonly updatedAt: FieldRef<"Workout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workout findUnique
   */
  export type WorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout findUniqueOrThrow
   */
  export type WorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout findFirst
   */
  export type WorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout findFirstOrThrow
   */
  export type WorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout findMany
   */
  export type WorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout create
   */
  export type WorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Workout.
     */
    data: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout createMany
   */
  export type WorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workout createManyAndReturn
   */
  export type WorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workout update
   */
  export type WorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Workout.
     */
    data: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    /**
     * Choose, which Workout to update.
     */
    where: WorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout updateMany
   */
  export type WorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to update.
     */
    limit?: number
  }

  /**
   * Workout updateManyAndReturn
   */
  export type WorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workout upsert
   */
  export type WorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Workout to update in case it exists.
     */
    where: WorkoutWhereUniqueInput
    /**
     * In case the Workout found by the `where` argument doesn't exist, create a new Workout with this data.
     */
    create: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    /**
     * In case the Workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout delete
   */
  export type WorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter which Workout to delete.
     */
    where: WorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Workout deleteMany
   */
  export type WorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutWhereInput
    /**
     * Limit how many Workouts to delete.
     */
    limit?: number
  }

  /**
   * Workout.owner
   */
  export type Workout$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Workout.workoutExercises
   */
  export type Workout$workoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Workout.programWorkouts
   */
  export type Workout$programWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramWorkout
     */
    select?: ProgramWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramWorkout
     */
    omit?: ProgramWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramWorkoutInclude<ExtArgs> | null
    where?: ProgramWorkoutWhereInput
    orderBy?: ProgramWorkoutOrderByWithRelationInput | ProgramWorkoutOrderByWithRelationInput[]
    cursor?: ProgramWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramWorkoutScalarFieldEnum | ProgramWorkoutScalarFieldEnum[]
  }

  /**
   * Workout.userWorkouts
   */
  export type Workout$userWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    cursor?: UserWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
  }

  /**
   * Workout without action
   */
  export type WorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutExercise
   */

  export type AggregateWorkoutExercise = {
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  export type WorkoutExerciseAvgAggregateOutputType = {
    order: number | null
    restTime: number | null
  }

  export type WorkoutExerciseSumAggregateOutputType = {
    order: number | null
    restTime: number | null
  }

  export type WorkoutExerciseMinAggregateOutputType = {
    id: string | null
    order: number | null
    notes: string | null
    hasWarmup: boolean | null
    isBodyWeight: boolean | null
    restTime: number | null
    exerciseId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutExerciseMaxAggregateOutputType = {
    id: string | null
    order: number | null
    notes: string | null
    hasWarmup: boolean | null
    isBodyWeight: boolean | null
    restTime: number | null
    exerciseId: string | null
    workoutId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkoutExerciseCountAggregateOutputType = {
    id: number
    order: number
    notes: number
    hasWarmup: number
    isBodyWeight: number
    restTime: number
    exerciseId: number
    workoutId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkoutExerciseAvgAggregateInputType = {
    order?: true
    restTime?: true
  }

  export type WorkoutExerciseSumAggregateInputType = {
    order?: true
    restTime?: true
  }

  export type WorkoutExerciseMinAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    hasWarmup?: true
    isBodyWeight?: true
    restTime?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutExerciseMaxAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    hasWarmup?: true
    isBodyWeight?: true
    restTime?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkoutExerciseCountAggregateInputType = {
    id?: true
    order?: true
    notes?: true
    hasWarmup?: true
    isBodyWeight?: true
    restTime?: true
    exerciseId?: true
    workoutId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercise to aggregate.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutExercises
    **/
    _count?: true | WorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type GetWorkoutExerciseAggregateType<T extends WorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutExercise[P]>
  }




  export type WorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithAggregationInput | WorkoutExerciseOrderByWithAggregationInput[]
    by: WorkoutExerciseScalarFieldEnum[] | WorkoutExerciseScalarFieldEnum
    having?: WorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutExerciseCountAggregateInputType | true
    _avg?: WorkoutExerciseAvgAggregateInputType
    _sum?: WorkoutExerciseSumAggregateInputType
    _min?: WorkoutExerciseMinAggregateInputType
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type WorkoutExerciseGroupByOutputType = {
    id: string
    order: number
    notes: string | null
    hasWarmup: boolean
    isBodyWeight: boolean
    restTime: number
    exerciseId: string
    workoutId: string
    createdAt: Date
    updatedAt: Date
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutExerciseGroupByPayload<T extends WorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    notes?: boolean
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectScalar = {
    id?: boolean
    order?: boolean
    notes?: boolean
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: boolean
    exerciseId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkoutExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "notes" | "hasWarmup" | "isBodyWeight" | "restTime" | "exerciseId" | "workoutId" | "createdAt" | "updatedAt", ExtArgs["result"]["workoutExercise"]>
  export type WorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>
    _count?: boolean | WorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $WorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutExercise"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
      userWorkoutExercises: Prisma.$UserWorkoutExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      notes: string | null
      hasWarmup: boolean
      isBodyWeight: boolean
      restTime: number
      exerciseId: string
      workoutId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workoutExercise"]>
    composites: {}
  }

  type WorkoutExerciseGetPayload<S extends boolean | null | undefined | WorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutExercisePayload, S>

  type WorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: WorkoutExerciseCountAggregateInputType | true
    }

  export interface WorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutExercise'], meta: { name: 'WorkoutExercise' } }
    /**
     * Find zero or one WorkoutExercise that matches the filter.
     * @param {WorkoutExerciseFindUniqueArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkoutExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany()
     * 
     * // Get first 10 WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkoutExercise.
     * @param {WorkoutExerciseCreateArgs} args - Arguments to create a WorkoutExercise.
     * @example
     * // Create one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.create({
     *   data: {
     *     // ... data to create a WorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutExerciseCreateArgs>(args: SelectSubset<T, WorkoutExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkoutExercises.
     * @param {WorkoutExerciseCreateManyArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutExercises and returns the data saved in the database.
     * @param {WorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkoutExercise.
     * @param {WorkoutExerciseDeleteArgs} args - Arguments to delete one WorkoutExercise.
     * @example
     * // Delete one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutExerciseDeleteArgs>(args: SelectSubset<T, WorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkoutExercise.
     * @param {WorkoutExerciseUpdateArgs} args - Arguments to update one WorkoutExercise.
     * @example
     * // Update one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutExerciseUpdateArgs>(args: SelectSubset<T, WorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkoutExercises.
     * @param {WorkoutExerciseDeleteManyArgs} args - Arguments to filter WorkoutExercises to delete.
     * @example
     * // Delete a few WorkoutExercises
     * const { count } = await prisma.workoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises and returns the data updated in the database.
     * @param {WorkoutExerciseUpdateManyAndReturnArgs} args - Arguments to update many WorkoutExercises.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkoutExercise.
     * @param {WorkoutExerciseUpsertArgs} args - Arguments to update or create a WorkoutExercise.
     * @example
     * // Update or create a WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutExerciseUpsertArgs>(args: SelectSubset<T, WorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseCountArgs} args - Arguments to filter WorkoutExercises to count.
     * @example
     * // Count the number of WorkoutExercises
     * const count = await prisma.workoutExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutExerciseCountArgs>(
      args?: Subset<T, WorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutExerciseAggregateArgs>(args: Subset<T, WorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutExerciseAggregateType<T>>

    /**
     * Group by WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutExercise model
   */
  readonly fields: WorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkoutExercises<T extends WorkoutExercise$userWorkoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExercise$userWorkoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutExercise model
   */
  interface WorkoutExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutExercise", 'String'>
    readonly order: FieldRef<"WorkoutExercise", 'Int'>
    readonly notes: FieldRef<"WorkoutExercise", 'String'>
    readonly hasWarmup: FieldRef<"WorkoutExercise", 'Boolean'>
    readonly isBodyWeight: FieldRef<"WorkoutExercise", 'Boolean'>
    readonly restTime: FieldRef<"WorkoutExercise", 'Int'>
    readonly exerciseId: FieldRef<"WorkoutExercise", 'String'>
    readonly workoutId: FieldRef<"WorkoutExercise", 'String'>
    readonly createdAt: FieldRef<"WorkoutExercise", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkoutExercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutExercise findUnique
   */
  export type WorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise findUniqueOrThrow
   */
  export type WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise findFirst
   */
  export type WorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise findFirstOrThrow
   */
  export type WorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise findMany
   */
  export type WorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercises to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise create
   */
  export type WorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise createMany
   */
  export type WorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutExercise createManyAndReturn
   */
  export type WorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise update
   */
  export type WorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutExercise to update.
     */
    where: WorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise updateMany
   */
  export type WorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to update.
     */
    limit?: number
  }

  /**
   * WorkoutExercise updateManyAndReturn
   */
  export type WorkoutExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise upsert
   */
  export type WorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutExercise to update in case it exists.
     */
    where: WorkoutExerciseWhereUniqueInput
    /**
     * In case the WorkoutExercise found by the `where` argument doesn't exist, create a new WorkoutExercise with this data.
     */
    create: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise delete
   */
  export type WorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutExercise to delete.
     */
    where: WorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * WorkoutExercise deleteMany
   */
  export type WorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercises to delete
     */
    where?: WorkoutExerciseWhereInput
    /**
     * Limit how many WorkoutExercises to delete.
     */
    limit?: number
  }

  /**
   * WorkoutExercise.userWorkoutExercises
   */
  export type WorkoutExercise$userWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    cursor?: UserWorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise without action
   */
  export type WorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutExercise
     */
    omit?: WorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model UserWorkoutExercise
   */

  export type AggregateUserWorkoutExercise = {
    _count: UserWorkoutExerciseCountAggregateOutputType | null
    _min: UserWorkoutExerciseMinAggregateOutputType | null
    _max: UserWorkoutExerciseMaxAggregateOutputType | null
  }

  export type UserWorkoutExerciseMinAggregateOutputType = {
    id: string | null
    skippedReason: string | null
    workoutExerciseId: string | null
    userWorkoutId: string | null
  }

  export type UserWorkoutExerciseMaxAggregateOutputType = {
    id: string | null
    skippedReason: string | null
    workoutExerciseId: string | null
    userWorkoutId: string | null
  }

  export type UserWorkoutExerciseCountAggregateOutputType = {
    id: number
    skippedReason: number
    workoutExerciseId: number
    userWorkoutId: number
    _all: number
  }


  export type UserWorkoutExerciseMinAggregateInputType = {
    id?: true
    skippedReason?: true
    workoutExerciseId?: true
    userWorkoutId?: true
  }

  export type UserWorkoutExerciseMaxAggregateInputType = {
    id?: true
    skippedReason?: true
    workoutExerciseId?: true
    userWorkoutId?: true
  }

  export type UserWorkoutExerciseCountAggregateInputType = {
    id?: true
    skippedReason?: true
    workoutExerciseId?: true
    userWorkoutId?: true
    _all?: true
  }

  export type UserWorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkoutExercise to aggregate.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWorkoutExercises
    **/
    _count?: true | UserWorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserWorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserWorkoutExerciseMaxAggregateInputType
  }

  export type GetUserWorkoutExerciseAggregateType<T extends UserWorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateUserWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateUserWorkoutExercise[P]>
  }




  export type UserWorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithAggregationInput | UserWorkoutExerciseOrderByWithAggregationInput[]
    by: UserWorkoutExerciseScalarFieldEnum[] | UserWorkoutExerciseScalarFieldEnum
    having?: UserWorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserWorkoutExerciseCountAggregateInputType | true
    _min?: UserWorkoutExerciseMinAggregateInputType
    _max?: UserWorkoutExerciseMaxAggregateInputType
  }

  export type UserWorkoutExerciseGroupByOutputType = {
    id: string
    skippedReason: string | null
    workoutExerciseId: string
    userWorkoutId: string
    _count: UserWorkoutExerciseCountAggregateOutputType | null
    _min: UserWorkoutExerciseMinAggregateOutputType | null
    _max: UserWorkoutExerciseMaxAggregateOutputType | null
  }

  type GetUserWorkoutExerciseGroupByPayload<T extends UserWorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserWorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserWorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserWorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], UserWorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type UserWorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skippedReason?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
    userStrengthSets?: boolean | UserWorkoutExercise$userStrengthSetsArgs<ExtArgs>
    userCardioSets?: boolean | UserWorkoutExercise$userCardioSetsArgs<ExtArgs>
    _count?: boolean | UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skippedReason?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skippedReason?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkoutExercise"]>

  export type UserWorkoutExerciseSelectScalar = {
    id?: boolean
    skippedReason?: boolean
    workoutExerciseId?: boolean
    userWorkoutId?: boolean
  }

  export type UserWorkoutExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skippedReason" | "workoutExerciseId" | "userWorkoutId", ExtArgs["result"]["userWorkoutExercise"]>
  export type UserWorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
    userStrengthSets?: boolean | UserWorkoutExercise$userStrengthSetsArgs<ExtArgs>
    userCardioSets?: boolean | UserWorkoutExercise$userCardioSetsArgs<ExtArgs>
    _count?: boolean | UserWorkoutExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserWorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }
  export type UserWorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutExercise?: boolean | WorkoutExerciseDefaultArgs<ExtArgs>
    userWorkout?: boolean | UserWorkoutDefaultArgs<ExtArgs>
  }

  export type $UserWorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserWorkoutExercise"
    objects: {
      workoutExercise: Prisma.$WorkoutExercisePayload<ExtArgs>
      userWorkout: Prisma.$UserWorkoutPayload<ExtArgs>
      userStrengthSets: Prisma.$UserStrengthSetPayload<ExtArgs>[]
      userCardioSets: Prisma.$UserCardioSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skippedReason: string | null
      workoutExerciseId: string
      userWorkoutId: string
    }, ExtArgs["result"]["userWorkoutExercise"]>
    composites: {}
  }

  type UserWorkoutExerciseGetPayload<S extends boolean | null | undefined | UserWorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$UserWorkoutExercisePayload, S>

  type UserWorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserWorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserWorkoutExerciseCountAggregateInputType | true
    }

  export interface UserWorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWorkoutExercise'], meta: { name: 'UserWorkoutExercise' } }
    /**
     * Find zero or one UserWorkoutExercise that matches the filter.
     * @param {UserWorkoutExerciseFindUniqueArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserWorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, UserWorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserWorkoutExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserWorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserWorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindFirstArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserWorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a UserWorkoutExercise
     * @example
     * // Get one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserWorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserWorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWorkoutExercises
     * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany()
     * 
     * // Get first 10 UserWorkoutExercises
     * const userWorkoutExercises = await prisma.userWorkoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserWorkoutExerciseFindManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserWorkoutExercise.
     * @param {UserWorkoutExerciseCreateArgs} args - Arguments to create a UserWorkoutExercise.
     * @example
     * // Create one UserWorkoutExercise
     * const UserWorkoutExercise = await prisma.userWorkoutExercise.create({
     *   data: {
     *     // ... data to create a UserWorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends UserWorkoutExerciseCreateArgs>(args: SelectSubset<T, UserWorkoutExerciseCreateArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserWorkoutExercises.
     * @param {UserWorkoutExerciseCreateManyArgs} args - Arguments to create many UserWorkoutExercises.
     * @example
     * // Create many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserWorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserWorkoutExercises and returns the data saved in the database.
     * @param {UserWorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many UserWorkoutExercises.
     * @example
     * // Create many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserWorkoutExercises and only return the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserWorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserWorkoutExercise.
     * @param {UserWorkoutExerciseDeleteArgs} args - Arguments to delete one UserWorkoutExercise.
     * @example
     * // Delete one UserWorkoutExercise
     * const UserWorkoutExercise = await prisma.userWorkoutExercise.delete({
     *   where: {
     *     // ... filter to delete one UserWorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends UserWorkoutExerciseDeleteArgs>(args: SelectSubset<T, UserWorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserWorkoutExercise.
     * @param {UserWorkoutExerciseUpdateArgs} args - Arguments to update one UserWorkoutExercise.
     * @example
     * // Update one UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserWorkoutExerciseUpdateArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserWorkoutExercises.
     * @param {UserWorkoutExerciseDeleteManyArgs} args - Arguments to filter UserWorkoutExercises to delete.
     * @example
     * // Delete a few UserWorkoutExercises
     * const { count } = await prisma.userWorkoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserWorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, UserWorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserWorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkoutExercises and returns the data updated in the database.
     * @param {UserWorkoutExerciseUpdateManyAndReturnArgs} args - Arguments to update many UserWorkoutExercises.
     * @example
     * // Update many UserWorkoutExercises
     * const userWorkoutExercise = await prisma.userWorkoutExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserWorkoutExercises and only return the `id`
     * const userWorkoutExerciseWithIdOnly = await prisma.userWorkoutExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserWorkoutExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserWorkoutExercise.
     * @param {UserWorkoutExerciseUpsertArgs} args - Arguments to update or create a UserWorkoutExercise.
     * @example
     * // Update or create a UserWorkoutExercise
     * const userWorkoutExercise = await prisma.userWorkoutExercise.upsert({
     *   create: {
     *     // ... data to create a UserWorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends UserWorkoutExerciseUpsertArgs>(args: SelectSubset<T, UserWorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__UserWorkoutExerciseClient<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserWorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseCountArgs} args - Arguments to filter UserWorkoutExercises to count.
     * @example
     * // Count the number of UserWorkoutExercises
     * const count = await prisma.userWorkoutExercise.count({
     *   where: {
     *     // ... the filter for the UserWorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends UserWorkoutExerciseCountArgs>(
      args?: Subset<T, UserWorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWorkoutExerciseAggregateArgs>(args: Subset<T, UserWorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetUserWorkoutExerciseAggregateType<T>>

    /**
     * Group by UserWorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserWorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserWorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: UserWorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserWorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserWorkoutExercise model
   */
  readonly fields: UserWorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserWorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutExercise<T extends WorkoutExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutExerciseDefaultArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkout<T extends UserWorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutDefaultArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userStrengthSets<T extends UserWorkoutExercise$userStrengthSetsArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExercise$userStrengthSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStrengthSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userCardioSets<T extends UserWorkoutExercise$userCardioSetsArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkoutExercise$userCardioSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardioSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserWorkoutExercise model
   */
  interface UserWorkoutExerciseFieldRefs {
    readonly id: FieldRef<"UserWorkoutExercise", 'String'>
    readonly skippedReason: FieldRef<"UserWorkoutExercise", 'String'>
    readonly workoutExerciseId: FieldRef<"UserWorkoutExercise", 'String'>
    readonly userWorkoutId: FieldRef<"UserWorkoutExercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserWorkoutExercise findUnique
   */
  export type UserWorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise findUniqueOrThrow
   */
  export type UserWorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise findFirst
   */
  export type UserWorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkoutExercises.
     */
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise findFirstOrThrow
   */
  export type UserWorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercise to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkoutExercises.
     */
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise findMany
   */
  export type UserWorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkoutExercises to fetch.
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkoutExercises to fetch.
     */
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWorkoutExercises.
     */
    cursor?: UserWorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkoutExercises.
     */
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise create
   */
  export type UserWorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a UserWorkoutExercise.
     */
    data: XOR<UserWorkoutExerciseCreateInput, UserWorkoutExerciseUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise createMany
   */
  export type UserWorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserWorkoutExercises.
     */
    data: UserWorkoutExerciseCreateManyInput | UserWorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserWorkoutExercise createManyAndReturn
   */
  export type UserWorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many UserWorkoutExercises.
     */
    data: UserWorkoutExerciseCreateManyInput | UserWorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkoutExercise update
   */
  export type UserWorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a UserWorkoutExercise.
     */
    data: XOR<UserWorkoutExerciseUpdateInput, UserWorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which UserWorkoutExercise to update.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise updateMany
   */
  export type UserWorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserWorkoutExercises.
     */
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkoutExercises to update
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to update.
     */
    limit?: number
  }

  /**
   * UserWorkoutExercise updateManyAndReturn
   */
  export type UserWorkoutExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * The data used to update UserWorkoutExercises.
     */
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkoutExercises to update
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkoutExercise upsert
   */
  export type UserWorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the UserWorkoutExercise to update in case it exists.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    /**
     * In case the UserWorkoutExercise found by the `where` argument doesn't exist, create a new UserWorkoutExercise with this data.
     */
    create: XOR<UserWorkoutExerciseCreateInput, UserWorkoutExerciseUncheckedCreateInput>
    /**
     * In case the UserWorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserWorkoutExerciseUpdateInput, UserWorkoutExerciseUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise delete
   */
  export type UserWorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which UserWorkoutExercise to delete.
     */
    where: UserWorkoutExerciseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkoutExercise deleteMany
   */
  export type UserWorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkoutExercises to delete
     */
    where?: UserWorkoutExerciseWhereInput
    /**
     * Limit how many UserWorkoutExercises to delete.
     */
    limit?: number
  }

  /**
   * UserWorkoutExercise.userStrengthSets
   */
  export type UserWorkoutExercise$userStrengthSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStrengthSet
     */
    select?: UserStrengthSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStrengthSet
     */
    omit?: UserStrengthSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStrengthSetInclude<ExtArgs> | null
    where?: UserStrengthSetWhereInput
    orderBy?: UserStrengthSetOrderByWithRelationInput | UserStrengthSetOrderByWithRelationInput[]
    cursor?: UserStrengthSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStrengthSetScalarFieldEnum | UserStrengthSetScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise.userCardioSets
   */
  export type UserWorkoutExercise$userCardioSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardioSet
     */
    select?: UserCardioSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCardioSet
     */
    omit?: UserCardioSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardioSetInclude<ExtArgs> | null
    where?: UserCardioSetWhereInput
    orderBy?: UserCardioSetOrderByWithRelationInput | UserCardioSetOrderByWithRelationInput[]
    cursor?: UserCardioSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardioSetScalarFieldEnum | UserCardioSetScalarFieldEnum[]
  }

  /**
   * UserWorkoutExercise without action
   */
  export type UserWorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model UserWorkout
   */

  export type AggregateUserWorkout = {
    _count: UserWorkoutCountAggregateOutputType | null
    _min: UserWorkoutMinAggregateOutputType | null
    _max: UserWorkoutMaxAggregateOutputType | null
  }

  export type UserWorkoutMinAggregateOutputType = {
    id: string | null
    dateCompleted: Date | null
    ownerId: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type UserWorkoutMaxAggregateOutputType = {
    id: string | null
    dateCompleted: Date | null
    ownerId: string | null
    programId: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type UserWorkoutCountAggregateOutputType = {
    id: number
    dateCompleted: number
    ownerId: number
    programId: number
    workoutId: number
    createdAt: number
    _all: number
  }


  export type UserWorkoutMinAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
  }

  export type UserWorkoutMaxAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
  }

  export type UserWorkoutCountAggregateInputType = {
    id?: true
    dateCompleted?: true
    ownerId?: true
    programId?: true
    workoutId?: true
    createdAt?: true
    _all?: true
  }

  export type UserWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkout to aggregate.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWorkouts
    **/
    _count?: true | UserWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserWorkoutMaxAggregateInputType
  }

  export type GetUserWorkoutAggregateType<T extends UserWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateUserWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWorkout[P]>
      : GetScalarType<T[P], AggregateUserWorkout[P]>
  }




  export type UserWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWorkoutWhereInput
    orderBy?: UserWorkoutOrderByWithAggregationInput | UserWorkoutOrderByWithAggregationInput[]
    by: UserWorkoutScalarFieldEnum[] | UserWorkoutScalarFieldEnum
    having?: UserWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserWorkoutCountAggregateInputType | true
    _min?: UserWorkoutMinAggregateInputType
    _max?: UserWorkoutMaxAggregateInputType
  }

  export type UserWorkoutGroupByOutputType = {
    id: string
    dateCompleted: Date | null
    ownerId: string
    programId: string | null
    workoutId: string | null
    createdAt: Date
    _count: UserWorkoutCountAggregateOutputType | null
    _min: UserWorkoutMinAggregateOutputType | null
    _max: UserWorkoutMaxAggregateOutputType | null
  }

  type GetUserWorkoutGroupByPayload<T extends UserWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], UserWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type UserWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | UserWorkout$userWorkoutExercisesArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
    _count?: boolean | UserWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }, ExtArgs["result"]["userWorkout"]>

  export type UserWorkoutSelectScalar = {
    id?: boolean
    dateCompleted?: boolean
    ownerId?: boolean
    programId?: boolean
    workoutId?: boolean
    createdAt?: boolean
  }

  export type UserWorkoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dateCompleted" | "ownerId" | "programId" | "workoutId" | "createdAt", ExtArgs["result"]["userWorkout"]>
  export type UserWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    userWorkoutExercises?: boolean | UserWorkout$userWorkoutExercisesArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
    _count?: boolean | UserWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserWorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }
  export type UserWorkoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | UserWorkout$programArgs<ExtArgs>
    workout?: boolean | UserWorkout$workoutArgs<ExtArgs>
  }

  export type $UserWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserWorkout"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      userWorkoutExercises: Prisma.$UserWorkoutExercisePayload<ExtArgs>[]
      program: Prisma.$ProgramPayload<ExtArgs> | null
      workout: Prisma.$WorkoutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dateCompleted: Date | null
      ownerId: string
      programId: string | null
      workoutId: string | null
      createdAt: Date
    }, ExtArgs["result"]["userWorkout"]>
    composites: {}
  }

  type UserWorkoutGetPayload<S extends boolean | null | undefined | UserWorkoutDefaultArgs> = $Result.GetResult<Prisma.$UserWorkoutPayload, S>

  type UserWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserWorkoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserWorkoutCountAggregateInputType | true
    }

  export interface UserWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWorkout'], meta: { name: 'UserWorkout' } }
    /**
     * Find zero or one UserWorkout that matches the filter.
     * @param {UserWorkoutFindUniqueArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserWorkoutFindUniqueArgs>(args: SelectSubset<T, UserWorkoutFindUniqueArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserWorkout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserWorkoutFindUniqueOrThrowArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserWorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, UserWorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindFirstArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserWorkoutFindFirstArgs>(args?: SelectSubset<T, UserWorkoutFindFirstArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindFirstOrThrowArgs} args - Arguments to find a UserWorkout
     * @example
     * // Get one UserWorkout
     * const userWorkout = await prisma.userWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserWorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, UserWorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWorkouts
     * const userWorkouts = await prisma.userWorkout.findMany()
     * 
     * // Get first 10 UserWorkouts
     * const userWorkouts = await prisma.userWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserWorkoutFindManyArgs>(args?: SelectSubset<T, UserWorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserWorkout.
     * @param {UserWorkoutCreateArgs} args - Arguments to create a UserWorkout.
     * @example
     * // Create one UserWorkout
     * const UserWorkout = await prisma.userWorkout.create({
     *   data: {
     *     // ... data to create a UserWorkout
     *   }
     * })
     * 
     */
    create<T extends UserWorkoutCreateArgs>(args: SelectSubset<T, UserWorkoutCreateArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserWorkouts.
     * @param {UserWorkoutCreateManyArgs} args - Arguments to create many UserWorkouts.
     * @example
     * // Create many UserWorkouts
     * const userWorkout = await prisma.userWorkout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserWorkoutCreateManyArgs>(args?: SelectSubset<T, UserWorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserWorkouts and returns the data saved in the database.
     * @param {UserWorkoutCreateManyAndReturnArgs} args - Arguments to create many UserWorkouts.
     * @example
     * // Create many UserWorkouts
     * const userWorkout = await prisma.userWorkout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserWorkouts and only return the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserWorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, UserWorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserWorkout.
     * @param {UserWorkoutDeleteArgs} args - Arguments to delete one UserWorkout.
     * @example
     * // Delete one UserWorkout
     * const UserWorkout = await prisma.userWorkout.delete({
     *   where: {
     *     // ... filter to delete one UserWorkout
     *   }
     * })
     * 
     */
    delete<T extends UserWorkoutDeleteArgs>(args: SelectSubset<T, UserWorkoutDeleteArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserWorkout.
     * @param {UserWorkoutUpdateArgs} args - Arguments to update one UserWorkout.
     * @example
     * // Update one UserWorkout
     * const userWorkout = await prisma.userWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserWorkoutUpdateArgs>(args: SelectSubset<T, UserWorkoutUpdateArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserWorkouts.
     * @param {UserWorkoutDeleteManyArgs} args - Arguments to filter UserWorkouts to delete.
     * @example
     * // Delete a few UserWorkouts
     * const { count } = await prisma.userWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserWorkoutDeleteManyArgs>(args?: SelectSubset<T, UserWorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWorkouts
     * const userWorkout = await prisma.userWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserWorkoutUpdateManyArgs>(args: SelectSubset<T, UserWorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWorkouts and returns the data updated in the database.
     * @param {UserWorkoutUpdateManyAndReturnArgs} args - Arguments to update many UserWorkouts.
     * @example
     * // Update many UserWorkouts
     * const userWorkout = await prisma.userWorkout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserWorkouts and only return the `id`
     * const userWorkoutWithIdOnly = await prisma.userWorkout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserWorkoutUpdateManyAndReturnArgs>(args: SelectSubset<T, UserWorkoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserWorkout.
     * @param {UserWorkoutUpsertArgs} args - Arguments to update or create a UserWorkout.
     * @example
     * // Update or create a UserWorkout
     * const userWorkout = await prisma.userWorkout.upsert({
     *   create: {
     *     // ... data to create a UserWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWorkout we want to update
     *   }
     * })
     */
    upsert<T extends UserWorkoutUpsertArgs>(args: SelectSubset<T, UserWorkoutUpsertArgs<ExtArgs>>): Prisma__UserWorkoutClient<$Result.GetResult<Prisma.$UserWorkoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutCountArgs} args - Arguments to filter UserWorkouts to count.
     * @example
     * // Count the number of UserWorkouts
     * const count = await prisma.userWorkout.count({
     *   where: {
     *     // ... the filter for the UserWorkouts we want to count
     *   }
     * })
    **/
    count<T extends UserWorkoutCountArgs>(
      args?: Subset<T, UserWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWorkoutAggregateArgs>(args: Subset<T, UserWorkoutAggregateArgs>): Prisma.PrismaPromise<GetUserWorkoutAggregateType<T>>

    /**
     * Group by UserWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: UserWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserWorkout model
   */
  readonly fields: UserWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userWorkoutExercises<T extends UserWorkout$userWorkoutExercisesArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$userWorkoutExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWorkoutExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    program<T extends UserWorkout$programArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$programArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workout<T extends UserWorkout$workoutArgs<ExtArgs> = {}>(args?: Subset<T, UserWorkout$workoutArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserWorkout model
   */
  interface UserWorkoutFieldRefs {
    readonly id: FieldRef<"UserWorkout", 'String'>
    readonly dateCompleted: FieldRef<"UserWorkout", 'DateTime'>
    readonly ownerId: FieldRef<"UserWorkout", 'String'>
    readonly programId: FieldRef<"UserWorkout", 'String'>
    readonly workoutId: FieldRef<"UserWorkout", 'String'>
    readonly createdAt: FieldRef<"UserWorkout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserWorkout findUnique
   */
  export type UserWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where: UserWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout findUniqueOrThrow
   */
  export type UserWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where: UserWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout findFirst
   */
  export type UserWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkouts.
     */
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout findFirstOrThrow
   */
  export type UserWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkout to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWorkouts.
     */
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout findMany
   */
  export type UserWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which UserWorkouts to fetch.
     */
    where?: UserWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWorkouts to fetch.
     */
    orderBy?: UserWorkoutOrderByWithRelationInput | UserWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWorkouts.
     */
    cursor?: UserWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWorkouts.
     */
    skip?: number
    distinct?: UserWorkoutScalarFieldEnum | UserWorkoutScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout create
   */
  export type UserWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a UserWorkout.
     */
    data: XOR<UserWorkoutCreateInput, UserWorkoutUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout createMany
   */
  export type UserWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserWorkouts.
     */
    data: UserWorkoutCreateManyInput | UserWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserWorkout createManyAndReturn
   */
  export type UserWorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * The data used to create many UserWorkouts.
     */
    data: UserWorkoutCreateManyInput | UserWorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkout update
   */
  export type UserWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a UserWorkout.
     */
    data: XOR<UserWorkoutUpdateInput, UserWorkoutUncheckedUpdateInput>
    /**
     * Choose, which UserWorkout to update.
     */
    where: UserWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout updateMany
   */
  export type UserWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserWorkouts.
     */
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkouts to update
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to update.
     */
    limit?: number
  }

  /**
   * UserWorkout updateManyAndReturn
   */
  export type UserWorkoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * The data used to update UserWorkouts.
     */
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which UserWorkouts to update
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWorkout upsert
   */
  export type UserWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the UserWorkout to update in case it exists.
     */
    where: UserWorkoutWhereUniqueInput
    /**
     * In case the UserWorkout found by the `where` argument doesn't exist, create a new UserWorkout with this data.
     */
    create: XOR<UserWorkoutCreateInput, UserWorkoutUncheckedCreateInput>
    /**
     * In case the UserWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserWorkoutUpdateInput, UserWorkoutUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout delete
   */
  export type UserWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
    /**
     * Filter which UserWorkout to delete.
     */
    where: UserWorkoutWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserWorkout deleteMany
   */
  export type UserWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWorkouts to delete
     */
    where?: UserWorkoutWhereInput
    /**
     * Limit how many UserWorkouts to delete.
     */
    limit?: number
  }

  /**
   * UserWorkout.userWorkoutExercises
   */
  export type UserWorkout$userWorkoutExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkoutExercise
     */
    select?: UserWorkoutExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkoutExercise
     */
    omit?: UserWorkoutExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutExerciseInclude<ExtArgs> | null
    where?: UserWorkoutExerciseWhereInput
    orderBy?: UserWorkoutExerciseOrderByWithRelationInput | UserWorkoutExerciseOrderByWithRelationInput[]
    cursor?: UserWorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWorkoutExerciseScalarFieldEnum | UserWorkoutExerciseScalarFieldEnum[]
  }

  /**
   * UserWorkout.program
   */
  export type UserWorkout$programArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
  }

  /**
   * UserWorkout.workout
   */
  export type UserWorkout$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workout
     */
    omit?: WorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
  }

  /**
   * UserWorkout without action
   */
  export type UserWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWorkout
     */
    select?: UserWorkoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserWorkout
     */
    omit?: UserWorkoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWorkoutInclude<ExtArgs> | null
  }


  /**
   * Model FoodItem
   */

  export type AggregateFoodItem = {
    _count: FoodItemCountAggregateOutputType | null
    _avg: FoodItemAvgAggregateOutputType | null
    _sum: FoodItemSumAggregateOutputType | null
    _min: FoodItemMinAggregateOutputType | null
    _max: FoodItemMaxAggregateOutputType | null
  }

  export type FoodItemAvgAggregateOutputType = {
    servingSize: number | null
    calories: number | null
    proteins: number | null
    carbohydrates: number | null
    sugars: number | null
    fat: number | null
    saturatedFat: number | null
    fiber: number | null
    salt: number | null
    cholesterol: number | null
  }

  export type FoodItemSumAggregateOutputType = {
    servingSize: number | null
    calories: number | null
    proteins: number | null
    carbohydrates: number | null
    sugars: number | null
    fat: number | null
    saturatedFat: number | null
    fiber: number | null
    salt: number | null
    cholesterol: number | null
  }

  export type FoodItemMinAggregateOutputType = {
    id: string | null
    barcode: string | null
    name: string | null
    servingSize: number | null
    calories: number | null
    proteins: number | null
    carbohydrates: number | null
    sugars: number | null
    fat: number | null
    saturatedFat: number | null
    fiber: number | null
    salt: number | null
    cholesterol: number | null
    brandId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemMaxAggregateOutputType = {
    id: string | null
    barcode: string | null
    name: string | null
    servingSize: number | null
    calories: number | null
    proteins: number | null
    carbohydrates: number | null
    sugars: number | null
    fat: number | null
    saturatedFat: number | null
    fiber: number | null
    salt: number | null
    cholesterol: number | null
    brandId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemCountAggregateOutputType = {
    id: number
    barcode: number
    name: number
    servingSize: number
    calories: number
    proteins: number
    carbohydrates: number
    sugars: number
    fat: number
    saturatedFat: number
    fiber: number
    salt: number
    cholesterol: number
    brandId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodItemAvgAggregateInputType = {
    servingSize?: true
    calories?: true
    proteins?: true
    carbohydrates?: true
    sugars?: true
    fat?: true
    saturatedFat?: true
    fiber?: true
    salt?: true
    cholesterol?: true
  }

  export type FoodItemSumAggregateInputType = {
    servingSize?: true
    calories?: true
    proteins?: true
    carbohydrates?: true
    sugars?: true
    fat?: true
    saturatedFat?: true
    fiber?: true
    salt?: true
    cholesterol?: true
  }

  export type FoodItemMinAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    servingSize?: true
    calories?: true
    proteins?: true
    carbohydrates?: true
    sugars?: true
    fat?: true
    saturatedFat?: true
    fiber?: true
    salt?: true
    cholesterol?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemMaxAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    servingSize?: true
    calories?: true
    proteins?: true
    carbohydrates?: true
    sugars?: true
    fat?: true
    saturatedFat?: true
    fiber?: true
    salt?: true
    cholesterol?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemCountAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    servingSize?: true
    calories?: true
    proteins?: true
    carbohydrates?: true
    sugars?: true
    fat?: true
    saturatedFat?: true
    fiber?: true
    salt?: true
    cholesterol?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItem to aggregate.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItems
    **/
    _count?: true | FoodItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemMaxAggregateInputType
  }

  export type GetFoodItemAggregateType<T extends FoodItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItem[P]>
      : GetScalarType<T[P], AggregateFoodItem[P]>
  }




  export type FoodItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithAggregationInput | FoodItemOrderByWithAggregationInput[]
    by: FoodItemScalarFieldEnum[] | FoodItemScalarFieldEnum
    having?: FoodItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemCountAggregateInputType | true
    _avg?: FoodItemAvgAggregateInputType
    _sum?: FoodItemSumAggregateInputType
    _min?: FoodItemMinAggregateInputType
    _max?: FoodItemMaxAggregateInputType
  }

  export type FoodItemGroupByOutputType = {
    id: string
    barcode: string
    name: string
    servingSize: number | null
    calories: number | null
    proteins: number | null
    carbohydrates: number | null
    sugars: number | null
    fat: number | null
    saturatedFat: number | null
    fiber: number | null
    salt: number | null
    cholesterol: number | null
    brandId: string | null
    createdAt: Date
    updatedAt: Date
    _count: FoodItemCountAggregateOutputType | null
    _avg: FoodItemAvgAggregateOutputType | null
    _sum: FoodItemSumAggregateOutputType | null
    _min: FoodItemMinAggregateOutputType | null
    _max: FoodItemMaxAggregateOutputType | null
  }

  type GetFoodItemGroupByPayload<T extends FoodItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    name?: boolean
    servingSize?: boolean
    calories?: boolean
    proteins?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    fat?: boolean
    saturatedFat?: boolean
    fiber?: boolean
    salt?: boolean
    cholesterol?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
    categories?: boolean | FoodItem$categoriesArgs<ExtArgs>
    labels?: boolean | FoodItem$labelsArgs<ExtArgs>
    mealFoodItem?: boolean | FoodItem$mealFoodItemArgs<ExtArgs>
    images?: boolean | FoodItem$imagesArgs<ExtArgs>
    _count?: boolean | FoodItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItem"]>

  export type FoodItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    name?: boolean
    servingSize?: boolean
    calories?: boolean
    proteins?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    fat?: boolean
    saturatedFat?: boolean
    fiber?: boolean
    salt?: boolean
    cholesterol?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
  }, ExtArgs["result"]["foodItem"]>

  export type FoodItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    name?: boolean
    servingSize?: boolean
    calories?: boolean
    proteins?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    fat?: boolean
    saturatedFat?: boolean
    fiber?: boolean
    salt?: boolean
    cholesterol?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
  }, ExtArgs["result"]["foodItem"]>

  export type FoodItemSelectScalar = {
    id?: boolean
    barcode?: boolean
    name?: boolean
    servingSize?: boolean
    calories?: boolean
    proteins?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    fat?: boolean
    saturatedFat?: boolean
    fiber?: boolean
    salt?: boolean
    cholesterol?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "barcode" | "name" | "servingSize" | "calories" | "proteins" | "carbohydrates" | "sugars" | "fat" | "saturatedFat" | "fiber" | "salt" | "cholesterol" | "brandId" | "createdAt" | "updatedAt", ExtArgs["result"]["foodItem"]>
  export type FoodItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
    categories?: boolean | FoodItem$categoriesArgs<ExtArgs>
    labels?: boolean | FoodItem$labelsArgs<ExtArgs>
    mealFoodItem?: boolean | FoodItem$mealFoodItemArgs<ExtArgs>
    images?: boolean | FoodItem$imagesArgs<ExtArgs>
    _count?: boolean | FoodItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
  }
  export type FoodItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | FoodItem$brandArgs<ExtArgs>
  }

  export type $FoodItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItem"
    objects: {
      brand: Prisma.$FoodItemBrandPayload<ExtArgs> | null
      categories: Prisma.$FoodItemCategoryPayload<ExtArgs>[]
      labels: Prisma.$FoodItemLabelPayload<ExtArgs>[]
      mealFoodItem: Prisma.$MealFoodItemPayload<ExtArgs>[]
      images: Prisma.$FoodItemImgPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      barcode: string
      name: string
      servingSize: number | null
      calories: number | null
      proteins: number | null
      carbohydrates: number | null
      sugars: number | null
      fat: number | null
      saturatedFat: number | null
      fiber: number | null
      salt: number | null
      cholesterol: number | null
      brandId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foodItem"]>
    composites: {}
  }

  type FoodItemGetPayload<S extends boolean | null | undefined | FoodItemDefaultArgs> = $Result.GetResult<Prisma.$FoodItemPayload, S>

  type FoodItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FoodItemCountAggregateInputType | true
    }

  export interface FoodItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItem'], meta: { name: 'FoodItem' } }
    /**
     * Find zero or one FoodItem that matches the filter.
     * @param {FoodItemFindUniqueArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemFindUniqueArgs>(args: SelectSubset<T, FoodItemFindUniqueArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodItemFindUniqueOrThrowArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindFirstArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemFindFirstArgs>(args?: SelectSubset<T, FoodItemFindFirstArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindFirstOrThrowArgs} args - Arguments to find a FoodItem
     * @example
     * // Get one FoodItem
     * const foodItem = await prisma.foodItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItems
     * const foodItems = await prisma.foodItem.findMany()
     * 
     * // Get first 10 FoodItems
     * const foodItems = await prisma.foodItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemWithIdOnly = await prisma.foodItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemFindManyArgs>(args?: SelectSubset<T, FoodItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodItem.
     * @param {FoodItemCreateArgs} args - Arguments to create a FoodItem.
     * @example
     * // Create one FoodItem
     * const FoodItem = await prisma.foodItem.create({
     *   data: {
     *     // ... data to create a FoodItem
     *   }
     * })
     * 
     */
    create<T extends FoodItemCreateArgs>(args: SelectSubset<T, FoodItemCreateArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodItems.
     * @param {FoodItemCreateManyArgs} args - Arguments to create many FoodItems.
     * @example
     * // Create many FoodItems
     * const foodItem = await prisma.foodItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemCreateManyArgs>(args?: SelectSubset<T, FoodItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItems and returns the data saved in the database.
     * @param {FoodItemCreateManyAndReturnArgs} args - Arguments to create many FoodItems.
     * @example
     * // Create many FoodItems
     * const foodItem = await prisma.foodItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItems and only return the `id`
     * const foodItemWithIdOnly = await prisma.foodItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodItem.
     * @param {FoodItemDeleteArgs} args - Arguments to delete one FoodItem.
     * @example
     * // Delete one FoodItem
     * const FoodItem = await prisma.foodItem.delete({
     *   where: {
     *     // ... filter to delete one FoodItem
     *   }
     * })
     * 
     */
    delete<T extends FoodItemDeleteArgs>(args: SelectSubset<T, FoodItemDeleteArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodItem.
     * @param {FoodItemUpdateArgs} args - Arguments to update one FoodItem.
     * @example
     * // Update one FoodItem
     * const foodItem = await prisma.foodItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemUpdateArgs>(args: SelectSubset<T, FoodItemUpdateArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodItems.
     * @param {FoodItemDeleteManyArgs} args - Arguments to filter FoodItems to delete.
     * @example
     * // Delete a few FoodItems
     * const { count } = await prisma.foodItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemDeleteManyArgs>(args?: SelectSubset<T, FoodItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItems
     * const foodItem = await prisma.foodItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemUpdateManyArgs>(args: SelectSubset<T, FoodItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItems and returns the data updated in the database.
     * @param {FoodItemUpdateManyAndReturnArgs} args - Arguments to update many FoodItems.
     * @example
     * // Update many FoodItems
     * const foodItem = await prisma.foodItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodItems and only return the `id`
     * const foodItemWithIdOnly = await prisma.foodItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodItemUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodItem.
     * @param {FoodItemUpsertArgs} args - Arguments to update or create a FoodItem.
     * @example
     * // Update or create a FoodItem
     * const foodItem = await prisma.foodItem.upsert({
     *   create: {
     *     // ... data to create a FoodItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItem we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemUpsertArgs>(args: SelectSubset<T, FoodItemUpsertArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCountArgs} args - Arguments to filter FoodItems to count.
     * @example
     * // Count the number of FoodItems
     * const count = await prisma.foodItem.count({
     *   where: {
     *     // ... the filter for the FoodItems we want to count
     *   }
     * })
    **/
    count<T extends FoodItemCountArgs>(
      args?: Subset<T, FoodItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemAggregateArgs>(args: Subset<T, FoodItemAggregateArgs>): Prisma.PrismaPromise<GetFoodItemAggregateType<T>>

    /**
     * Group by FoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItem model
   */
  readonly fields: FoodItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends FoodItem$brandArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$brandArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    categories<T extends FoodItem$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    labels<T extends FoodItem$labelsArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$labelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mealFoodItem<T extends FoodItem$mealFoodItemArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$mealFoodItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends FoodItem$imagesArgs<ExtArgs> = {}>(args?: Subset<T, FoodItem$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItem model
   */
  interface FoodItemFieldRefs {
    readonly id: FieldRef<"FoodItem", 'String'>
    readonly barcode: FieldRef<"FoodItem", 'String'>
    readonly name: FieldRef<"FoodItem", 'String'>
    readonly servingSize: FieldRef<"FoodItem", 'Float'>
    readonly calories: FieldRef<"FoodItem", 'Float'>
    readonly proteins: FieldRef<"FoodItem", 'Float'>
    readonly carbohydrates: FieldRef<"FoodItem", 'Float'>
    readonly sugars: FieldRef<"FoodItem", 'Float'>
    readonly fat: FieldRef<"FoodItem", 'Float'>
    readonly saturatedFat: FieldRef<"FoodItem", 'Float'>
    readonly fiber: FieldRef<"FoodItem", 'Float'>
    readonly salt: FieldRef<"FoodItem", 'Float'>
    readonly cholesterol: FieldRef<"FoodItem", 'Float'>
    readonly brandId: FieldRef<"FoodItem", 'String'>
    readonly createdAt: FieldRef<"FoodItem", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodItem findUnique
   */
  export type FoodItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where: FoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem findUniqueOrThrow
   */
  export type FoodItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where: FoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem findFirst
   */
  export type FoodItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItems.
     */
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem findFirstOrThrow
   */
  export type FoodItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItem to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItems.
     */
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem findMany
   */
  export type FoodItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter, which FoodItems to fetch.
     */
    where?: FoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItems to fetch.
     */
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItems.
     */
    cursor?: FoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItems.
     */
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem create
   */
  export type FoodItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItem.
     */
    data: XOR<FoodItemCreateInput, FoodItemUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem createMany
   */
  export type FoodItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItems.
     */
    data: FoodItemCreateManyInput | FoodItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItem createManyAndReturn
   */
  export type FoodItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * The data used to create many FoodItems.
     */
    data: FoodItemCreateManyInput | FoodItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodItem update
   */
  export type FoodItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItem.
     */
    data: XOR<FoodItemUpdateInput, FoodItemUncheckedUpdateInput>
    /**
     * Choose, which FoodItem to update.
     */
    where: FoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem updateMany
   */
  export type FoodItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItems.
     */
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyInput>
    /**
     * Filter which FoodItems to update
     */
    where?: FoodItemWhereInput
    /**
     * Limit how many FoodItems to update.
     */
    limit?: number
  }

  /**
   * FoodItem updateManyAndReturn
   */
  export type FoodItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * The data used to update FoodItems.
     */
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyInput>
    /**
     * Filter which FoodItems to update
     */
    where?: FoodItemWhereInput
    /**
     * Limit how many FoodItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodItem upsert
   */
  export type FoodItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItem to update in case it exists.
     */
    where: FoodItemWhereUniqueInput
    /**
     * In case the FoodItem found by the `where` argument doesn't exist, create a new FoodItem with this data.
     */
    create: XOR<FoodItemCreateInput, FoodItemUncheckedCreateInput>
    /**
     * In case the FoodItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemUpdateInput, FoodItemUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem delete
   */
  export type FoodItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    /**
     * Filter which FoodItem to delete.
     */
    where: FoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItem deleteMany
   */
  export type FoodItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItems to delete
     */
    where?: FoodItemWhereInput
    /**
     * Limit how many FoodItems to delete.
     */
    limit?: number
  }

  /**
   * FoodItem.brand
   */
  export type FoodItem$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    where?: FoodItemBrandWhereInput
  }

  /**
   * FoodItem.categories
   */
  export type FoodItem$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    where?: FoodItemCategoryWhereInput
    orderBy?: FoodItemCategoryOrderByWithRelationInput | FoodItemCategoryOrderByWithRelationInput[]
    cursor?: FoodItemCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemCategoryScalarFieldEnum | FoodItemCategoryScalarFieldEnum[]
  }

  /**
   * FoodItem.labels
   */
  export type FoodItem$labelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    where?: FoodItemLabelWhereInput
    orderBy?: FoodItemLabelOrderByWithRelationInput | FoodItemLabelOrderByWithRelationInput[]
    cursor?: FoodItemLabelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemLabelScalarFieldEnum | FoodItemLabelScalarFieldEnum[]
  }

  /**
   * FoodItem.mealFoodItem
   */
  export type FoodItem$mealFoodItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    where?: MealFoodItemWhereInput
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    cursor?: MealFoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealFoodItemScalarFieldEnum | MealFoodItemScalarFieldEnum[]
  }

  /**
   * FoodItem.images
   */
  export type FoodItem$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    where?: FoodItemImgWhereInput
    orderBy?: FoodItemImgOrderByWithRelationInput | FoodItemImgOrderByWithRelationInput[]
    cursor?: FoodItemImgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemImgScalarFieldEnum | FoodItemImgScalarFieldEnum[]
  }

  /**
   * FoodItem without action
   */
  export type FoodItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
  }


  /**
   * Model FoodItemLabel
   */

  export type AggregateFoodItemLabel = {
    _count: FoodItemLabelCountAggregateOutputType | null
    _min: FoodItemLabelMinAggregateOutputType | null
    _max: FoodItemLabelMaxAggregateOutputType | null
  }

  export type FoodItemLabelMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemLabelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemLabelCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodItemLabelMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemLabelMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemLabelCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodItemLabelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemLabel to aggregate.
     */
    where?: FoodItemLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemLabels to fetch.
     */
    orderBy?: FoodItemLabelOrderByWithRelationInput | FoodItemLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItemLabels
    **/
    _count?: true | FoodItemLabelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemLabelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemLabelMaxAggregateInputType
  }

  export type GetFoodItemLabelAggregateType<T extends FoodItemLabelAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItemLabel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItemLabel[P]>
      : GetScalarType<T[P], AggregateFoodItemLabel[P]>
  }




  export type FoodItemLabelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemLabelWhereInput
    orderBy?: FoodItemLabelOrderByWithAggregationInput | FoodItemLabelOrderByWithAggregationInput[]
    by: FoodItemLabelScalarFieldEnum[] | FoodItemLabelScalarFieldEnum
    having?: FoodItemLabelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemLabelCountAggregateInputType | true
    _min?: FoodItemLabelMinAggregateInputType
    _max?: FoodItemLabelMaxAggregateInputType
  }

  export type FoodItemLabelGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FoodItemLabelCountAggregateOutputType | null
    _min: FoodItemLabelMinAggregateOutputType | null
    _max: FoodItemLabelMaxAggregateOutputType | null
  }

  type GetFoodItemLabelGroupByPayload<T extends FoodItemLabelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemLabelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemLabelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemLabelGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemLabelGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemLabelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItems?: boolean | FoodItemLabel$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemLabelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemLabel"]>

  export type FoodItemLabelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemLabel"]>

  export type FoodItemLabelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemLabel"]>

  export type FoodItemLabelSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodItemLabelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["foodItemLabel"]>
  export type FoodItemLabelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemLabel$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemLabelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodItemLabelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FoodItemLabelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoodItemLabelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItemLabel"
    objects: {
      foodItems: Prisma.$FoodItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foodItemLabel"]>
    composites: {}
  }

  type FoodItemLabelGetPayload<S extends boolean | null | undefined | FoodItemLabelDefaultArgs> = $Result.GetResult<Prisma.$FoodItemLabelPayload, S>

  type FoodItemLabelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodItemLabelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FoodItemLabelCountAggregateInputType | true
    }

  export interface FoodItemLabelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItemLabel'], meta: { name: 'FoodItemLabel' } }
    /**
     * Find zero or one FoodItemLabel that matches the filter.
     * @param {FoodItemLabelFindUniqueArgs} args - Arguments to find a FoodItemLabel
     * @example
     * // Get one FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemLabelFindUniqueArgs>(args: SelectSubset<T, FoodItemLabelFindUniqueArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodItemLabel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodItemLabelFindUniqueOrThrowArgs} args - Arguments to find a FoodItemLabel
     * @example
     * // Get one FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemLabelFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemLabelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemLabel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelFindFirstArgs} args - Arguments to find a FoodItemLabel
     * @example
     * // Get one FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemLabelFindFirstArgs>(args?: SelectSubset<T, FoodItemLabelFindFirstArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemLabel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelFindFirstOrThrowArgs} args - Arguments to find a FoodItemLabel
     * @example
     * // Get one FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemLabelFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemLabelFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodItemLabels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItemLabels
     * const foodItemLabels = await prisma.foodItemLabel.findMany()
     * 
     * // Get first 10 FoodItemLabels
     * const foodItemLabels = await prisma.foodItemLabel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemLabelWithIdOnly = await prisma.foodItemLabel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemLabelFindManyArgs>(args?: SelectSubset<T, FoodItemLabelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodItemLabel.
     * @param {FoodItemLabelCreateArgs} args - Arguments to create a FoodItemLabel.
     * @example
     * // Create one FoodItemLabel
     * const FoodItemLabel = await prisma.foodItemLabel.create({
     *   data: {
     *     // ... data to create a FoodItemLabel
     *   }
     * })
     * 
     */
    create<T extends FoodItemLabelCreateArgs>(args: SelectSubset<T, FoodItemLabelCreateArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodItemLabels.
     * @param {FoodItemLabelCreateManyArgs} args - Arguments to create many FoodItemLabels.
     * @example
     * // Create many FoodItemLabels
     * const foodItemLabel = await prisma.foodItemLabel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemLabelCreateManyArgs>(args?: SelectSubset<T, FoodItemLabelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItemLabels and returns the data saved in the database.
     * @param {FoodItemLabelCreateManyAndReturnArgs} args - Arguments to create many FoodItemLabels.
     * @example
     * // Create many FoodItemLabels
     * const foodItemLabel = await prisma.foodItemLabel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItemLabels and only return the `id`
     * const foodItemLabelWithIdOnly = await prisma.foodItemLabel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemLabelCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemLabelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodItemLabel.
     * @param {FoodItemLabelDeleteArgs} args - Arguments to delete one FoodItemLabel.
     * @example
     * // Delete one FoodItemLabel
     * const FoodItemLabel = await prisma.foodItemLabel.delete({
     *   where: {
     *     // ... filter to delete one FoodItemLabel
     *   }
     * })
     * 
     */
    delete<T extends FoodItemLabelDeleteArgs>(args: SelectSubset<T, FoodItemLabelDeleteArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodItemLabel.
     * @param {FoodItemLabelUpdateArgs} args - Arguments to update one FoodItemLabel.
     * @example
     * // Update one FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemLabelUpdateArgs>(args: SelectSubset<T, FoodItemLabelUpdateArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodItemLabels.
     * @param {FoodItemLabelDeleteManyArgs} args - Arguments to filter FoodItemLabels to delete.
     * @example
     * // Delete a few FoodItemLabels
     * const { count } = await prisma.foodItemLabel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemLabelDeleteManyArgs>(args?: SelectSubset<T, FoodItemLabelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemLabels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItemLabels
     * const foodItemLabel = await prisma.foodItemLabel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemLabelUpdateManyArgs>(args: SelectSubset<T, FoodItemLabelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemLabels and returns the data updated in the database.
     * @param {FoodItemLabelUpdateManyAndReturnArgs} args - Arguments to update many FoodItemLabels.
     * @example
     * // Update many FoodItemLabels
     * const foodItemLabel = await prisma.foodItemLabel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodItemLabels and only return the `id`
     * const foodItemLabelWithIdOnly = await prisma.foodItemLabel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodItemLabelUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodItemLabelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodItemLabel.
     * @param {FoodItemLabelUpsertArgs} args - Arguments to update or create a FoodItemLabel.
     * @example
     * // Update or create a FoodItemLabel
     * const foodItemLabel = await prisma.foodItemLabel.upsert({
     *   create: {
     *     // ... data to create a FoodItemLabel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItemLabel we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemLabelUpsertArgs>(args: SelectSubset<T, FoodItemLabelUpsertArgs<ExtArgs>>): Prisma__FoodItemLabelClient<$Result.GetResult<Prisma.$FoodItemLabelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodItemLabels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelCountArgs} args - Arguments to filter FoodItemLabels to count.
     * @example
     * // Count the number of FoodItemLabels
     * const count = await prisma.foodItemLabel.count({
     *   where: {
     *     // ... the filter for the FoodItemLabels we want to count
     *   }
     * })
    **/
    count<T extends FoodItemLabelCountArgs>(
      args?: Subset<T, FoodItemLabelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemLabelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItemLabel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemLabelAggregateArgs>(args: Subset<T, FoodItemLabelAggregateArgs>): Prisma.PrismaPromise<GetFoodItemLabelAggregateType<T>>

    /**
     * Group by FoodItemLabel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemLabelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemLabelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemLabelGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemLabelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemLabelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemLabelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItemLabel model
   */
  readonly fields: FoodItemLabelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItemLabel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemLabelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItems<T extends FoodItemLabel$foodItemsArgs<ExtArgs> = {}>(args?: Subset<T, FoodItemLabel$foodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItemLabel model
   */
  interface FoodItemLabelFieldRefs {
    readonly id: FieldRef<"FoodItemLabel", 'String'>
    readonly name: FieldRef<"FoodItemLabel", 'String'>
    readonly createdAt: FieldRef<"FoodItemLabel", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodItemLabel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodItemLabel findUnique
   */
  export type FoodItemLabelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemLabel to fetch.
     */
    where: FoodItemLabelWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel findUniqueOrThrow
   */
  export type FoodItemLabelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemLabel to fetch.
     */
    where: FoodItemLabelWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel findFirst
   */
  export type FoodItemLabelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemLabel to fetch.
     */
    where?: FoodItemLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemLabels to fetch.
     */
    orderBy?: FoodItemLabelOrderByWithRelationInput | FoodItemLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemLabels.
     */
    cursor?: FoodItemLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemLabels.
     */
    distinct?: FoodItemLabelScalarFieldEnum | FoodItemLabelScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel findFirstOrThrow
   */
  export type FoodItemLabelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemLabel to fetch.
     */
    where?: FoodItemLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemLabels to fetch.
     */
    orderBy?: FoodItemLabelOrderByWithRelationInput | FoodItemLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemLabels.
     */
    cursor?: FoodItemLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemLabels.
     */
    distinct?: FoodItemLabelScalarFieldEnum | FoodItemLabelScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel findMany
   */
  export type FoodItemLabelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemLabels to fetch.
     */
    where?: FoodItemLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemLabels to fetch.
     */
    orderBy?: FoodItemLabelOrderByWithRelationInput | FoodItemLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItemLabels.
     */
    cursor?: FoodItemLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemLabels.
     */
    skip?: number
    distinct?: FoodItemLabelScalarFieldEnum | FoodItemLabelScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel create
   */
  export type FoodItemLabelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItemLabel.
     */
    data: XOR<FoodItemLabelCreateInput, FoodItemLabelUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel createMany
   */
  export type FoodItemLabelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItemLabels.
     */
    data: FoodItemLabelCreateManyInput | FoodItemLabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemLabel createManyAndReturn
   */
  export type FoodItemLabelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * The data used to create many FoodItemLabels.
     */
    data: FoodItemLabelCreateManyInput | FoodItemLabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemLabel update
   */
  export type FoodItemLabelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItemLabel.
     */
    data: XOR<FoodItemLabelUpdateInput, FoodItemLabelUncheckedUpdateInput>
    /**
     * Choose, which FoodItemLabel to update.
     */
    where: FoodItemLabelWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel updateMany
   */
  export type FoodItemLabelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItemLabels.
     */
    data: XOR<FoodItemLabelUpdateManyMutationInput, FoodItemLabelUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemLabels to update
     */
    where?: FoodItemLabelWhereInput
    /**
     * Limit how many FoodItemLabels to update.
     */
    limit?: number
  }

  /**
   * FoodItemLabel updateManyAndReturn
   */
  export type FoodItemLabelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * The data used to update FoodItemLabels.
     */
    data: XOR<FoodItemLabelUpdateManyMutationInput, FoodItemLabelUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemLabels to update
     */
    where?: FoodItemLabelWhereInput
    /**
     * Limit how many FoodItemLabels to update.
     */
    limit?: number
  }

  /**
   * FoodItemLabel upsert
   */
  export type FoodItemLabelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItemLabel to update in case it exists.
     */
    where: FoodItemLabelWhereUniqueInput
    /**
     * In case the FoodItemLabel found by the `where` argument doesn't exist, create a new FoodItemLabel with this data.
     */
    create: XOR<FoodItemLabelCreateInput, FoodItemLabelUncheckedCreateInput>
    /**
     * In case the FoodItemLabel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemLabelUpdateInput, FoodItemLabelUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel delete
   */
  export type FoodItemLabelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
    /**
     * Filter which FoodItemLabel to delete.
     */
    where: FoodItemLabelWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemLabel deleteMany
   */
  export type FoodItemLabelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemLabels to delete
     */
    where?: FoodItemLabelWhereInput
    /**
     * Limit how many FoodItemLabels to delete.
     */
    limit?: number
  }

  /**
   * FoodItemLabel.foodItems
   */
  export type FoodItemLabel$foodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    cursor?: FoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItemLabel without action
   */
  export type FoodItemLabelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemLabel
     */
    select?: FoodItemLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemLabel
     */
    omit?: FoodItemLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemLabelInclude<ExtArgs> | null
  }


  /**
   * Model FoodItemImg
   */

  export type AggregateFoodItemImg = {
    _count: FoodItemImgCountAggregateOutputType | null
    _min: FoodItemImgMinAggregateOutputType | null
    _max: FoodItemImgMaxAggregateOutputType | null
  }

  export type FoodItemImgMinAggregateOutputType = {
    id: string | null
    url: string | null
    altText: string | null
    foodItemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemImgMaxAggregateOutputType = {
    id: string | null
    url: string | null
    altText: string | null
    foodItemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemImgCountAggregateOutputType = {
    id: number
    url: number
    altText: number
    foodItemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodItemImgMinAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    foodItemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemImgMaxAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    foodItemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemImgCountAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    foodItemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodItemImgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemImg to aggregate.
     */
    where?: FoodItemImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemImgs to fetch.
     */
    orderBy?: FoodItemImgOrderByWithRelationInput | FoodItemImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItemImgs
    **/
    _count?: true | FoodItemImgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemImgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemImgMaxAggregateInputType
  }

  export type GetFoodItemImgAggregateType<T extends FoodItemImgAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItemImg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItemImg[P]>
      : GetScalarType<T[P], AggregateFoodItemImg[P]>
  }




  export type FoodItemImgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemImgWhereInput
    orderBy?: FoodItemImgOrderByWithAggregationInput | FoodItemImgOrderByWithAggregationInput[]
    by: FoodItemImgScalarFieldEnum[] | FoodItemImgScalarFieldEnum
    having?: FoodItemImgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemImgCountAggregateInputType | true
    _min?: FoodItemImgMinAggregateInputType
    _max?: FoodItemImgMaxAggregateInputType
  }

  export type FoodItemImgGroupByOutputType = {
    id: string
    url: string
    altText: string | null
    foodItemId: string
    createdAt: Date
    updatedAt: Date
    _count: FoodItemImgCountAggregateOutputType | null
    _min: FoodItemImgMinAggregateOutputType | null
    _max: FoodItemImgMaxAggregateOutputType | null
  }

  type GetFoodItemImgGroupByPayload<T extends FoodItemImgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemImgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemImgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemImgGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemImgGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemImgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    altText?: boolean
    foodItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemImg"]>

  export type FoodItemImgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    altText?: boolean
    foodItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemImg"]>

  export type FoodItemImgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    altText?: boolean
    foodItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemImg"]>

  export type FoodItemImgSelectScalar = {
    id?: boolean
    url?: boolean
    altText?: boolean
    foodItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodItemImgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "altText" | "foodItemId" | "createdAt" | "updatedAt", ExtArgs["result"]["foodItemImg"]>
  export type FoodItemImgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }
  export type FoodItemImgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }
  export type FoodItemImgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }

  export type $FoodItemImgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItemImg"
    objects: {
      foodItem: Prisma.$FoodItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      altText: string | null
      foodItemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foodItemImg"]>
    composites: {}
  }

  type FoodItemImgGetPayload<S extends boolean | null | undefined | FoodItemImgDefaultArgs> = $Result.GetResult<Prisma.$FoodItemImgPayload, S>

  type FoodItemImgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodItemImgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FoodItemImgCountAggregateInputType | true
    }

  export interface FoodItemImgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItemImg'], meta: { name: 'FoodItemImg' } }
    /**
     * Find zero or one FoodItemImg that matches the filter.
     * @param {FoodItemImgFindUniqueArgs} args - Arguments to find a FoodItemImg
     * @example
     * // Get one FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemImgFindUniqueArgs>(args: SelectSubset<T, FoodItemImgFindUniqueArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodItemImg that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodItemImgFindUniqueOrThrowArgs} args - Arguments to find a FoodItemImg
     * @example
     * // Get one FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemImgFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemImgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemImg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgFindFirstArgs} args - Arguments to find a FoodItemImg
     * @example
     * // Get one FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemImgFindFirstArgs>(args?: SelectSubset<T, FoodItemImgFindFirstArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemImg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgFindFirstOrThrowArgs} args - Arguments to find a FoodItemImg
     * @example
     * // Get one FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemImgFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemImgFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodItemImgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItemImgs
     * const foodItemImgs = await prisma.foodItemImg.findMany()
     * 
     * // Get first 10 FoodItemImgs
     * const foodItemImgs = await prisma.foodItemImg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemImgWithIdOnly = await prisma.foodItemImg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemImgFindManyArgs>(args?: SelectSubset<T, FoodItemImgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodItemImg.
     * @param {FoodItemImgCreateArgs} args - Arguments to create a FoodItemImg.
     * @example
     * // Create one FoodItemImg
     * const FoodItemImg = await prisma.foodItemImg.create({
     *   data: {
     *     // ... data to create a FoodItemImg
     *   }
     * })
     * 
     */
    create<T extends FoodItemImgCreateArgs>(args: SelectSubset<T, FoodItemImgCreateArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodItemImgs.
     * @param {FoodItemImgCreateManyArgs} args - Arguments to create many FoodItemImgs.
     * @example
     * // Create many FoodItemImgs
     * const foodItemImg = await prisma.foodItemImg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemImgCreateManyArgs>(args?: SelectSubset<T, FoodItemImgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItemImgs and returns the data saved in the database.
     * @param {FoodItemImgCreateManyAndReturnArgs} args - Arguments to create many FoodItemImgs.
     * @example
     * // Create many FoodItemImgs
     * const foodItemImg = await prisma.foodItemImg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItemImgs and only return the `id`
     * const foodItemImgWithIdOnly = await prisma.foodItemImg.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemImgCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemImgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodItemImg.
     * @param {FoodItemImgDeleteArgs} args - Arguments to delete one FoodItemImg.
     * @example
     * // Delete one FoodItemImg
     * const FoodItemImg = await prisma.foodItemImg.delete({
     *   where: {
     *     // ... filter to delete one FoodItemImg
     *   }
     * })
     * 
     */
    delete<T extends FoodItemImgDeleteArgs>(args: SelectSubset<T, FoodItemImgDeleteArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodItemImg.
     * @param {FoodItemImgUpdateArgs} args - Arguments to update one FoodItemImg.
     * @example
     * // Update one FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemImgUpdateArgs>(args: SelectSubset<T, FoodItemImgUpdateArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodItemImgs.
     * @param {FoodItemImgDeleteManyArgs} args - Arguments to filter FoodItemImgs to delete.
     * @example
     * // Delete a few FoodItemImgs
     * const { count } = await prisma.foodItemImg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemImgDeleteManyArgs>(args?: SelectSubset<T, FoodItemImgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItemImgs
     * const foodItemImg = await prisma.foodItemImg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemImgUpdateManyArgs>(args: SelectSubset<T, FoodItemImgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemImgs and returns the data updated in the database.
     * @param {FoodItemImgUpdateManyAndReturnArgs} args - Arguments to update many FoodItemImgs.
     * @example
     * // Update many FoodItemImgs
     * const foodItemImg = await prisma.foodItemImg.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodItemImgs and only return the `id`
     * const foodItemImgWithIdOnly = await prisma.foodItemImg.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodItemImgUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodItemImgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodItemImg.
     * @param {FoodItemImgUpsertArgs} args - Arguments to update or create a FoodItemImg.
     * @example
     * // Update or create a FoodItemImg
     * const foodItemImg = await prisma.foodItemImg.upsert({
     *   create: {
     *     // ... data to create a FoodItemImg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItemImg we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemImgUpsertArgs>(args: SelectSubset<T, FoodItemImgUpsertArgs<ExtArgs>>): Prisma__FoodItemImgClient<$Result.GetResult<Prisma.$FoodItemImgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodItemImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgCountArgs} args - Arguments to filter FoodItemImgs to count.
     * @example
     * // Count the number of FoodItemImgs
     * const count = await prisma.foodItemImg.count({
     *   where: {
     *     // ... the filter for the FoodItemImgs we want to count
     *   }
     * })
    **/
    count<T extends FoodItemImgCountArgs>(
      args?: Subset<T, FoodItemImgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemImgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItemImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemImgAggregateArgs>(args: Subset<T, FoodItemImgAggregateArgs>): Prisma.PrismaPromise<GetFoodItemImgAggregateType<T>>

    /**
     * Group by FoodItemImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemImgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemImgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemImgGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemImgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemImgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemImgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItemImg model
   */
  readonly fields: FoodItemImgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItemImg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemImgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItem<T extends FoodItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodItemDefaultArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItemImg model
   */
  interface FoodItemImgFieldRefs {
    readonly id: FieldRef<"FoodItemImg", 'String'>
    readonly url: FieldRef<"FoodItemImg", 'String'>
    readonly altText: FieldRef<"FoodItemImg", 'String'>
    readonly foodItemId: FieldRef<"FoodItemImg", 'String'>
    readonly createdAt: FieldRef<"FoodItemImg", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodItemImg", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodItemImg findUnique
   */
  export type FoodItemImgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemImg to fetch.
     */
    where: FoodItemImgWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg findUniqueOrThrow
   */
  export type FoodItemImgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemImg to fetch.
     */
    where: FoodItemImgWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg findFirst
   */
  export type FoodItemImgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemImg to fetch.
     */
    where?: FoodItemImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemImgs to fetch.
     */
    orderBy?: FoodItemImgOrderByWithRelationInput | FoodItemImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemImgs.
     */
    cursor?: FoodItemImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemImgs.
     */
    distinct?: FoodItemImgScalarFieldEnum | FoodItemImgScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg findFirstOrThrow
   */
  export type FoodItemImgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemImg to fetch.
     */
    where?: FoodItemImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemImgs to fetch.
     */
    orderBy?: FoodItemImgOrderByWithRelationInput | FoodItemImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemImgs.
     */
    cursor?: FoodItemImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemImgs.
     */
    distinct?: FoodItemImgScalarFieldEnum | FoodItemImgScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg findMany
   */
  export type FoodItemImgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemImgs to fetch.
     */
    where?: FoodItemImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemImgs to fetch.
     */
    orderBy?: FoodItemImgOrderByWithRelationInput | FoodItemImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItemImgs.
     */
    cursor?: FoodItemImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemImgs.
     */
    skip?: number
    distinct?: FoodItemImgScalarFieldEnum | FoodItemImgScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg create
   */
  export type FoodItemImgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItemImg.
     */
    data: XOR<FoodItemImgCreateInput, FoodItemImgUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg createMany
   */
  export type FoodItemImgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItemImgs.
     */
    data: FoodItemImgCreateManyInput | FoodItemImgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemImg createManyAndReturn
   */
  export type FoodItemImgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * The data used to create many FoodItemImgs.
     */
    data: FoodItemImgCreateManyInput | FoodItemImgCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodItemImg update
   */
  export type FoodItemImgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItemImg.
     */
    data: XOR<FoodItemImgUpdateInput, FoodItemImgUncheckedUpdateInput>
    /**
     * Choose, which FoodItemImg to update.
     */
    where: FoodItemImgWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg updateMany
   */
  export type FoodItemImgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItemImgs.
     */
    data: XOR<FoodItemImgUpdateManyMutationInput, FoodItemImgUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemImgs to update
     */
    where?: FoodItemImgWhereInput
    /**
     * Limit how many FoodItemImgs to update.
     */
    limit?: number
  }

  /**
   * FoodItemImg updateManyAndReturn
   */
  export type FoodItemImgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * The data used to update FoodItemImgs.
     */
    data: XOR<FoodItemImgUpdateManyMutationInput, FoodItemImgUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemImgs to update
     */
    where?: FoodItemImgWhereInput
    /**
     * Limit how many FoodItemImgs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodItemImg upsert
   */
  export type FoodItemImgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItemImg to update in case it exists.
     */
    where: FoodItemImgWhereUniqueInput
    /**
     * In case the FoodItemImg found by the `where` argument doesn't exist, create a new FoodItemImg with this data.
     */
    create: XOR<FoodItemImgCreateInput, FoodItemImgUncheckedCreateInput>
    /**
     * In case the FoodItemImg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemImgUpdateInput, FoodItemImgUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg delete
   */
  export type FoodItemImgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
    /**
     * Filter which FoodItemImg to delete.
     */
    where: FoodItemImgWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemImg deleteMany
   */
  export type FoodItemImgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemImgs to delete
     */
    where?: FoodItemImgWhereInput
    /**
     * Limit how many FoodItemImgs to delete.
     */
    limit?: number
  }

  /**
   * FoodItemImg without action
   */
  export type FoodItemImgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemImg
     */
    select?: FoodItemImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemImg
     */
    omit?: FoodItemImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemImgInclude<ExtArgs> | null
  }


  /**
   * Model FoodItemBrand
   */

  export type AggregateFoodItemBrand = {
    _count: FoodItemBrandCountAggregateOutputType | null
    _min: FoodItemBrandMinAggregateOutputType | null
    _max: FoodItemBrandMaxAggregateOutputType | null
  }

  export type FoodItemBrandMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemBrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemBrandCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodItemBrandMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemBrandMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemBrandCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodItemBrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemBrand to aggregate.
     */
    where?: FoodItemBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemBrands to fetch.
     */
    orderBy?: FoodItemBrandOrderByWithRelationInput | FoodItemBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItemBrands
    **/
    _count?: true | FoodItemBrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemBrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemBrandMaxAggregateInputType
  }

  export type GetFoodItemBrandAggregateType<T extends FoodItemBrandAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItemBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItemBrand[P]>
      : GetScalarType<T[P], AggregateFoodItemBrand[P]>
  }




  export type FoodItemBrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemBrandWhereInput
    orderBy?: FoodItemBrandOrderByWithAggregationInput | FoodItemBrandOrderByWithAggregationInput[]
    by: FoodItemBrandScalarFieldEnum[] | FoodItemBrandScalarFieldEnum
    having?: FoodItemBrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemBrandCountAggregateInputType | true
    _min?: FoodItemBrandMinAggregateInputType
    _max?: FoodItemBrandMaxAggregateInputType
  }

  export type FoodItemBrandGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FoodItemBrandCountAggregateOutputType | null
    _min: FoodItemBrandMinAggregateOutputType | null
    _max: FoodItemBrandMaxAggregateOutputType | null
  }

  type GetFoodItemBrandGroupByPayload<T extends FoodItemBrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemBrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemBrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemBrandGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemBrandGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemBrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItems?: boolean | FoodItemBrand$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemBrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemBrand"]>

  export type FoodItemBrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemBrand"]>

  export type FoodItemBrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemBrand"]>

  export type FoodItemBrandSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodItemBrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["foodItemBrand"]>
  export type FoodItemBrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemBrand$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemBrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodItemBrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FoodItemBrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoodItemBrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItemBrand"
    objects: {
      foodItems: Prisma.$FoodItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foodItemBrand"]>
    composites: {}
  }

  type FoodItemBrandGetPayload<S extends boolean | null | undefined | FoodItemBrandDefaultArgs> = $Result.GetResult<Prisma.$FoodItemBrandPayload, S>

  type FoodItemBrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodItemBrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FoodItemBrandCountAggregateInputType | true
    }

  export interface FoodItemBrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItemBrand'], meta: { name: 'FoodItemBrand' } }
    /**
     * Find zero or one FoodItemBrand that matches the filter.
     * @param {FoodItemBrandFindUniqueArgs} args - Arguments to find a FoodItemBrand
     * @example
     * // Get one FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemBrandFindUniqueArgs>(args: SelectSubset<T, FoodItemBrandFindUniqueArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodItemBrand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodItemBrandFindUniqueOrThrowArgs} args - Arguments to find a FoodItemBrand
     * @example
     * // Get one FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemBrandFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemBrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemBrand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandFindFirstArgs} args - Arguments to find a FoodItemBrand
     * @example
     * // Get one FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemBrandFindFirstArgs>(args?: SelectSubset<T, FoodItemBrandFindFirstArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemBrand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandFindFirstOrThrowArgs} args - Arguments to find a FoodItemBrand
     * @example
     * // Get one FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemBrandFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemBrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodItemBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItemBrands
     * const foodItemBrands = await prisma.foodItemBrand.findMany()
     * 
     * // Get first 10 FoodItemBrands
     * const foodItemBrands = await prisma.foodItemBrand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemBrandWithIdOnly = await prisma.foodItemBrand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemBrandFindManyArgs>(args?: SelectSubset<T, FoodItemBrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodItemBrand.
     * @param {FoodItemBrandCreateArgs} args - Arguments to create a FoodItemBrand.
     * @example
     * // Create one FoodItemBrand
     * const FoodItemBrand = await prisma.foodItemBrand.create({
     *   data: {
     *     // ... data to create a FoodItemBrand
     *   }
     * })
     * 
     */
    create<T extends FoodItemBrandCreateArgs>(args: SelectSubset<T, FoodItemBrandCreateArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodItemBrands.
     * @param {FoodItemBrandCreateManyArgs} args - Arguments to create many FoodItemBrands.
     * @example
     * // Create many FoodItemBrands
     * const foodItemBrand = await prisma.foodItemBrand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemBrandCreateManyArgs>(args?: SelectSubset<T, FoodItemBrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItemBrands and returns the data saved in the database.
     * @param {FoodItemBrandCreateManyAndReturnArgs} args - Arguments to create many FoodItemBrands.
     * @example
     * // Create many FoodItemBrands
     * const foodItemBrand = await prisma.foodItemBrand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItemBrands and only return the `id`
     * const foodItemBrandWithIdOnly = await prisma.foodItemBrand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemBrandCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemBrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodItemBrand.
     * @param {FoodItemBrandDeleteArgs} args - Arguments to delete one FoodItemBrand.
     * @example
     * // Delete one FoodItemBrand
     * const FoodItemBrand = await prisma.foodItemBrand.delete({
     *   where: {
     *     // ... filter to delete one FoodItemBrand
     *   }
     * })
     * 
     */
    delete<T extends FoodItemBrandDeleteArgs>(args: SelectSubset<T, FoodItemBrandDeleteArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodItemBrand.
     * @param {FoodItemBrandUpdateArgs} args - Arguments to update one FoodItemBrand.
     * @example
     * // Update one FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemBrandUpdateArgs>(args: SelectSubset<T, FoodItemBrandUpdateArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodItemBrands.
     * @param {FoodItemBrandDeleteManyArgs} args - Arguments to filter FoodItemBrands to delete.
     * @example
     * // Delete a few FoodItemBrands
     * const { count } = await prisma.foodItemBrand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemBrandDeleteManyArgs>(args?: SelectSubset<T, FoodItemBrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItemBrands
     * const foodItemBrand = await prisma.foodItemBrand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemBrandUpdateManyArgs>(args: SelectSubset<T, FoodItemBrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemBrands and returns the data updated in the database.
     * @param {FoodItemBrandUpdateManyAndReturnArgs} args - Arguments to update many FoodItemBrands.
     * @example
     * // Update many FoodItemBrands
     * const foodItemBrand = await prisma.foodItemBrand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodItemBrands and only return the `id`
     * const foodItemBrandWithIdOnly = await prisma.foodItemBrand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodItemBrandUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodItemBrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodItemBrand.
     * @param {FoodItemBrandUpsertArgs} args - Arguments to update or create a FoodItemBrand.
     * @example
     * // Update or create a FoodItemBrand
     * const foodItemBrand = await prisma.foodItemBrand.upsert({
     *   create: {
     *     // ... data to create a FoodItemBrand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItemBrand we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemBrandUpsertArgs>(args: SelectSubset<T, FoodItemBrandUpsertArgs<ExtArgs>>): Prisma__FoodItemBrandClient<$Result.GetResult<Prisma.$FoodItemBrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodItemBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandCountArgs} args - Arguments to filter FoodItemBrands to count.
     * @example
     * // Count the number of FoodItemBrands
     * const count = await prisma.foodItemBrand.count({
     *   where: {
     *     // ... the filter for the FoodItemBrands we want to count
     *   }
     * })
    **/
    count<T extends FoodItemBrandCountArgs>(
      args?: Subset<T, FoodItemBrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemBrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItemBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemBrandAggregateArgs>(args: Subset<T, FoodItemBrandAggregateArgs>): Prisma.PrismaPromise<GetFoodItemBrandAggregateType<T>>

    /**
     * Group by FoodItemBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemBrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemBrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemBrandGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemBrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemBrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItemBrand model
   */
  readonly fields: FoodItemBrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItemBrand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemBrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItems<T extends FoodItemBrand$foodItemsArgs<ExtArgs> = {}>(args?: Subset<T, FoodItemBrand$foodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItemBrand model
   */
  interface FoodItemBrandFieldRefs {
    readonly id: FieldRef<"FoodItemBrand", 'String'>
    readonly name: FieldRef<"FoodItemBrand", 'String'>
    readonly createdAt: FieldRef<"FoodItemBrand", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodItemBrand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodItemBrand findUnique
   */
  export type FoodItemBrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemBrand to fetch.
     */
    where: FoodItemBrandWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand findUniqueOrThrow
   */
  export type FoodItemBrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemBrand to fetch.
     */
    where: FoodItemBrandWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand findFirst
   */
  export type FoodItemBrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemBrand to fetch.
     */
    where?: FoodItemBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemBrands to fetch.
     */
    orderBy?: FoodItemBrandOrderByWithRelationInput | FoodItemBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemBrands.
     */
    cursor?: FoodItemBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemBrands.
     */
    distinct?: FoodItemBrandScalarFieldEnum | FoodItemBrandScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand findFirstOrThrow
   */
  export type FoodItemBrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemBrand to fetch.
     */
    where?: FoodItemBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemBrands to fetch.
     */
    orderBy?: FoodItemBrandOrderByWithRelationInput | FoodItemBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemBrands.
     */
    cursor?: FoodItemBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemBrands.
     */
    distinct?: FoodItemBrandScalarFieldEnum | FoodItemBrandScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand findMany
   */
  export type FoodItemBrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemBrands to fetch.
     */
    where?: FoodItemBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemBrands to fetch.
     */
    orderBy?: FoodItemBrandOrderByWithRelationInput | FoodItemBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItemBrands.
     */
    cursor?: FoodItemBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemBrands.
     */
    skip?: number
    distinct?: FoodItemBrandScalarFieldEnum | FoodItemBrandScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand create
   */
  export type FoodItemBrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItemBrand.
     */
    data: XOR<FoodItemBrandCreateInput, FoodItemBrandUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand createMany
   */
  export type FoodItemBrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItemBrands.
     */
    data: FoodItemBrandCreateManyInput | FoodItemBrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemBrand createManyAndReturn
   */
  export type FoodItemBrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * The data used to create many FoodItemBrands.
     */
    data: FoodItemBrandCreateManyInput | FoodItemBrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemBrand update
   */
  export type FoodItemBrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItemBrand.
     */
    data: XOR<FoodItemBrandUpdateInput, FoodItemBrandUncheckedUpdateInput>
    /**
     * Choose, which FoodItemBrand to update.
     */
    where: FoodItemBrandWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand updateMany
   */
  export type FoodItemBrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItemBrands.
     */
    data: XOR<FoodItemBrandUpdateManyMutationInput, FoodItemBrandUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemBrands to update
     */
    where?: FoodItemBrandWhereInput
    /**
     * Limit how many FoodItemBrands to update.
     */
    limit?: number
  }

  /**
   * FoodItemBrand updateManyAndReturn
   */
  export type FoodItemBrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * The data used to update FoodItemBrands.
     */
    data: XOR<FoodItemBrandUpdateManyMutationInput, FoodItemBrandUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemBrands to update
     */
    where?: FoodItemBrandWhereInput
    /**
     * Limit how many FoodItemBrands to update.
     */
    limit?: number
  }

  /**
   * FoodItemBrand upsert
   */
  export type FoodItemBrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItemBrand to update in case it exists.
     */
    where: FoodItemBrandWhereUniqueInput
    /**
     * In case the FoodItemBrand found by the `where` argument doesn't exist, create a new FoodItemBrand with this data.
     */
    create: XOR<FoodItemBrandCreateInput, FoodItemBrandUncheckedCreateInput>
    /**
     * In case the FoodItemBrand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemBrandUpdateInput, FoodItemBrandUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand delete
   */
  export type FoodItemBrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
    /**
     * Filter which FoodItemBrand to delete.
     */
    where: FoodItemBrandWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemBrand deleteMany
   */
  export type FoodItemBrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemBrands to delete
     */
    where?: FoodItemBrandWhereInput
    /**
     * Limit how many FoodItemBrands to delete.
     */
    limit?: number
  }

  /**
   * FoodItemBrand.foodItems
   */
  export type FoodItemBrand$foodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    cursor?: FoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItemBrand without action
   */
  export type FoodItemBrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemBrand
     */
    select?: FoodItemBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemBrand
     */
    omit?: FoodItemBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemBrandInclude<ExtArgs> | null
  }


  /**
   * Model FoodItemCategory
   */

  export type AggregateFoodItemCategory = {
    _count: FoodItemCategoryCountAggregateOutputType | null
    _min: FoodItemCategoryMinAggregateOutputType | null
    _max: FoodItemCategoryMaxAggregateOutputType | null
  }

  export type FoodItemCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodItemCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodItemCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodItemCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodItemCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemCategory to aggregate.
     */
    where?: FoodItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemCategories to fetch.
     */
    orderBy?: FoodItemCategoryOrderByWithRelationInput | FoodItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodItemCategories
    **/
    _count?: true | FoodItemCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodItemCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodItemCategoryMaxAggregateInputType
  }

  export type GetFoodItemCategoryAggregateType<T extends FoodItemCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodItemCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodItemCategory[P]>
      : GetScalarType<T[P], AggregateFoodItemCategory[P]>
  }




  export type FoodItemCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodItemCategoryWhereInput
    orderBy?: FoodItemCategoryOrderByWithAggregationInput | FoodItemCategoryOrderByWithAggregationInput[]
    by: FoodItemCategoryScalarFieldEnum[] | FoodItemCategoryScalarFieldEnum
    having?: FoodItemCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodItemCategoryCountAggregateInputType | true
    _min?: FoodItemCategoryMinAggregateInputType
    _max?: FoodItemCategoryMaxAggregateInputType
  }

  export type FoodItemCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FoodItemCategoryCountAggregateOutputType | null
    _min: FoodItemCategoryMinAggregateOutputType | null
    _max: FoodItemCategoryMaxAggregateOutputType | null
  }

  type GetFoodItemCategoryGroupByPayload<T extends FoodItemCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodItemCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodItemCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodItemCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], FoodItemCategoryGroupByOutputType[P]>
        }
      >
    >


  export type FoodItemCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodItems?: boolean | FoodItemCategory$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodItemCategory"]>

  export type FoodItemCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemCategory"]>

  export type FoodItemCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foodItemCategory"]>

  export type FoodItemCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodItemCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["foodItemCategory"]>
  export type FoodItemCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodItems?: boolean | FoodItemCategory$foodItemsArgs<ExtArgs>
    _count?: boolean | FoodItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodItemCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FoodItemCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoodItemCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodItemCategory"
    objects: {
      foodItems: Prisma.$FoodItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foodItemCategory"]>
    composites: {}
  }

  type FoodItemCategoryGetPayload<S extends boolean | null | undefined | FoodItemCategoryDefaultArgs> = $Result.GetResult<Prisma.$FoodItemCategoryPayload, S>

  type FoodItemCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodItemCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FoodItemCategoryCountAggregateInputType | true
    }

  export interface FoodItemCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodItemCategory'], meta: { name: 'FoodItemCategory' } }
    /**
     * Find zero or one FoodItemCategory that matches the filter.
     * @param {FoodItemCategoryFindUniqueArgs} args - Arguments to find a FoodItemCategory
     * @example
     * // Get one FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodItemCategoryFindUniqueArgs>(args: SelectSubset<T, FoodItemCategoryFindUniqueArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodItemCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodItemCategoryFindUniqueOrThrowArgs} args - Arguments to find a FoodItemCategory
     * @example
     * // Get one FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodItemCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodItemCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryFindFirstArgs} args - Arguments to find a FoodItemCategory
     * @example
     * // Get one FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodItemCategoryFindFirstArgs>(args?: SelectSubset<T, FoodItemCategoryFindFirstArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodItemCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryFindFirstOrThrowArgs} args - Arguments to find a FoodItemCategory
     * @example
     * // Get one FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodItemCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodItemCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodItemCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodItemCategories
     * const foodItemCategories = await prisma.foodItemCategory.findMany()
     * 
     * // Get first 10 FoodItemCategories
     * const foodItemCategories = await prisma.foodItemCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodItemCategoryWithIdOnly = await prisma.foodItemCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodItemCategoryFindManyArgs>(args?: SelectSubset<T, FoodItemCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodItemCategory.
     * @param {FoodItemCategoryCreateArgs} args - Arguments to create a FoodItemCategory.
     * @example
     * // Create one FoodItemCategory
     * const FoodItemCategory = await prisma.foodItemCategory.create({
     *   data: {
     *     // ... data to create a FoodItemCategory
     *   }
     * })
     * 
     */
    create<T extends FoodItemCategoryCreateArgs>(args: SelectSubset<T, FoodItemCategoryCreateArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodItemCategories.
     * @param {FoodItemCategoryCreateManyArgs} args - Arguments to create many FoodItemCategories.
     * @example
     * // Create many FoodItemCategories
     * const foodItemCategory = await prisma.foodItemCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodItemCategoryCreateManyArgs>(args?: SelectSubset<T, FoodItemCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodItemCategories and returns the data saved in the database.
     * @param {FoodItemCategoryCreateManyAndReturnArgs} args - Arguments to create many FoodItemCategories.
     * @example
     * // Create many FoodItemCategories
     * const foodItemCategory = await prisma.foodItemCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodItemCategories and only return the `id`
     * const foodItemCategoryWithIdOnly = await prisma.foodItemCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodItemCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodItemCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodItemCategory.
     * @param {FoodItemCategoryDeleteArgs} args - Arguments to delete one FoodItemCategory.
     * @example
     * // Delete one FoodItemCategory
     * const FoodItemCategory = await prisma.foodItemCategory.delete({
     *   where: {
     *     // ... filter to delete one FoodItemCategory
     *   }
     * })
     * 
     */
    delete<T extends FoodItemCategoryDeleteArgs>(args: SelectSubset<T, FoodItemCategoryDeleteArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodItemCategory.
     * @param {FoodItemCategoryUpdateArgs} args - Arguments to update one FoodItemCategory.
     * @example
     * // Update one FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodItemCategoryUpdateArgs>(args: SelectSubset<T, FoodItemCategoryUpdateArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodItemCategories.
     * @param {FoodItemCategoryDeleteManyArgs} args - Arguments to filter FoodItemCategories to delete.
     * @example
     * // Delete a few FoodItemCategories
     * const { count } = await prisma.foodItemCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodItemCategoryDeleteManyArgs>(args?: SelectSubset<T, FoodItemCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodItemCategories
     * const foodItemCategory = await prisma.foodItemCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodItemCategoryUpdateManyArgs>(args: SelectSubset<T, FoodItemCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodItemCategories and returns the data updated in the database.
     * @param {FoodItemCategoryUpdateManyAndReturnArgs} args - Arguments to update many FoodItemCategories.
     * @example
     * // Update many FoodItemCategories
     * const foodItemCategory = await prisma.foodItemCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodItemCategories and only return the `id`
     * const foodItemCategoryWithIdOnly = await prisma.foodItemCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodItemCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodItemCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodItemCategory.
     * @param {FoodItemCategoryUpsertArgs} args - Arguments to update or create a FoodItemCategory.
     * @example
     * // Update or create a FoodItemCategory
     * const foodItemCategory = await prisma.foodItemCategory.upsert({
     *   create: {
     *     // ... data to create a FoodItemCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodItemCategory we want to update
     *   }
     * })
     */
    upsert<T extends FoodItemCategoryUpsertArgs>(args: SelectSubset<T, FoodItemCategoryUpsertArgs<ExtArgs>>): Prisma__FoodItemCategoryClient<$Result.GetResult<Prisma.$FoodItemCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodItemCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryCountArgs} args - Arguments to filter FoodItemCategories to count.
     * @example
     * // Count the number of FoodItemCategories
     * const count = await prisma.foodItemCategory.count({
     *   where: {
     *     // ... the filter for the FoodItemCategories we want to count
     *   }
     * })
    **/
    count<T extends FoodItemCategoryCountArgs>(
      args?: Subset<T, FoodItemCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodItemCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodItemCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodItemCategoryAggregateArgs>(args: Subset<T, FoodItemCategoryAggregateArgs>): Prisma.PrismaPromise<GetFoodItemCategoryAggregateType<T>>

    /**
     * Group by FoodItemCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodItemCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodItemCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodItemCategoryGroupByArgs['orderBy'] }
        : { orderBy?: FoodItemCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodItemCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodItemCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodItemCategory model
   */
  readonly fields: FoodItemCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodItemCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodItemCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodItems<T extends FoodItemCategory$foodItemsArgs<ExtArgs> = {}>(args?: Subset<T, FoodItemCategory$foodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodItemCategory model
   */
  interface FoodItemCategoryFieldRefs {
    readonly id: FieldRef<"FoodItemCategory", 'String'>
    readonly name: FieldRef<"FoodItemCategory", 'String'>
    readonly createdAt: FieldRef<"FoodItemCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodItemCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodItemCategory findUnique
   */
  export type FoodItemCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemCategory to fetch.
     */
    where: FoodItemCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory findUniqueOrThrow
   */
  export type FoodItemCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemCategory to fetch.
     */
    where: FoodItemCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory findFirst
   */
  export type FoodItemCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemCategory to fetch.
     */
    where?: FoodItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemCategories to fetch.
     */
    orderBy?: FoodItemCategoryOrderByWithRelationInput | FoodItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemCategories.
     */
    cursor?: FoodItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemCategories.
     */
    distinct?: FoodItemCategoryScalarFieldEnum | FoodItemCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory findFirstOrThrow
   */
  export type FoodItemCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemCategory to fetch.
     */
    where?: FoodItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemCategories to fetch.
     */
    orderBy?: FoodItemCategoryOrderByWithRelationInput | FoodItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodItemCategories.
     */
    cursor?: FoodItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodItemCategories.
     */
    distinct?: FoodItemCategoryScalarFieldEnum | FoodItemCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory findMany
   */
  export type FoodItemCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which FoodItemCategories to fetch.
     */
    where?: FoodItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodItemCategories to fetch.
     */
    orderBy?: FoodItemCategoryOrderByWithRelationInput | FoodItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodItemCategories.
     */
    cursor?: FoodItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodItemCategories.
     */
    skip?: number
    distinct?: FoodItemCategoryScalarFieldEnum | FoodItemCategoryScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory create
   */
  export type FoodItemCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodItemCategory.
     */
    data: XOR<FoodItemCategoryCreateInput, FoodItemCategoryUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory createMany
   */
  export type FoodItemCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodItemCategories.
     */
    data: FoodItemCategoryCreateManyInput | FoodItemCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemCategory createManyAndReturn
   */
  export type FoodItemCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many FoodItemCategories.
     */
    data: FoodItemCategoryCreateManyInput | FoodItemCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodItemCategory update
   */
  export type FoodItemCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodItemCategory.
     */
    data: XOR<FoodItemCategoryUpdateInput, FoodItemCategoryUncheckedUpdateInput>
    /**
     * Choose, which FoodItemCategory to update.
     */
    where: FoodItemCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory updateMany
   */
  export type FoodItemCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodItemCategories.
     */
    data: XOR<FoodItemCategoryUpdateManyMutationInput, FoodItemCategoryUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemCategories to update
     */
    where?: FoodItemCategoryWhereInput
    /**
     * Limit how many FoodItemCategories to update.
     */
    limit?: number
  }

  /**
   * FoodItemCategory updateManyAndReturn
   */
  export type FoodItemCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * The data used to update FoodItemCategories.
     */
    data: XOR<FoodItemCategoryUpdateManyMutationInput, FoodItemCategoryUncheckedUpdateManyInput>
    /**
     * Filter which FoodItemCategories to update
     */
    where?: FoodItemCategoryWhereInput
    /**
     * Limit how many FoodItemCategories to update.
     */
    limit?: number
  }

  /**
   * FoodItemCategory upsert
   */
  export type FoodItemCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodItemCategory to update in case it exists.
     */
    where: FoodItemCategoryWhereUniqueInput
    /**
     * In case the FoodItemCategory found by the `where` argument doesn't exist, create a new FoodItemCategory with this data.
     */
    create: XOR<FoodItemCategoryCreateInput, FoodItemCategoryUncheckedCreateInput>
    /**
     * In case the FoodItemCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodItemCategoryUpdateInput, FoodItemCategoryUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory delete
   */
  export type FoodItemCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
    /**
     * Filter which FoodItemCategory to delete.
     */
    where: FoodItemCategoryWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * FoodItemCategory deleteMany
   */
  export type FoodItemCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodItemCategories to delete
     */
    where?: FoodItemCategoryWhereInput
    /**
     * Limit how many FoodItemCategories to delete.
     */
    limit?: number
  }

  /**
   * FoodItemCategory.foodItems
   */
  export type FoodItemCategory$foodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItem
     */
    select?: FoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItem
     */
    omit?: FoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemInclude<ExtArgs> | null
    where?: FoodItemWhereInput
    orderBy?: FoodItemOrderByWithRelationInput | FoodItemOrderByWithRelationInput[]
    cursor?: FoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodItemScalarFieldEnum | FoodItemScalarFieldEnum[]
  }

  /**
   * FoodItemCategory without action
   */
  export type FoodItemCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodItemCategory
     */
    select?: FoodItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodItemCategory
     */
    omit?: FoodItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodItemCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Meal
   */

  export type AggregateMeal = {
    _count: MealCountAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  export type MealMinAggregateOutputType = {
    id: string | null
    name: string | null
    mealType: $Enums.MealType | null
    ownerId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealMaxAggregateOutputType = {
    id: string | null
    name: string | null
    mealType: $Enums.MealType | null
    ownerId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealCountAggregateOutputType = {
    id: number
    name: number
    mealType: number
    ownerId: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MealMinAggregateInputType = {
    id?: true
    name?: true
    mealType?: true
    ownerId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealMaxAggregateInputType = {
    id?: true
    name?: true
    mealType?: true
    ownerId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealCountAggregateInputType = {
    id?: true
    name?: true
    mealType?: true
    ownerId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meal to aggregate.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meals
    **/
    _count?: true | MealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealMaxAggregateInputType
  }

  export type GetMealAggregateType<T extends MealAggregateArgs> = {
        [P in keyof T & keyof AggregateMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeal[P]>
      : GetScalarType<T[P], AggregateMeal[P]>
  }




  export type MealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
    orderBy?: MealOrderByWithAggregationInput | MealOrderByWithAggregationInput[]
    by: MealScalarFieldEnum[] | MealScalarFieldEnum
    having?: MealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealCountAggregateInputType | true
    _min?: MealMinAggregateInputType
    _max?: MealMaxAggregateInputType
  }

  export type MealGroupByOutputType = {
    id: string
    name: string | null
    mealType: $Enums.MealType
    ownerId: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: MealCountAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  type GetMealGroupByPayload<T extends MealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealGroupByOutputType[P]>
            : GetScalarType<T[P], MealGroupByOutputType[P]>
        }
      >
    >


  export type MealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mealType?: boolean
    ownerId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Meal$ownerArgs<ExtArgs>
    mealFoodItems?: boolean | Meal$mealFoodItemsArgs<ExtArgs>
    userMeals?: boolean | Meal$userMealsArgs<ExtArgs>
    images?: boolean | Meal$imagesArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mealType?: boolean
    ownerId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Meal$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mealType?: boolean
    ownerId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Meal$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectScalar = {
    id?: boolean
    name?: boolean
    mealType?: boolean
    ownerId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MealOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "mealType" | "ownerId" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["meal"]>
  export type MealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Meal$ownerArgs<ExtArgs>
    mealFoodItems?: boolean | Meal$mealFoodItemsArgs<ExtArgs>
    userMeals?: boolean | Meal$userMealsArgs<ExtArgs>
    images?: boolean | Meal$imagesArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Meal$ownerArgs<ExtArgs>
  }
  export type MealIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | Meal$ownerArgs<ExtArgs>
  }

  export type $MealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meal"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs> | null
      mealFoodItems: Prisma.$MealFoodItemPayload<ExtArgs>[]
      userMeals: Prisma.$UserMealPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      mealType: $Enums.MealType
      ownerId: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meal"]>
    composites: {}
  }

  type MealGetPayload<S extends boolean | null | undefined | MealDefaultArgs> = $Result.GetResult<Prisma.$MealPayload, S>

  type MealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MealFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: MealCountAggregateInputType | true
    }

  export interface MealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meal'], meta: { name: 'Meal' } }
    /**
     * Find zero or one Meal that matches the filter.
     * @param {MealFindUniqueArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealFindUniqueArgs>(args: SelectSubset<T, MealFindUniqueArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Meal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MealFindUniqueOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealFindUniqueOrThrowArgs>(args: SelectSubset<T, MealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealFindFirstArgs>(args?: SelectSubset<T, MealFindFirstArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealFindFirstOrThrowArgs>(args?: SelectSubset<T, MealFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Meals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meals
     * const meals = await prisma.meal.findMany()
     * 
     * // Get first 10 Meals
     * const meals = await prisma.meal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealWithIdOnly = await prisma.meal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealFindManyArgs>(args?: SelectSubset<T, MealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Meal.
     * @param {MealCreateArgs} args - Arguments to create a Meal.
     * @example
     * // Create one Meal
     * const Meal = await prisma.meal.create({
     *   data: {
     *     // ... data to create a Meal
     *   }
     * })
     * 
     */
    create<T extends MealCreateArgs>(args: SelectSubset<T, MealCreateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Meals.
     * @param {MealCreateManyArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealCreateManyArgs>(args?: SelectSubset<T, MealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meals and returns the data saved in the database.
     * @param {MealCreateManyAndReturnArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meals and only return the `id`
     * const mealWithIdOnly = await prisma.meal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealCreateManyAndReturnArgs>(args?: SelectSubset<T, MealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Meal.
     * @param {MealDeleteArgs} args - Arguments to delete one Meal.
     * @example
     * // Delete one Meal
     * const Meal = await prisma.meal.delete({
     *   where: {
     *     // ... filter to delete one Meal
     *   }
     * })
     * 
     */
    delete<T extends MealDeleteArgs>(args: SelectSubset<T, MealDeleteArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Meal.
     * @param {MealUpdateArgs} args - Arguments to update one Meal.
     * @example
     * // Update one Meal
     * const meal = await prisma.meal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealUpdateArgs>(args: SelectSubset<T, MealUpdateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Meals.
     * @param {MealDeleteManyArgs} args - Arguments to filter Meals to delete.
     * @example
     * // Delete a few Meals
     * const { count } = await prisma.meal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealDeleteManyArgs>(args?: SelectSubset<T, MealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meals
     * const meal = await prisma.meal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealUpdateManyArgs>(args: SelectSubset<T, MealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meals and returns the data updated in the database.
     * @param {MealUpdateManyAndReturnArgs} args - Arguments to update many Meals.
     * @example
     * // Update many Meals
     * const meal = await prisma.meal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Meals and only return the `id`
     * const mealWithIdOnly = await prisma.meal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MealUpdateManyAndReturnArgs>(args: SelectSubset<T, MealUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Meal.
     * @param {MealUpsertArgs} args - Arguments to update or create a Meal.
     * @example
     * // Update or create a Meal
     * const meal = await prisma.meal.upsert({
     *   create: {
     *     // ... data to create a Meal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meal we want to update
     *   }
     * })
     */
    upsert<T extends MealUpsertArgs>(args: SelectSubset<T, MealUpsertArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCountArgs} args - Arguments to filter Meals to count.
     * @example
     * // Count the number of Meals
     * const count = await prisma.meal.count({
     *   where: {
     *     // ... the filter for the Meals we want to count
     *   }
     * })
    **/
    count<T extends MealCountArgs>(
      args?: Subset<T, MealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealAggregateArgs>(args: Subset<T, MealAggregateArgs>): Prisma.PrismaPromise<GetMealAggregateType<T>>

    /**
     * Group by Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealGroupByArgs['orderBy'] }
        : { orderBy?: MealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meal model
   */
  readonly fields: MealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends Meal$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Meal$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mealFoodItems<T extends Meal$mealFoodItemsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$mealFoodItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userMeals<T extends Meal$userMealsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$userMealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Meal$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Meal$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meal model
   */
  interface MealFieldRefs {
    readonly id: FieldRef<"Meal", 'String'>
    readonly name: FieldRef<"Meal", 'String'>
    readonly mealType: FieldRef<"Meal", 'MealType'>
    readonly ownerId: FieldRef<"Meal", 'String'>
    readonly notes: FieldRef<"Meal", 'String'>
    readonly createdAt: FieldRef<"Meal", 'DateTime'>
    readonly updatedAt: FieldRef<"Meal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Meal findUnique
   */
  export type MealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal findUniqueOrThrow
   */
  export type MealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal findFirst
   */
  export type MealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal findFirstOrThrow
   */
  export type MealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal findMany
   */
  export type MealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meals to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal create
   */
  export type MealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to create a Meal.
     */
    data: XOR<MealCreateInput, MealUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal createMany
   */
  export type MealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meal createManyAndReturn
   */
  export type MealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meal update
   */
  export type MealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to update a Meal.
     */
    data: XOR<MealUpdateInput, MealUncheckedUpdateInput>
    /**
     * Choose, which Meal to update.
     */
    where: MealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal updateMany
   */
  export type MealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meals.
     */
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyInput>
    /**
     * Filter which Meals to update
     */
    where?: MealWhereInput
    /**
     * Limit how many Meals to update.
     */
    limit?: number
  }

  /**
   * Meal updateManyAndReturn
   */
  export type MealUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * The data used to update Meals.
     */
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyInput>
    /**
     * Filter which Meals to update
     */
    where?: MealWhereInput
    /**
     * Limit how many Meals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meal upsert
   */
  export type MealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The filter to search for the Meal to update in case it exists.
     */
    where: MealWhereUniqueInput
    /**
     * In case the Meal found by the `where` argument doesn't exist, create a new Meal with this data.
     */
    create: XOR<MealCreateInput, MealUncheckedCreateInput>
    /**
     * In case the Meal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealUpdateInput, MealUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal delete
   */
  export type MealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter which Meal to delete.
     */
    where: MealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Meal deleteMany
   */
  export type MealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meals to delete
     */
    where?: MealWhereInput
    /**
     * Limit how many Meals to delete.
     */
    limit?: number
  }

  /**
   * Meal.owner
   */
  export type Meal$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Meal.mealFoodItems
   */
  export type Meal$mealFoodItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    where?: MealFoodItemWhereInput
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    cursor?: MealFoodItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealFoodItemScalarFieldEnum | MealFoodItemScalarFieldEnum[]
  }

  /**
   * Meal.userMeals
   */
  export type Meal$userMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    where?: UserMealWhereInput
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    cursor?: UserMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMealScalarFieldEnum | UserMealScalarFieldEnum[]
  }

  /**
   * Meal.images
   */
  export type Meal$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Meal without action
   */
  export type MealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
  }


  /**
   * Model MealFoodItem
   */

  export type AggregateMealFoodItem = {
    _count: MealFoodItemCountAggregateOutputType | null
    _avg: MealFoodItemAvgAggregateOutputType | null
    _sum: MealFoodItemSumAggregateOutputType | null
    _min: MealFoodItemMinAggregateOutputType | null
    _max: MealFoodItemMaxAggregateOutputType | null
  }

  export type MealFoodItemAvgAggregateOutputType = {
    quantity: number | null
  }

  export type MealFoodItemSumAggregateOutputType = {
    quantity: number | null
  }

  export type MealFoodItemMinAggregateOutputType = {
    id: string | null
    mealId: string | null
    foodItemId: string | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealFoodItemMaxAggregateOutputType = {
    id: string | null
    mealId: string | null
    foodItemId: string | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealFoodItemCountAggregateOutputType = {
    id: number
    mealId: number
    foodItemId: number
    quantity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MealFoodItemAvgAggregateInputType = {
    quantity?: true
  }

  export type MealFoodItemSumAggregateInputType = {
    quantity?: true
  }

  export type MealFoodItemMinAggregateInputType = {
    id?: true
    mealId?: true
    foodItemId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealFoodItemMaxAggregateInputType = {
    id?: true
    mealId?: true
    foodItemId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealFoodItemCountAggregateInputType = {
    id?: true
    mealId?: true
    foodItemId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MealFoodItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealFoodItem to aggregate.
     */
    where?: MealFoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoodItems to fetch.
     */
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealFoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealFoodItems
    **/
    _count?: true | MealFoodItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealFoodItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealFoodItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealFoodItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealFoodItemMaxAggregateInputType
  }

  export type GetMealFoodItemAggregateType<T extends MealFoodItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMealFoodItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealFoodItem[P]>
      : GetScalarType<T[P], AggregateMealFoodItem[P]>
  }




  export type MealFoodItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodItemWhereInput
    orderBy?: MealFoodItemOrderByWithAggregationInput | MealFoodItemOrderByWithAggregationInput[]
    by: MealFoodItemScalarFieldEnum[] | MealFoodItemScalarFieldEnum
    having?: MealFoodItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealFoodItemCountAggregateInputType | true
    _avg?: MealFoodItemAvgAggregateInputType
    _sum?: MealFoodItemSumAggregateInputType
    _min?: MealFoodItemMinAggregateInputType
    _max?: MealFoodItemMaxAggregateInputType
  }

  export type MealFoodItemGroupByOutputType = {
    id: string
    mealId: string
    foodItemId: string
    quantity: number
    createdAt: Date
    updatedAt: Date
    _count: MealFoodItemCountAggregateOutputType | null
    _avg: MealFoodItemAvgAggregateOutputType | null
    _sum: MealFoodItemSumAggregateOutputType | null
    _min: MealFoodItemMinAggregateOutputType | null
    _max: MealFoodItemMaxAggregateOutputType | null
  }

  type GetMealFoodItemGroupByPayload<T extends MealFoodItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealFoodItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealFoodItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealFoodItemGroupByOutputType[P]>
            : GetScalarType<T[P], MealFoodItemGroupByOutputType[P]>
        }
      >
    >


  export type MealFoodItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    foodItemId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealFoodItem"]>

  export type MealFoodItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    foodItemId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealFoodItem"]>

  export type MealFoodItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    foodItemId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealFoodItem"]>

  export type MealFoodItemSelectScalar = {
    id?: boolean
    mealId?: boolean
    foodItemId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MealFoodItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mealId" | "foodItemId" | "quantity" | "createdAt" | "updatedAt", ExtArgs["result"]["mealFoodItem"]>
  export type MealFoodItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }
  export type MealFoodItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }
  export type MealFoodItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    foodItem?: boolean | FoodItemDefaultArgs<ExtArgs>
  }

  export type $MealFoodItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealFoodItem"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
      foodItem: Prisma.$FoodItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealId: string
      foodItemId: string
      quantity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mealFoodItem"]>
    composites: {}
  }

  type MealFoodItemGetPayload<S extends boolean | null | undefined | MealFoodItemDefaultArgs> = $Result.GetResult<Prisma.$MealFoodItemPayload, S>

  type MealFoodItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MealFoodItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: MealFoodItemCountAggregateInputType | true
    }

  export interface MealFoodItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealFoodItem'], meta: { name: 'MealFoodItem' } }
    /**
     * Find zero or one MealFoodItem that matches the filter.
     * @param {MealFoodItemFindUniqueArgs} args - Arguments to find a MealFoodItem
     * @example
     * // Get one MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealFoodItemFindUniqueArgs>(args: SelectSubset<T, MealFoodItemFindUniqueArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MealFoodItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MealFoodItemFindUniqueOrThrowArgs} args - Arguments to find a MealFoodItem
     * @example
     * // Get one MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealFoodItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MealFoodItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealFoodItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemFindFirstArgs} args - Arguments to find a MealFoodItem
     * @example
     * // Get one MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealFoodItemFindFirstArgs>(args?: SelectSubset<T, MealFoodItemFindFirstArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealFoodItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemFindFirstOrThrowArgs} args - Arguments to find a MealFoodItem
     * @example
     * // Get one MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealFoodItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MealFoodItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MealFoodItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealFoodItems
     * const mealFoodItems = await prisma.mealFoodItem.findMany()
     * 
     * // Get first 10 MealFoodItems
     * const mealFoodItems = await prisma.mealFoodItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealFoodItemWithIdOnly = await prisma.mealFoodItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealFoodItemFindManyArgs>(args?: SelectSubset<T, MealFoodItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MealFoodItem.
     * @param {MealFoodItemCreateArgs} args - Arguments to create a MealFoodItem.
     * @example
     * // Create one MealFoodItem
     * const MealFoodItem = await prisma.mealFoodItem.create({
     *   data: {
     *     // ... data to create a MealFoodItem
     *   }
     * })
     * 
     */
    create<T extends MealFoodItemCreateArgs>(args: SelectSubset<T, MealFoodItemCreateArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MealFoodItems.
     * @param {MealFoodItemCreateManyArgs} args - Arguments to create many MealFoodItems.
     * @example
     * // Create many MealFoodItems
     * const mealFoodItem = await prisma.mealFoodItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealFoodItemCreateManyArgs>(args?: SelectSubset<T, MealFoodItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealFoodItems and returns the data saved in the database.
     * @param {MealFoodItemCreateManyAndReturnArgs} args - Arguments to create many MealFoodItems.
     * @example
     * // Create many MealFoodItems
     * const mealFoodItem = await prisma.mealFoodItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealFoodItems and only return the `id`
     * const mealFoodItemWithIdOnly = await prisma.mealFoodItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealFoodItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MealFoodItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MealFoodItem.
     * @param {MealFoodItemDeleteArgs} args - Arguments to delete one MealFoodItem.
     * @example
     * // Delete one MealFoodItem
     * const MealFoodItem = await prisma.mealFoodItem.delete({
     *   where: {
     *     // ... filter to delete one MealFoodItem
     *   }
     * })
     * 
     */
    delete<T extends MealFoodItemDeleteArgs>(args: SelectSubset<T, MealFoodItemDeleteArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MealFoodItem.
     * @param {MealFoodItemUpdateArgs} args - Arguments to update one MealFoodItem.
     * @example
     * // Update one MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealFoodItemUpdateArgs>(args: SelectSubset<T, MealFoodItemUpdateArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MealFoodItems.
     * @param {MealFoodItemDeleteManyArgs} args - Arguments to filter MealFoodItems to delete.
     * @example
     * // Delete a few MealFoodItems
     * const { count } = await prisma.mealFoodItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealFoodItemDeleteManyArgs>(args?: SelectSubset<T, MealFoodItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealFoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealFoodItems
     * const mealFoodItem = await prisma.mealFoodItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealFoodItemUpdateManyArgs>(args: SelectSubset<T, MealFoodItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealFoodItems and returns the data updated in the database.
     * @param {MealFoodItemUpdateManyAndReturnArgs} args - Arguments to update many MealFoodItems.
     * @example
     * // Update many MealFoodItems
     * const mealFoodItem = await prisma.mealFoodItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MealFoodItems and only return the `id`
     * const mealFoodItemWithIdOnly = await prisma.mealFoodItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MealFoodItemUpdateManyAndReturnArgs>(args: SelectSubset<T, MealFoodItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MealFoodItem.
     * @param {MealFoodItemUpsertArgs} args - Arguments to update or create a MealFoodItem.
     * @example
     * // Update or create a MealFoodItem
     * const mealFoodItem = await prisma.mealFoodItem.upsert({
     *   create: {
     *     // ... data to create a MealFoodItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealFoodItem we want to update
     *   }
     * })
     */
    upsert<T extends MealFoodItemUpsertArgs>(args: SelectSubset<T, MealFoodItemUpsertArgs<ExtArgs>>): Prisma__MealFoodItemClient<$Result.GetResult<Prisma.$MealFoodItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MealFoodItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemCountArgs} args - Arguments to filter MealFoodItems to count.
     * @example
     * // Count the number of MealFoodItems
     * const count = await prisma.mealFoodItem.count({
     *   where: {
     *     // ... the filter for the MealFoodItems we want to count
     *   }
     * })
    **/
    count<T extends MealFoodItemCountArgs>(
      args?: Subset<T, MealFoodItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealFoodItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealFoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealFoodItemAggregateArgs>(args: Subset<T, MealFoodItemAggregateArgs>): Prisma.PrismaPromise<GetMealFoodItemAggregateType<T>>

    /**
     * Group by MealFoodItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealFoodItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealFoodItemGroupByArgs['orderBy'] }
        : { orderBy?: MealFoodItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealFoodItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealFoodItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealFoodItem model
   */
  readonly fields: MealFoodItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealFoodItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealFoodItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    foodItem<T extends FoodItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodItemDefaultArgs<ExtArgs>>): Prisma__FoodItemClient<$Result.GetResult<Prisma.$FoodItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealFoodItem model
   */
  interface MealFoodItemFieldRefs {
    readonly id: FieldRef<"MealFoodItem", 'String'>
    readonly mealId: FieldRef<"MealFoodItem", 'String'>
    readonly foodItemId: FieldRef<"MealFoodItem", 'String'>
    readonly quantity: FieldRef<"MealFoodItem", 'Int'>
    readonly createdAt: FieldRef<"MealFoodItem", 'DateTime'>
    readonly updatedAt: FieldRef<"MealFoodItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MealFoodItem findUnique
   */
  export type MealFoodItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter, which MealFoodItem to fetch.
     */
    where: MealFoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem findUniqueOrThrow
   */
  export type MealFoodItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter, which MealFoodItem to fetch.
     */
    where: MealFoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem findFirst
   */
  export type MealFoodItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter, which MealFoodItem to fetch.
     */
    where?: MealFoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoodItems to fetch.
     */
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealFoodItems.
     */
    cursor?: MealFoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealFoodItems.
     */
    distinct?: MealFoodItemScalarFieldEnum | MealFoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem findFirstOrThrow
   */
  export type MealFoodItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter, which MealFoodItem to fetch.
     */
    where?: MealFoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoodItems to fetch.
     */
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealFoodItems.
     */
    cursor?: MealFoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoodItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealFoodItems.
     */
    distinct?: MealFoodItemScalarFieldEnum | MealFoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem findMany
   */
  export type MealFoodItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter, which MealFoodItems to fetch.
     */
    where?: MealFoodItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoodItems to fetch.
     */
    orderBy?: MealFoodItemOrderByWithRelationInput | MealFoodItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealFoodItems.
     */
    cursor?: MealFoodItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoodItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoodItems.
     */
    skip?: number
    distinct?: MealFoodItemScalarFieldEnum | MealFoodItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem create
   */
  export type MealFoodItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MealFoodItem.
     */
    data: XOR<MealFoodItemCreateInput, MealFoodItemUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem createMany
   */
  export type MealFoodItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealFoodItems.
     */
    data: MealFoodItemCreateManyInput | MealFoodItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealFoodItem createManyAndReturn
   */
  export type MealFoodItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * The data used to create many MealFoodItems.
     */
    data: MealFoodItemCreateManyInput | MealFoodItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealFoodItem update
   */
  export type MealFoodItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MealFoodItem.
     */
    data: XOR<MealFoodItemUpdateInput, MealFoodItemUncheckedUpdateInput>
    /**
     * Choose, which MealFoodItem to update.
     */
    where: MealFoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem updateMany
   */
  export type MealFoodItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealFoodItems.
     */
    data: XOR<MealFoodItemUpdateManyMutationInput, MealFoodItemUncheckedUpdateManyInput>
    /**
     * Filter which MealFoodItems to update
     */
    where?: MealFoodItemWhereInput
    /**
     * Limit how many MealFoodItems to update.
     */
    limit?: number
  }

  /**
   * MealFoodItem updateManyAndReturn
   */
  export type MealFoodItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * The data used to update MealFoodItems.
     */
    data: XOR<MealFoodItemUpdateManyMutationInput, MealFoodItemUncheckedUpdateManyInput>
    /**
     * Filter which MealFoodItems to update
     */
    where?: MealFoodItemWhereInput
    /**
     * Limit how many MealFoodItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealFoodItem upsert
   */
  export type MealFoodItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MealFoodItem to update in case it exists.
     */
    where: MealFoodItemWhereUniqueInput
    /**
     * In case the MealFoodItem found by the `where` argument doesn't exist, create a new MealFoodItem with this data.
     */
    create: XOR<MealFoodItemCreateInput, MealFoodItemUncheckedCreateInput>
    /**
     * In case the MealFoodItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealFoodItemUpdateInput, MealFoodItemUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem delete
   */
  export type MealFoodItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
    /**
     * Filter which MealFoodItem to delete.
     */
    where: MealFoodItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * MealFoodItem deleteMany
   */
  export type MealFoodItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealFoodItems to delete
     */
    where?: MealFoodItemWhereInput
    /**
     * Limit how many MealFoodItems to delete.
     */
    limit?: number
  }

  /**
   * MealFoodItem without action
   */
  export type MealFoodItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFoodItem
     */
    select?: MealFoodItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealFoodItem
     */
    omit?: MealFoodItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodItemInclude<ExtArgs> | null
  }


  /**
   * Model UserMeal
   */

  export type AggregateUserMeal = {
    _count: UserMealCountAggregateOutputType | null
    _min: UserMealMinAggregateOutputType | null
    _max: UserMealMaxAggregateOutputType | null
  }

  export type UserMealMinAggregateOutputType = {
    id: string | null
    mealId: string | null
    userId: string | null
    dateConsumed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMealMaxAggregateOutputType = {
    id: string | null
    mealId: string | null
    userId: string | null
    dateConsumed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMealCountAggregateOutputType = {
    id: number
    mealId: number
    userId: number
    dateConsumed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMealMinAggregateInputType = {
    id?: true
    mealId?: true
    userId?: true
    dateConsumed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMealMaxAggregateInputType = {
    id?: true
    mealId?: true
    userId?: true
    dateConsumed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMealCountAggregateInputType = {
    id?: true
    mealId?: true
    userId?: true
    dateConsumed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMeal to aggregate.
     */
    where?: UserMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMeals to fetch.
     */
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMeals
    **/
    _count?: true | UserMealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMealMaxAggregateInputType
  }

  export type GetUserMealAggregateType<T extends UserMealAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMeal[P]>
      : GetScalarType<T[P], AggregateUserMeal[P]>
  }




  export type UserMealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMealWhereInput
    orderBy?: UserMealOrderByWithAggregationInput | UserMealOrderByWithAggregationInput[]
    by: UserMealScalarFieldEnum[] | UserMealScalarFieldEnum
    having?: UserMealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMealCountAggregateInputType | true
    _min?: UserMealMinAggregateInputType
    _max?: UserMealMaxAggregateInputType
  }

  export type UserMealGroupByOutputType = {
    id: string
    mealId: string
    userId: string
    dateConsumed: Date
    createdAt: Date
    updatedAt: Date
    _count: UserMealCountAggregateOutputType | null
    _min: UserMealMinAggregateOutputType | null
    _max: UserMealMaxAggregateOutputType | null
  }

  type GetUserMealGroupByPayload<T extends UserMealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMealGroupByOutputType[P]>
            : GetScalarType<T[P], UserMealGroupByOutputType[P]>
        }
      >
    >


  export type UserMealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    userId?: boolean
    dateConsumed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMeal"]>

  export type UserMealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    userId?: boolean
    dateConsumed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMeal"]>

  export type UserMealSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    userId?: boolean
    dateConsumed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMeal"]>

  export type UserMealSelectScalar = {
    id?: boolean
    mealId?: boolean
    userId?: boolean
    dateConsumed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserMealOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mealId" | "userId" | "dateConsumed" | "createdAt" | "updatedAt", ExtArgs["result"]["userMeal"]>
  export type UserMealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMealIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMeal"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealId: string
      userId: string
      dateConsumed: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMeal"]>
    composites: {}
  }

  type UserMealGetPayload<S extends boolean | null | undefined | UserMealDefaultArgs> = $Result.GetResult<Prisma.$UserMealPayload, S>

  type UserMealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserMealFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserMealCountAggregateInputType | true
    }

  export interface UserMealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMeal'], meta: { name: 'UserMeal' } }
    /**
     * Find zero or one UserMeal that matches the filter.
     * @param {UserMealFindUniqueArgs} args - Arguments to find a UserMeal
     * @example
     * // Get one UserMeal
     * const userMeal = await prisma.userMeal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMealFindUniqueArgs>(args: SelectSubset<T, UserMealFindUniqueArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserMeal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserMealFindUniqueOrThrowArgs} args - Arguments to find a UserMeal
     * @example
     * // Get one UserMeal
     * const userMeal = await prisma.userMeal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMealFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMeal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealFindFirstArgs} args - Arguments to find a UserMeal
     * @example
     * // Get one UserMeal
     * const userMeal = await prisma.userMeal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMealFindFirstArgs>(args?: SelectSubset<T, UserMealFindFirstArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMeal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealFindFirstOrThrowArgs} args - Arguments to find a UserMeal
     * @example
     * // Get one UserMeal
     * const userMeal = await prisma.userMeal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMealFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMealFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserMeals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMeals
     * const userMeals = await prisma.userMeal.findMany()
     * 
     * // Get first 10 UserMeals
     * const userMeals = await prisma.userMeal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMealWithIdOnly = await prisma.userMeal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMealFindManyArgs>(args?: SelectSubset<T, UserMealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserMeal.
     * @param {UserMealCreateArgs} args - Arguments to create a UserMeal.
     * @example
     * // Create one UserMeal
     * const UserMeal = await prisma.userMeal.create({
     *   data: {
     *     // ... data to create a UserMeal
     *   }
     * })
     * 
     */
    create<T extends UserMealCreateArgs>(args: SelectSubset<T, UserMealCreateArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserMeals.
     * @param {UserMealCreateManyArgs} args - Arguments to create many UserMeals.
     * @example
     * // Create many UserMeals
     * const userMeal = await prisma.userMeal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMealCreateManyArgs>(args?: SelectSubset<T, UserMealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMeals and returns the data saved in the database.
     * @param {UserMealCreateManyAndReturnArgs} args - Arguments to create many UserMeals.
     * @example
     * // Create many UserMeals
     * const userMeal = await prisma.userMeal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMeals and only return the `id`
     * const userMealWithIdOnly = await prisma.userMeal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMealCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserMeal.
     * @param {UserMealDeleteArgs} args - Arguments to delete one UserMeal.
     * @example
     * // Delete one UserMeal
     * const UserMeal = await prisma.userMeal.delete({
     *   where: {
     *     // ... filter to delete one UserMeal
     *   }
     * })
     * 
     */
    delete<T extends UserMealDeleteArgs>(args: SelectSubset<T, UserMealDeleteArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserMeal.
     * @param {UserMealUpdateArgs} args - Arguments to update one UserMeal.
     * @example
     * // Update one UserMeal
     * const userMeal = await prisma.userMeal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMealUpdateArgs>(args: SelectSubset<T, UserMealUpdateArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserMeals.
     * @param {UserMealDeleteManyArgs} args - Arguments to filter UserMeals to delete.
     * @example
     * // Delete a few UserMeals
     * const { count } = await prisma.userMeal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMealDeleteManyArgs>(args?: SelectSubset<T, UserMealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMeals
     * const userMeal = await prisma.userMeal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMealUpdateManyArgs>(args: SelectSubset<T, UserMealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMeals and returns the data updated in the database.
     * @param {UserMealUpdateManyAndReturnArgs} args - Arguments to update many UserMeals.
     * @example
     * // Update many UserMeals
     * const userMeal = await prisma.userMeal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserMeals and only return the `id`
     * const userMealWithIdOnly = await prisma.userMeal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserMealUpdateManyAndReturnArgs>(args: SelectSubset<T, UserMealUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserMeal.
     * @param {UserMealUpsertArgs} args - Arguments to update or create a UserMeal.
     * @example
     * // Update or create a UserMeal
     * const userMeal = await prisma.userMeal.upsert({
     *   create: {
     *     // ... data to create a UserMeal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMeal we want to update
     *   }
     * })
     */
    upsert<T extends UserMealUpsertArgs>(args: SelectSubset<T, UserMealUpsertArgs<ExtArgs>>): Prisma__UserMealClient<$Result.GetResult<Prisma.$UserMealPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealCountArgs} args - Arguments to filter UserMeals to count.
     * @example
     * // Count the number of UserMeals
     * const count = await prisma.userMeal.count({
     *   where: {
     *     // ... the filter for the UserMeals we want to count
     *   }
     * })
    **/
    count<T extends UserMealCountArgs>(
      args?: Subset<T, UserMealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMealAggregateArgs>(args: Subset<T, UserMealAggregateArgs>): Prisma.PrismaPromise<GetUserMealAggregateType<T>>

    /**
     * Group by UserMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMealGroupByArgs['orderBy'] }
        : { orderBy?: UserMealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMeal model
   */
  readonly fields: UserMealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMeal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMeal model
   */
  interface UserMealFieldRefs {
    readonly id: FieldRef<"UserMeal", 'String'>
    readonly mealId: FieldRef<"UserMeal", 'String'>
    readonly userId: FieldRef<"UserMeal", 'String'>
    readonly dateConsumed: FieldRef<"UserMeal", 'DateTime'>
    readonly createdAt: FieldRef<"UserMeal", 'DateTime'>
    readonly updatedAt: FieldRef<"UserMeal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMeal findUnique
   */
  export type UserMealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter, which UserMeal to fetch.
     */
    where: UserMealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal findUniqueOrThrow
   */
  export type UserMealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter, which UserMeal to fetch.
     */
    where: UserMealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal findFirst
   */
  export type UserMealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter, which UserMeal to fetch.
     */
    where?: UserMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMeals to fetch.
     */
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMeals.
     */
    cursor?: UserMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMeals.
     */
    distinct?: UserMealScalarFieldEnum | UserMealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal findFirstOrThrow
   */
  export type UserMealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter, which UserMeal to fetch.
     */
    where?: UserMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMeals to fetch.
     */
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMeals.
     */
    cursor?: UserMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMeals.
     */
    distinct?: UserMealScalarFieldEnum | UserMealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal findMany
   */
  export type UserMealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter, which UserMeals to fetch.
     */
    where?: UserMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMeals to fetch.
     */
    orderBy?: UserMealOrderByWithRelationInput | UserMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMeals.
     */
    cursor?: UserMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMeals.
     */
    skip?: number
    distinct?: UserMealScalarFieldEnum | UserMealScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal create
   */
  export type UserMealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMeal.
     */
    data: XOR<UserMealCreateInput, UserMealUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal createMany
   */
  export type UserMealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMeals.
     */
    data: UserMealCreateManyInput | UserMealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMeal createManyAndReturn
   */
  export type UserMealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * The data used to create many UserMeals.
     */
    data: UserMealCreateManyInput | UserMealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMeal update
   */
  export type UserMealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMeal.
     */
    data: XOR<UserMealUpdateInput, UserMealUncheckedUpdateInput>
    /**
     * Choose, which UserMeal to update.
     */
    where: UserMealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal updateMany
   */
  export type UserMealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMeals.
     */
    data: XOR<UserMealUpdateManyMutationInput, UserMealUncheckedUpdateManyInput>
    /**
     * Filter which UserMeals to update
     */
    where?: UserMealWhereInput
    /**
     * Limit how many UserMeals to update.
     */
    limit?: number
  }

  /**
   * UserMeal updateManyAndReturn
   */
  export type UserMealUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * The data used to update UserMeals.
     */
    data: XOR<UserMealUpdateManyMutationInput, UserMealUncheckedUpdateManyInput>
    /**
     * Filter which UserMeals to update
     */
    where?: UserMealWhereInput
    /**
     * Limit how many UserMeals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMeal upsert
   */
  export type UserMealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMeal to update in case it exists.
     */
    where: UserMealWhereUniqueInput
    /**
     * In case the UserMeal found by the `where` argument doesn't exist, create a new UserMeal with this data.
     */
    create: XOR<UserMealCreateInput, UserMealUncheckedCreateInput>
    /**
     * In case the UserMeal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMealUpdateInput, UserMealUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal delete
   */
  export type UserMealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
    /**
     * Filter which UserMeal to delete.
     */
    where: UserMealWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * UserMeal deleteMany
   */
  export type UserMealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMeals to delete
     */
    where?: UserMealWhereInput
    /**
     * Limit how many UserMeals to delete.
     */
    limit?: number
  }

  /**
   * UserMeal without action
   */
  export type UserMealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMeal
     */
    select?: UserMealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMeal
     */
    omit?: UserMealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMealInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    publicId: string | null
    description: string | null
    altText: string | null
    mealId: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    publicId: string | null
    description: string | null
    altText: string | null
    mealId: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    publicId: number
    description: number
    altText: number
    mealId: number
    isPrimary: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    publicId?: true
    description?: true
    altText?: true
    mealId?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    publicId?: true
    description?: true
    altText?: true
    mealId?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    publicId?: true
    description?: true
    altText?: true
    mealId?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    url: string
    publicId: string
    description: string | null
    altText: string | null
    mealId: string | null
    isPrimary: boolean
    createdAt: Date
    updatedAt: Date
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    publicId?: boolean
    description?: boolean
    altText?: boolean
    mealId?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | Image$mealArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    publicId?: boolean
    description?: boolean
    altText?: boolean
    mealId?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | Image$mealArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    publicId?: boolean
    description?: boolean
    altText?: boolean
    mealId?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meal?: boolean | Image$mealArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
    publicId?: boolean
    description?: boolean
    altText?: boolean
    mealId?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "publicId" | "description" | "altText" | "mealId" | "isPrimary" | "createdAt" | "updatedAt", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | Image$mealArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | Image$mealArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | Image$mealArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      publicId: string
      description: string | null
      altText: string | null
      mealId: string | null
      isPrimary: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends Image$mealArgs<ExtArgs> = {}>(args?: Subset<T, Image$mealArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly publicId: FieldRef<"Image", 'String'>
    readonly description: FieldRef<"Image", 'String'>
    readonly altText: FieldRef<"Image", 'String'>
    readonly mealId: FieldRef<"Image", 'String'>
    readonly isPrimary: FieldRef<"Image", 'Boolean'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image.meal
   */
  export type Image$mealArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meal
     */
    omit?: MealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    where?: MealWhereInput
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    googleId: 'googleId',
    firstName: 'firstName',
    lastName: 'lastName',
    imgUrl: 'imgUrl',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RelationLoadStrategy: {
    query: 'query',
    join: 'join'
  };

  export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    youtubeUrl: 'youtubeUrl',
    notes: 'notes',
    isCompounded: 'isCompounded',
    type: 'type',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const MuscleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MuscleScalarFieldEnum = (typeof MuscleScalarFieldEnum)[keyof typeof MuscleScalarFieldEnum]


  export const MuscleAliasScalarFieldEnum: {
    id: 'id',
    name: 'name',
    language: 'language',
    muscleId: 'muscleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MuscleAliasScalarFieldEnum = (typeof MuscleAliasScalarFieldEnum)[keyof typeof MuscleAliasScalarFieldEnum]


  export const EquipmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquipmentScalarFieldEnum = (typeof EquipmentScalarFieldEnum)[keyof typeof EquipmentScalarFieldEnum]


  export const EquipmentCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EquipmentCategoryScalarFieldEnum = (typeof EquipmentCategoryScalarFieldEnum)[keyof typeof EquipmentCategoryScalarFieldEnum]


  export const UserCardioSetScalarFieldEnum: {
    id: 'id',
    warmupTime: 'warmupTime',
    workTime: 'workTime',
    avgHeartRate: 'avgHeartRate',
    avgSpeed: 'avgSpeed',
    distance: 'distance',
    order: 'order',
    isCompleted: 'isCompleted',
    caloriesBurned: 'caloriesBurned',
    userWorkoutExerciseId: 'userWorkoutExerciseId',
    skippedReason: 'skippedReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserCardioSetScalarFieldEnum = (typeof UserCardioSetScalarFieldEnum)[keyof typeof UserCardioSetScalarFieldEnum]


  export const UserStrengthSetScalarFieldEnum: {
    id: 'id',
    reps: 'reps',
    weight: 'weight',
    isBodyWeight: 'isBodyWeight',
    restTime: 'restTime',
    order: 'order',
    isCompleted: 'isCompleted',
    isWarmup: 'isWarmup',
    isMuscleFailure: 'isMuscleFailure',
    isJointPain: 'isJointPain',
    skippedReason: 'skippedReason',
    userWorkoutExerciseId: 'userWorkoutExerciseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStrengthSetScalarFieldEnum = (typeof UserStrengthSetScalarFieldEnum)[keyof typeof UserStrengthSetScalarFieldEnum]


  export const ProgramScalarFieldEnum: {
    id: 'id',
    name: 'name',
    notes: 'notes',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


  export const ProgramWorkoutScalarFieldEnum: {
    id: 'id',
    programId: 'programId',
    workoutId: 'workoutId',
    workoutLevel: 'workoutLevel',
    workoutGoal: 'workoutGoal',
    daysOfWeek: 'daysOfWeek',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgramWorkoutScalarFieldEnum = (typeof ProgramWorkoutScalarFieldEnum)[keyof typeof ProgramWorkoutScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isTemplate: 'isTemplate',
    notes: 'notes',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const WorkoutExerciseScalarFieldEnum: {
    id: 'id',
    order: 'order',
    notes: 'notes',
    hasWarmup: 'hasWarmup',
    isBodyWeight: 'isBodyWeight',
    restTime: 'restTime',
    exerciseId: 'exerciseId',
    workoutId: 'workoutId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkoutExerciseScalarFieldEnum = (typeof WorkoutExerciseScalarFieldEnum)[keyof typeof WorkoutExerciseScalarFieldEnum]


  export const UserWorkoutExerciseScalarFieldEnum: {
    id: 'id',
    skippedReason: 'skippedReason',
    workoutExerciseId: 'workoutExerciseId',
    userWorkoutId: 'userWorkoutId'
  };

  export type UserWorkoutExerciseScalarFieldEnum = (typeof UserWorkoutExerciseScalarFieldEnum)[keyof typeof UserWorkoutExerciseScalarFieldEnum]


  export const UserWorkoutScalarFieldEnum: {
    id: 'id',
    dateCompleted: 'dateCompleted',
    ownerId: 'ownerId',
    programId: 'programId',
    workoutId: 'workoutId',
    createdAt: 'createdAt'
  };

  export type UserWorkoutScalarFieldEnum = (typeof UserWorkoutScalarFieldEnum)[keyof typeof UserWorkoutScalarFieldEnum]


  export const FoodItemScalarFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    name: 'name',
    servingSize: 'servingSize',
    calories: 'calories',
    proteins: 'proteins',
    carbohydrates: 'carbohydrates',
    sugars: 'sugars',
    fat: 'fat',
    saturatedFat: 'saturatedFat',
    fiber: 'fiber',
    salt: 'salt',
    cholesterol: 'cholesterol',
    brandId: 'brandId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodItemScalarFieldEnum = (typeof FoodItemScalarFieldEnum)[keyof typeof FoodItemScalarFieldEnum]


  export const FoodItemLabelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodItemLabelScalarFieldEnum = (typeof FoodItemLabelScalarFieldEnum)[keyof typeof FoodItemLabelScalarFieldEnum]


  export const FoodItemImgScalarFieldEnum: {
    id: 'id',
    url: 'url',
    altText: 'altText',
    foodItemId: 'foodItemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodItemImgScalarFieldEnum = (typeof FoodItemImgScalarFieldEnum)[keyof typeof FoodItemImgScalarFieldEnum]


  export const FoodItemBrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodItemBrandScalarFieldEnum = (typeof FoodItemBrandScalarFieldEnum)[keyof typeof FoodItemBrandScalarFieldEnum]


  export const FoodItemCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodItemCategoryScalarFieldEnum = (typeof FoodItemCategoryScalarFieldEnum)[keyof typeof FoodItemCategoryScalarFieldEnum]


  export const MealScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mealType: 'mealType',
    ownerId: 'ownerId',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MealScalarFieldEnum = (typeof MealScalarFieldEnum)[keyof typeof MealScalarFieldEnum]


  export const MealFoodItemScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    foodItemId: 'foodItemId',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MealFoodItemScalarFieldEnum = (typeof MealFoodItemScalarFieldEnum)[keyof typeof MealFoodItemScalarFieldEnum]


  export const UserMealScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    userId: 'userId',
    dateConsumed: 'dateConsumed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMealScalarFieldEnum = (typeof UserMealScalarFieldEnum)[keyof typeof UserMealScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    publicId: 'publicId',
    description: 'description',
    altText: 'altText',
    mealId: 'mealId',
    isPrimary: 'isPrimary',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ExerciseType'
   */
  export type EnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType'>
    


  /**
   * Reference to a field of type 'ExerciseType[]'
   */
  export type ListEnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'WorkoutLevel'
   */
  export type EnumWorkoutLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkoutLevel'>
    


  /**
   * Reference to a field of type 'WorkoutLevel[]'
   */
  export type ListEnumWorkoutLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkoutLevel[]'>
    


  /**
   * Reference to a field of type 'WorkoutGoal'
   */
  export type EnumWorkoutGoalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkoutGoal'>
    


  /**
   * Reference to a field of type 'WorkoutGoal[]'
   */
  export type ListEnumWorkoutGoalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkoutGoal[]'>
    


  /**
   * Reference to a field of type 'DaysOfWeek[]'
   */
  export type ListEnumDaysOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DaysOfWeek[]'>
    


  /**
   * Reference to a field of type 'DaysOfWeek'
   */
  export type EnumDaysOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DaysOfWeek'>
    


  /**
   * Reference to a field of type 'MealType'
   */
  export type EnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType'>
    


  /**
   * Reference to a field of type 'MealType[]'
   */
  export type ListEnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    imgUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    programs?: ProgramListRelationFilter
    workouts?: WorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    meals?: MealListRelationFilter
    userMeals?: UserMealListRelationFilter
    exercises?: ExerciseListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    programs?: ProgramOrderByRelationAggregateInput
    workouts?: WorkoutOrderByRelationAggregateInput
    userWorkout?: UserWorkoutOrderByRelationAggregateInput
    meals?: MealOrderByRelationAggregateInput
    userMeals?: UserMealOrderByRelationAggregateInput
    exercises?: ExerciseOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    imgUrl?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    programs?: ProgramListRelationFilter
    workouts?: WorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    meals?: MealListRelationFilter
    userMeals?: UserMealListRelationFilter
    exercises?: ExerciseListRelationFilter
  }, "id" | "email" | "googleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    imgUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    youtubeUrl?: StringFilter<"Exercise"> | string
    notes?: StringNullableFilter<"Exercise"> | string | null
    isCompounded?: BoolFilter<"Exercise"> | boolean
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    ownerId?: StringNullableFilter<"Exercise"> | string | null
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    equipment?: EquipmentListRelationFilter
    muscles?: MuscleListRelationFilter
    workoutExercises?: WorkoutExerciseListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    notes?: SortOrderInput | SortOrder
    isCompounded?: SortOrder
    type?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    equipment?: EquipmentOrderByRelationAggregateInput
    muscles?: MuscleOrderByRelationAggregateInput
    workoutExercises?: WorkoutExerciseOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    youtubeUrl?: StringFilter<"Exercise"> | string
    notes?: StringNullableFilter<"Exercise"> | string | null
    isCompounded?: BoolFilter<"Exercise"> | boolean
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    ownerId?: StringNullableFilter<"Exercise"> | string | null
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    equipment?: EquipmentListRelationFilter
    muscles?: MuscleListRelationFilter
    workoutExercises?: WorkoutExerciseListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "name">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    notes?: SortOrderInput | SortOrder
    isCompounded?: SortOrder
    type?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    youtubeUrl?: StringWithAggregatesFilter<"Exercise"> | string
    notes?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    isCompounded?: BoolWithAggregatesFilter<"Exercise"> | boolean
    type?: EnumExerciseTypeWithAggregatesFilter<"Exercise"> | $Enums.ExerciseType
    ownerId?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
  }

  export type MuscleWhereInput = {
    AND?: MuscleWhereInput | MuscleWhereInput[]
    OR?: MuscleWhereInput[]
    NOT?: MuscleWhereInput | MuscleWhereInput[]
    id?: StringFilter<"Muscle"> | string
    name?: StringFilter<"Muscle"> | string
    order?: IntFilter<"Muscle"> | number
    createdAt?: DateTimeFilter<"Muscle"> | Date | string
    updatedAt?: DateTimeFilter<"Muscle"> | Date | string
    exercises?: ExerciseListRelationFilter
    aliases?: MuscleAliasListRelationFilter
  }

  export type MuscleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    aliases?: MuscleAliasOrderByRelationAggregateInput
  }

  export type MuscleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: MuscleWhereInput | MuscleWhereInput[]
    OR?: MuscleWhereInput[]
    NOT?: MuscleWhereInput | MuscleWhereInput[]
    order?: IntFilter<"Muscle"> | number
    createdAt?: DateTimeFilter<"Muscle"> | Date | string
    updatedAt?: DateTimeFilter<"Muscle"> | Date | string
    exercises?: ExerciseListRelationFilter
    aliases?: MuscleAliasListRelationFilter
  }, "id" | "name">

  export type MuscleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MuscleCountOrderByAggregateInput
    _avg?: MuscleAvgOrderByAggregateInput
    _max?: MuscleMaxOrderByAggregateInput
    _min?: MuscleMinOrderByAggregateInput
    _sum?: MuscleSumOrderByAggregateInput
  }

  export type MuscleScalarWhereWithAggregatesInput = {
    AND?: MuscleScalarWhereWithAggregatesInput | MuscleScalarWhereWithAggregatesInput[]
    OR?: MuscleScalarWhereWithAggregatesInput[]
    NOT?: MuscleScalarWhereWithAggregatesInput | MuscleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Muscle"> | string
    name?: StringWithAggregatesFilter<"Muscle"> | string
    order?: IntWithAggregatesFilter<"Muscle"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Muscle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Muscle"> | Date | string
  }

  export type MuscleAliasWhereInput = {
    AND?: MuscleAliasWhereInput | MuscleAliasWhereInput[]
    OR?: MuscleAliasWhereInput[]
    NOT?: MuscleAliasWhereInput | MuscleAliasWhereInput[]
    id?: StringFilter<"MuscleAlias"> | string
    name?: StringFilter<"MuscleAlias"> | string
    language?: StringNullableFilter<"MuscleAlias"> | string | null
    muscleId?: StringFilter<"MuscleAlias"> | string
    createdAt?: DateTimeFilter<"MuscleAlias"> | Date | string
    updatedAt?: DateTimeFilter<"MuscleAlias"> | Date | string
    muscle?: XOR<MuscleScalarRelationFilter, MuscleWhereInput>
  }

  export type MuscleAliasOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    language?: SortOrderInput | SortOrder
    muscleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    muscle?: MuscleOrderByWithRelationInput
  }

  export type MuscleAliasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: MuscleAliasWhereInput | MuscleAliasWhereInput[]
    OR?: MuscleAliasWhereInput[]
    NOT?: MuscleAliasWhereInput | MuscleAliasWhereInput[]
    language?: StringNullableFilter<"MuscleAlias"> | string | null
    muscleId?: StringFilter<"MuscleAlias"> | string
    createdAt?: DateTimeFilter<"MuscleAlias"> | Date | string
    updatedAt?: DateTimeFilter<"MuscleAlias"> | Date | string
    muscle?: XOR<MuscleScalarRelationFilter, MuscleWhereInput>
  }, "id" | "name">

  export type MuscleAliasOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    language?: SortOrderInput | SortOrder
    muscleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MuscleAliasCountOrderByAggregateInput
    _max?: MuscleAliasMaxOrderByAggregateInput
    _min?: MuscleAliasMinOrderByAggregateInput
  }

  export type MuscleAliasScalarWhereWithAggregatesInput = {
    AND?: MuscleAliasScalarWhereWithAggregatesInput | MuscleAliasScalarWhereWithAggregatesInput[]
    OR?: MuscleAliasScalarWhereWithAggregatesInput[]
    NOT?: MuscleAliasScalarWhereWithAggregatesInput | MuscleAliasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MuscleAlias"> | string
    name?: StringWithAggregatesFilter<"MuscleAlias"> | string
    language?: StringNullableWithAggregatesFilter<"MuscleAlias"> | string | null
    muscleId?: StringWithAggregatesFilter<"MuscleAlias"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MuscleAlias"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MuscleAlias"> | Date | string
  }

  export type EquipmentWhereInput = {
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    id?: StringFilter<"Equipment"> | string
    name?: StringFilter<"Equipment"> | string
    createdAt?: DateTimeFilter<"Equipment"> | Date | string
    updatedAt?: DateTimeFilter<"Equipment"> | Date | string
    exercises?: ExerciseListRelationFilter
    categories?: EquipmentCategoryListRelationFilter
  }

  export type EquipmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    categories?: EquipmentCategoryOrderByRelationAggregateInput
  }

  export type EquipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    createdAt?: DateTimeFilter<"Equipment"> | Date | string
    updatedAt?: DateTimeFilter<"Equipment"> | Date | string
    exercises?: ExerciseListRelationFilter
    categories?: EquipmentCategoryListRelationFilter
  }, "id" | "name">

  export type EquipmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquipmentCountOrderByAggregateInput
    _max?: EquipmentMaxOrderByAggregateInput
    _min?: EquipmentMinOrderByAggregateInput
  }

  export type EquipmentScalarWhereWithAggregatesInput = {
    AND?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    OR?: EquipmentScalarWhereWithAggregatesInput[]
    NOT?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Equipment"> | string
    name?: StringWithAggregatesFilter<"Equipment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Equipment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Equipment"> | Date | string
  }

  export type EquipmentCategoryWhereInput = {
    AND?: EquipmentCategoryWhereInput | EquipmentCategoryWhereInput[]
    OR?: EquipmentCategoryWhereInput[]
    NOT?: EquipmentCategoryWhereInput | EquipmentCategoryWhereInput[]
    id?: StringFilter<"EquipmentCategory"> | string
    name?: StringFilter<"EquipmentCategory"> | string
    createdAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
    updatedAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
    equipments?: EquipmentListRelationFilter
  }

  export type EquipmentCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    equipments?: EquipmentOrderByRelationAggregateInput
  }

  export type EquipmentCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: EquipmentCategoryWhereInput | EquipmentCategoryWhereInput[]
    OR?: EquipmentCategoryWhereInput[]
    NOT?: EquipmentCategoryWhereInput | EquipmentCategoryWhereInput[]
    createdAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
    updatedAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
    equipments?: EquipmentListRelationFilter
  }, "id" | "name">

  export type EquipmentCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EquipmentCategoryCountOrderByAggregateInput
    _max?: EquipmentCategoryMaxOrderByAggregateInput
    _min?: EquipmentCategoryMinOrderByAggregateInput
  }

  export type EquipmentCategoryScalarWhereWithAggregatesInput = {
    AND?: EquipmentCategoryScalarWhereWithAggregatesInput | EquipmentCategoryScalarWhereWithAggregatesInput[]
    OR?: EquipmentCategoryScalarWhereWithAggregatesInput[]
    NOT?: EquipmentCategoryScalarWhereWithAggregatesInput | EquipmentCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EquipmentCategory"> | string
    name?: StringWithAggregatesFilter<"EquipmentCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EquipmentCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EquipmentCategory"> | Date | string
  }

  export type UserCardioSetWhereInput = {
    AND?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    OR?: UserCardioSetWhereInput[]
    NOT?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    id?: StringFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    caloriesBurned?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }

  export type UserCardioSetOrderByWithRelationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    workTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    caloriesBurned?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userWorkoutExercise?: UserWorkoutExerciseOrderByWithRelationInput
  }

  export type UserCardioSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    OR?: UserCardioSetWhereInput[]
    NOT?: UserCardioSetWhereInput | UserCardioSetWhereInput[]
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    caloriesBurned?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }, "id">

  export type UserCardioSetOrderByWithAggregationInput = {
    id?: SortOrder
    warmupTime?: SortOrderInput | SortOrder
    workTime?: SortOrderInput | SortOrder
    avgHeartRate?: SortOrderInput | SortOrder
    avgSpeed?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    caloriesBurned?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCardioSetCountOrderByAggregateInput
    _avg?: UserCardioSetAvgOrderByAggregateInput
    _max?: UserCardioSetMaxOrderByAggregateInput
    _min?: UserCardioSetMinOrderByAggregateInput
    _sum?: UserCardioSetSumOrderByAggregateInput
  }

  export type UserCardioSetScalarWhereWithAggregatesInput = {
    AND?: UserCardioSetScalarWhereWithAggregatesInput | UserCardioSetScalarWhereWithAggregatesInput[]
    OR?: UserCardioSetScalarWhereWithAggregatesInput[]
    NOT?: UserCardioSetScalarWhereWithAggregatesInput | UserCardioSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    order?: IntWithAggregatesFilter<"UserCardioSet"> | number
    isCompleted?: BoolWithAggregatesFilter<"UserCardioSet"> | boolean
    caloriesBurned?: IntNullableWithAggregatesFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringWithAggregatesFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableWithAggregatesFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserCardioSet"> | Date | string
  }

  export type UserStrengthSetWhereInput = {
    AND?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    OR?: UserStrengthSetWhereInput[]
    NOT?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    id?: StringFilter<"UserStrengthSet"> | string
    reps?: IntNullableFilter<"UserStrengthSet"> | number | null
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }

  export type UserStrengthSetOrderByWithRelationInput = {
    id?: SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userWorkoutExercise?: UserWorkoutExerciseOrderByWithRelationInput
  }

  export type UserStrengthSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    OR?: UserStrengthSetWhereInput[]
    NOT?: UserStrengthSetWhereInput | UserStrengthSetWhereInput[]
    reps?: IntNullableFilter<"UserStrengthSet"> | number | null
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    userWorkoutExercise?: XOR<UserWorkoutExerciseScalarRelationFilter, UserWorkoutExerciseWhereInput>
  }, "id">

  export type UserStrengthSetOrderByWithAggregationInput = {
    id?: SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStrengthSetCountOrderByAggregateInput
    _avg?: UserStrengthSetAvgOrderByAggregateInput
    _max?: UserStrengthSetMaxOrderByAggregateInput
    _min?: UserStrengthSetMinOrderByAggregateInput
    _sum?: UserStrengthSetSumOrderByAggregateInput
  }

  export type UserStrengthSetScalarWhereWithAggregatesInput = {
    AND?: UserStrengthSetScalarWhereWithAggregatesInput | UserStrengthSetScalarWhereWithAggregatesInput[]
    OR?: UserStrengthSetScalarWhereWithAggregatesInput[]
    NOT?: UserStrengthSetScalarWhereWithAggregatesInput | UserStrengthSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStrengthSet"> | string
    reps?: IntNullableWithAggregatesFilter<"UserStrengthSet"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    restTime?: IntWithAggregatesFilter<"UserStrengthSet"> | number
    order?: IntWithAggregatesFilter<"UserStrengthSet"> | number
    isCompleted?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolWithAggregatesFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableWithAggregatesFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringWithAggregatesFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStrengthSet"> | Date | string
  }

  export type ProgramWhereInput = {
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProgramOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    programWorkouts?: ProgramWorkoutOrderByRelationAggregateInput
    userWorkout?: UserWorkoutOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
  }

  export type ProgramWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkout?: UserWorkoutListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProgramOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgramCountOrderByAggregateInput
    _max?: ProgramMaxOrderByAggregateInput
    _min?: ProgramMinOrderByAggregateInput
  }

  export type ProgramScalarWhereWithAggregatesInput = {
    AND?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    OR?: ProgramScalarWhereWithAggregatesInput[]
    NOT?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Program"> | string
    name?: StringWithAggregatesFilter<"Program"> | string
    notes?: StringNullableWithAggregatesFilter<"Program"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Program"> | boolean
    ownerId?: StringWithAggregatesFilter<"Program"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
  }

  export type ProgramWorkoutWhereInput = {
    AND?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    OR?: ProgramWorkoutWhereInput[]
    NOT?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    id?: StringFilter<"ProgramWorkout"> | string
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    workoutLevel?: EnumWorkoutLevelFilter<"ProgramWorkout"> | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFilter<"ProgramWorkout"> | $Enums.WorkoutGoal
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
  }

  export type ProgramWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    workoutLevel?: SortOrder
    workoutGoal?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    program?: ProgramOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type ProgramWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    programId_workoutId?: ProgramWorkoutProgramIdWorkoutIdCompoundUniqueInput
    AND?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    OR?: ProgramWorkoutWhereInput[]
    NOT?: ProgramWorkoutWhereInput | ProgramWorkoutWhereInput[]
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    workoutLevel?: EnumWorkoutLevelFilter<"ProgramWorkout"> | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFilter<"ProgramWorkout"> | $Enums.WorkoutGoal
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
  }, "id" | "programId_workoutId">

  export type ProgramWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    workoutLevel?: SortOrder
    workoutGoal?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgramWorkoutCountOrderByAggregateInput
    _max?: ProgramWorkoutMaxOrderByAggregateInput
    _min?: ProgramWorkoutMinOrderByAggregateInput
  }

  export type ProgramWorkoutScalarWhereWithAggregatesInput = {
    AND?: ProgramWorkoutScalarWhereWithAggregatesInput | ProgramWorkoutScalarWhereWithAggregatesInput[]
    OR?: ProgramWorkoutScalarWhereWithAggregatesInput[]
    NOT?: ProgramWorkoutScalarWhereWithAggregatesInput | ProgramWorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    programId?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    workoutId?: StringWithAggregatesFilter<"ProgramWorkout"> | string
    workoutLevel?: EnumWorkoutLevelWithAggregatesFilter<"ProgramWorkout"> | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalWithAggregatesFilter<"ProgramWorkout"> | $Enums.WorkoutGoal
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeWithAggregatesFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProgramWorkout"> | Date | string
  }

  export type WorkoutWhereInput = {
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringNullableFilter<"Workout"> | string | null
    isTemplate?: BoolFilter<"Workout"> | boolean
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workoutExercises?: WorkoutExerciseListRelationFilter
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkouts?: UserWorkoutListRelationFilter
  }

  export type WorkoutOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    notes?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    workoutExercises?: WorkoutExerciseOrderByRelationAggregateInput
    programWorkouts?: ProgramWorkoutOrderByRelationAggregateInput
    userWorkouts?: UserWorkoutOrderByRelationAggregateInput
  }

  export type WorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    name?: StringNullableFilter<"Workout"> | string | null
    isTemplate?: BoolFilter<"Workout"> | boolean
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workoutExercises?: WorkoutExerciseListRelationFilter
    programWorkouts?: ProgramWorkoutListRelationFilter
    userWorkouts?: UserWorkoutListRelationFilter
  }, "id">

  export type WorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    notes?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkoutCountOrderByAggregateInput
    _max?: WorkoutMaxOrderByAggregateInput
    _min?: WorkoutMinOrderByAggregateInput
  }

  export type WorkoutScalarWhereWithAggregatesInput = {
    AND?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    OR?: WorkoutScalarWhereWithAggregatesInput[]
    NOT?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workout"> | string
    name?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    isTemplate?: BoolWithAggregatesFilter<"Workout"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    ownerId?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
  }

  export type WorkoutExerciseWhereInput = {
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    id?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    hasWarmup?: BoolFilter<"WorkoutExercise"> | boolean
    isBodyWeight?: BoolFilter<"WorkoutExercise"> | boolean
    restTime?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
  }

  export type WorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrderInput | SortOrder
    hasWarmup?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    exercise?: ExerciseOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
    userWorkoutExercises?: UserWorkoutExerciseOrderByRelationAggregateInput
  }

  export type WorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    hasWarmup?: BoolFilter<"WorkoutExercise"> | boolean
    isBodyWeight?: BoolFilter<"WorkoutExercise"> | boolean
    restTime?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, WorkoutWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
  }, "id">

  export type WorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrderInput | SortOrder
    hasWarmup?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkoutExerciseCountOrderByAggregateInput
    _avg?: WorkoutExerciseAvgOrderByAggregateInput
    _max?: WorkoutExerciseMaxOrderByAggregateInput
    _min?: WorkoutExerciseMinOrderByAggregateInput
    _sum?: WorkoutExerciseSumOrderByAggregateInput
  }

  export type WorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    order?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    notes?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    hasWarmup?: BoolWithAggregatesFilter<"WorkoutExercise"> | boolean
    isBodyWeight?: BoolWithAggregatesFilter<"WorkoutExercise"> | boolean
    restTime?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    exerciseId?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    workoutId?: StringWithAggregatesFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkoutExercise"> | Date | string
  }

  export type UserWorkoutExerciseWhereInput = {
    AND?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    OR?: UserWorkoutExerciseWhereInput[]
    NOT?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    id?: StringFilter<"UserWorkoutExercise"> | string
    skippedReason?: StringNullableFilter<"UserWorkoutExercise"> | string | null
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
    workoutExercise?: XOR<WorkoutExerciseScalarRelationFilter, WorkoutExerciseWhereInput>
    userWorkout?: XOR<UserWorkoutScalarRelationFilter, UserWorkoutWhereInput>
    userStrengthSets?: UserStrengthSetListRelationFilter
    userCardioSets?: UserCardioSetListRelationFilter
  }

  export type UserWorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
    workoutExercise?: WorkoutExerciseOrderByWithRelationInput
    userWorkout?: UserWorkoutOrderByWithRelationInput
    userStrengthSets?: UserStrengthSetOrderByRelationAggregateInput
    userCardioSets?: UserCardioSetOrderByRelationAggregateInput
  }

  export type UserWorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    OR?: UserWorkoutExerciseWhereInput[]
    NOT?: UserWorkoutExerciseWhereInput | UserWorkoutExerciseWhereInput[]
    skippedReason?: StringNullableFilter<"UserWorkoutExercise"> | string | null
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
    workoutExercise?: XOR<WorkoutExerciseScalarRelationFilter, WorkoutExerciseWhereInput>
    userWorkout?: XOR<UserWorkoutScalarRelationFilter, UserWorkoutWhereInput>
    userStrengthSets?: UserStrengthSetListRelationFilter
    userCardioSets?: UserCardioSetListRelationFilter
  }, "id">

  export type UserWorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    skippedReason?: SortOrderInput | SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
    _count?: UserWorkoutExerciseCountOrderByAggregateInput
    _max?: UserWorkoutExerciseMaxOrderByAggregateInput
    _min?: UserWorkoutExerciseMinOrderByAggregateInput
  }

  export type UserWorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: UserWorkoutExerciseScalarWhereWithAggregatesInput | UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: UserWorkoutExerciseScalarWhereWithAggregatesInput | UserWorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
    skippedReason?: StringNullableWithAggregatesFilter<"UserWorkoutExercise"> | string | null
    workoutExerciseId?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringWithAggregatesFilter<"UserWorkoutExercise"> | string
  }

  export type UserWorkoutWhereInput = {
    AND?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    OR?: UserWorkoutWhereInput[]
    NOT?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    id?: StringFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workout?: XOR<WorkoutNullableScalarRelationFilter, WorkoutWhereInput> | null
  }

  export type UserWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    dateCompleted?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    programId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    userWorkoutExercises?: UserWorkoutExerciseOrderByRelationAggregateInput
    program?: ProgramOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type UserWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    OR?: UserWorkoutWhereInput[]
    NOT?: UserWorkoutWhereInput | UserWorkoutWhereInput[]
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    userWorkoutExercises?: UserWorkoutExerciseListRelationFilter
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workout?: XOR<WorkoutNullableScalarRelationFilter, WorkoutWhereInput> | null
  }, "id">

  export type UserWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    dateCompleted?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    programId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserWorkoutCountOrderByAggregateInput
    _max?: UserWorkoutMaxOrderByAggregateInput
    _min?: UserWorkoutMinOrderByAggregateInput
  }

  export type UserWorkoutScalarWhereWithAggregatesInput = {
    AND?: UserWorkoutScalarWhereWithAggregatesInput | UserWorkoutScalarWhereWithAggregatesInput[]
    OR?: UserWorkoutScalarWhereWithAggregatesInput[]
    NOT?: UserWorkoutScalarWhereWithAggregatesInput | UserWorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableWithAggregatesFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringWithAggregatesFilter<"UserWorkout"> | string
    programId?: StringNullableWithAggregatesFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableWithAggregatesFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserWorkout"> | Date | string
  }

  export type FoodItemWhereInput = {
    AND?: FoodItemWhereInput | FoodItemWhereInput[]
    OR?: FoodItemWhereInput[]
    NOT?: FoodItemWhereInput | FoodItemWhereInput[]
    id?: StringFilter<"FoodItem"> | string
    barcode?: StringFilter<"FoodItem"> | string
    name?: StringFilter<"FoodItem"> | string
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    calories?: FloatNullableFilter<"FoodItem"> | number | null
    proteins?: FloatNullableFilter<"FoodItem"> | number | null
    carbohydrates?: FloatNullableFilter<"FoodItem"> | number | null
    sugars?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    saturatedFat?: FloatNullableFilter<"FoodItem"> | number | null
    fiber?: FloatNullableFilter<"FoodItem"> | number | null
    salt?: FloatNullableFilter<"FoodItem"> | number | null
    cholesterol?: FloatNullableFilter<"FoodItem"> | number | null
    brandId?: StringNullableFilter<"FoodItem"> | string | null
    createdAt?: DateTimeFilter<"FoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItem"> | Date | string
    brand?: XOR<FoodItemBrandNullableScalarRelationFilter, FoodItemBrandWhereInput> | null
    categories?: FoodItemCategoryListRelationFilter
    labels?: FoodItemLabelListRelationFilter
    mealFoodItem?: MealFoodItemListRelationFilter
    images?: FoodItemImgListRelationFilter
  }

  export type FoodItemOrderByWithRelationInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    servingSize?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    proteins?: SortOrderInput | SortOrder
    carbohydrates?: SortOrderInput | SortOrder
    sugars?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    saturatedFat?: SortOrderInput | SortOrder
    fiber?: SortOrderInput | SortOrder
    salt?: SortOrderInput | SortOrder
    cholesterol?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: FoodItemBrandOrderByWithRelationInput
    categories?: FoodItemCategoryOrderByRelationAggregateInput
    labels?: FoodItemLabelOrderByRelationAggregateInput
    mealFoodItem?: MealFoodItemOrderByRelationAggregateInput
    images?: FoodItemImgOrderByRelationAggregateInput
  }

  export type FoodItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    barcode?: string
    name?: string
    AND?: FoodItemWhereInput | FoodItemWhereInput[]
    OR?: FoodItemWhereInput[]
    NOT?: FoodItemWhereInput | FoodItemWhereInput[]
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    calories?: FloatNullableFilter<"FoodItem"> | number | null
    proteins?: FloatNullableFilter<"FoodItem"> | number | null
    carbohydrates?: FloatNullableFilter<"FoodItem"> | number | null
    sugars?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    saturatedFat?: FloatNullableFilter<"FoodItem"> | number | null
    fiber?: FloatNullableFilter<"FoodItem"> | number | null
    salt?: FloatNullableFilter<"FoodItem"> | number | null
    cholesterol?: FloatNullableFilter<"FoodItem"> | number | null
    brandId?: StringNullableFilter<"FoodItem"> | string | null
    createdAt?: DateTimeFilter<"FoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItem"> | Date | string
    brand?: XOR<FoodItemBrandNullableScalarRelationFilter, FoodItemBrandWhereInput> | null
    categories?: FoodItemCategoryListRelationFilter
    labels?: FoodItemLabelListRelationFilter
    mealFoodItem?: MealFoodItemListRelationFilter
    images?: FoodItemImgListRelationFilter
  }, "id" | "barcode" | "name">

  export type FoodItemOrderByWithAggregationInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    servingSize?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    proteins?: SortOrderInput | SortOrder
    carbohydrates?: SortOrderInput | SortOrder
    sugars?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    saturatedFat?: SortOrderInput | SortOrder
    fiber?: SortOrderInput | SortOrder
    salt?: SortOrderInput | SortOrder
    cholesterol?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodItemCountOrderByAggregateInput
    _avg?: FoodItemAvgOrderByAggregateInput
    _max?: FoodItemMaxOrderByAggregateInput
    _min?: FoodItemMinOrderByAggregateInput
    _sum?: FoodItemSumOrderByAggregateInput
  }

  export type FoodItemScalarWhereWithAggregatesInput = {
    AND?: FoodItemScalarWhereWithAggregatesInput | FoodItemScalarWhereWithAggregatesInput[]
    OR?: FoodItemScalarWhereWithAggregatesInput[]
    NOT?: FoodItemScalarWhereWithAggregatesInput | FoodItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodItem"> | string
    barcode?: StringWithAggregatesFilter<"FoodItem"> | string
    name?: StringWithAggregatesFilter<"FoodItem"> | string
    servingSize?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    calories?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    proteins?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    carbohydrates?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    sugars?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    fat?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    saturatedFat?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    fiber?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    salt?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    cholesterol?: FloatNullableWithAggregatesFilter<"FoodItem"> | number | null
    brandId?: StringNullableWithAggregatesFilter<"FoodItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FoodItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodItem"> | Date | string
  }

  export type FoodItemLabelWhereInput = {
    AND?: FoodItemLabelWhereInput | FoodItemLabelWhereInput[]
    OR?: FoodItemLabelWhereInput[]
    NOT?: FoodItemLabelWhereInput | FoodItemLabelWhereInput[]
    id?: StringFilter<"FoodItemLabel"> | string
    name?: StringFilter<"FoodItemLabel"> | string
    createdAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }

  export type FoodItemLabelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodItems?: FoodItemOrderByRelationAggregateInput
  }

  export type FoodItemLabelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: FoodItemLabelWhereInput | FoodItemLabelWhereInput[]
    OR?: FoodItemLabelWhereInput[]
    NOT?: FoodItemLabelWhereInput | FoodItemLabelWhereInput[]
    createdAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }, "id" | "name">

  export type FoodItemLabelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodItemLabelCountOrderByAggregateInput
    _max?: FoodItemLabelMaxOrderByAggregateInput
    _min?: FoodItemLabelMinOrderByAggregateInput
  }

  export type FoodItemLabelScalarWhereWithAggregatesInput = {
    AND?: FoodItemLabelScalarWhereWithAggregatesInput | FoodItemLabelScalarWhereWithAggregatesInput[]
    OR?: FoodItemLabelScalarWhereWithAggregatesInput[]
    NOT?: FoodItemLabelScalarWhereWithAggregatesInput | FoodItemLabelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodItemLabel"> | string
    name?: StringWithAggregatesFilter<"FoodItemLabel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodItemLabel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodItemLabel"> | Date | string
  }

  export type FoodItemImgWhereInput = {
    AND?: FoodItemImgWhereInput | FoodItemImgWhereInput[]
    OR?: FoodItemImgWhereInput[]
    NOT?: FoodItemImgWhereInput | FoodItemImgWhereInput[]
    id?: StringFilter<"FoodItemImg"> | string
    url?: StringFilter<"FoodItemImg"> | string
    altText?: StringNullableFilter<"FoodItemImg"> | string | null
    foodItemId?: StringFilter<"FoodItemImg"> | string
    createdAt?: DateTimeFilter<"FoodItemImg"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemImg"> | Date | string
    foodItem?: XOR<FoodItemScalarRelationFilter, FoodItemWhereInput>
  }

  export type FoodItemImgOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    foodItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodItem?: FoodItemOrderByWithRelationInput
  }

  export type FoodItemImgWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    url?: string
    AND?: FoodItemImgWhereInput | FoodItemImgWhereInput[]
    OR?: FoodItemImgWhereInput[]
    NOT?: FoodItemImgWhereInput | FoodItemImgWhereInput[]
    altText?: StringNullableFilter<"FoodItemImg"> | string | null
    foodItemId?: StringFilter<"FoodItemImg"> | string
    createdAt?: DateTimeFilter<"FoodItemImg"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemImg"> | Date | string
    foodItem?: XOR<FoodItemScalarRelationFilter, FoodItemWhereInput>
  }, "id" | "url">

  export type FoodItemImgOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    foodItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodItemImgCountOrderByAggregateInput
    _max?: FoodItemImgMaxOrderByAggregateInput
    _min?: FoodItemImgMinOrderByAggregateInput
  }

  export type FoodItemImgScalarWhereWithAggregatesInput = {
    AND?: FoodItemImgScalarWhereWithAggregatesInput | FoodItemImgScalarWhereWithAggregatesInput[]
    OR?: FoodItemImgScalarWhereWithAggregatesInput[]
    NOT?: FoodItemImgScalarWhereWithAggregatesInput | FoodItemImgScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodItemImg"> | string
    url?: StringWithAggregatesFilter<"FoodItemImg"> | string
    altText?: StringNullableWithAggregatesFilter<"FoodItemImg"> | string | null
    foodItemId?: StringWithAggregatesFilter<"FoodItemImg"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodItemImg"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodItemImg"> | Date | string
  }

  export type FoodItemBrandWhereInput = {
    AND?: FoodItemBrandWhereInput | FoodItemBrandWhereInput[]
    OR?: FoodItemBrandWhereInput[]
    NOT?: FoodItemBrandWhereInput | FoodItemBrandWhereInput[]
    id?: StringFilter<"FoodItemBrand"> | string
    name?: StringFilter<"FoodItemBrand"> | string
    createdAt?: DateTimeFilter<"FoodItemBrand"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemBrand"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }

  export type FoodItemBrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodItems?: FoodItemOrderByRelationAggregateInput
  }

  export type FoodItemBrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: FoodItemBrandWhereInput | FoodItemBrandWhereInput[]
    OR?: FoodItemBrandWhereInput[]
    NOT?: FoodItemBrandWhereInput | FoodItemBrandWhereInput[]
    createdAt?: DateTimeFilter<"FoodItemBrand"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemBrand"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }, "id" | "name">

  export type FoodItemBrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodItemBrandCountOrderByAggregateInput
    _max?: FoodItemBrandMaxOrderByAggregateInput
    _min?: FoodItemBrandMinOrderByAggregateInput
  }

  export type FoodItemBrandScalarWhereWithAggregatesInput = {
    AND?: FoodItemBrandScalarWhereWithAggregatesInput | FoodItemBrandScalarWhereWithAggregatesInput[]
    OR?: FoodItemBrandScalarWhereWithAggregatesInput[]
    NOT?: FoodItemBrandScalarWhereWithAggregatesInput | FoodItemBrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodItemBrand"> | string
    name?: StringWithAggregatesFilter<"FoodItemBrand"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodItemBrand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodItemBrand"> | Date | string
  }

  export type FoodItemCategoryWhereInput = {
    AND?: FoodItemCategoryWhereInput | FoodItemCategoryWhereInput[]
    OR?: FoodItemCategoryWhereInput[]
    NOT?: FoodItemCategoryWhereInput | FoodItemCategoryWhereInput[]
    id?: StringFilter<"FoodItemCategory"> | string
    name?: StringFilter<"FoodItemCategory"> | string
    createdAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }

  export type FoodItemCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodItems?: FoodItemOrderByRelationAggregateInput
  }

  export type FoodItemCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: FoodItemCategoryWhereInput | FoodItemCategoryWhereInput[]
    OR?: FoodItemCategoryWhereInput[]
    NOT?: FoodItemCategoryWhereInput | FoodItemCategoryWhereInput[]
    createdAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
    foodItems?: FoodItemListRelationFilter
  }, "id" | "name">

  export type FoodItemCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodItemCategoryCountOrderByAggregateInput
    _max?: FoodItemCategoryMaxOrderByAggregateInput
    _min?: FoodItemCategoryMinOrderByAggregateInput
  }

  export type FoodItemCategoryScalarWhereWithAggregatesInput = {
    AND?: FoodItemCategoryScalarWhereWithAggregatesInput | FoodItemCategoryScalarWhereWithAggregatesInput[]
    OR?: FoodItemCategoryScalarWhereWithAggregatesInput[]
    NOT?: FoodItemCategoryScalarWhereWithAggregatesInput | FoodItemCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodItemCategory"> | string
    name?: StringWithAggregatesFilter<"FoodItemCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodItemCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodItemCategory"> | Date | string
  }

  export type MealWhereInput = {
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    id?: StringFilter<"Meal"> | string
    name?: StringNullableFilter<"Meal"> | string | null
    mealType?: EnumMealTypeFilter<"Meal"> | $Enums.MealType
    ownerId?: StringNullableFilter<"Meal"> | string | null
    notes?: StringNullableFilter<"Meal"> | string | null
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    mealFoodItems?: MealFoodItemListRelationFilter
    userMeals?: UserMealListRelationFilter
    images?: ImageListRelationFilter
  }

  export type MealOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    mealType?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    mealFoodItems?: MealFoodItemOrderByRelationAggregateInput
    userMeals?: UserMealOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
  }

  export type MealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    name?: StringNullableFilter<"Meal"> | string | null
    mealType?: EnumMealTypeFilter<"Meal"> | $Enums.MealType
    ownerId?: StringNullableFilter<"Meal"> | string | null
    notes?: StringNullableFilter<"Meal"> | string | null
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    mealFoodItems?: MealFoodItemListRelationFilter
    userMeals?: UserMealListRelationFilter
    images?: ImageListRelationFilter
  }, "id">

  export type MealOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    mealType?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MealCountOrderByAggregateInput
    _max?: MealMaxOrderByAggregateInput
    _min?: MealMinOrderByAggregateInput
  }

  export type MealScalarWhereWithAggregatesInput = {
    AND?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    OR?: MealScalarWhereWithAggregatesInput[]
    NOT?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Meal"> | string
    name?: StringNullableWithAggregatesFilter<"Meal"> | string | null
    mealType?: EnumMealTypeWithAggregatesFilter<"Meal"> | $Enums.MealType
    ownerId?: StringNullableWithAggregatesFilter<"Meal"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Meal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Meal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meal"> | Date | string
  }

  export type MealFoodItemWhereInput = {
    AND?: MealFoodItemWhereInput | MealFoodItemWhereInput[]
    OR?: MealFoodItemWhereInput[]
    NOT?: MealFoodItemWhereInput | MealFoodItemWhereInput[]
    id?: StringFilter<"MealFoodItem"> | string
    mealId?: StringFilter<"MealFoodItem"> | string
    foodItemId?: StringFilter<"MealFoodItem"> | string
    quantity?: IntFilter<"MealFoodItem"> | number
    createdAt?: DateTimeFilter<"MealFoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"MealFoodItem"> | Date | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    foodItem?: XOR<FoodItemScalarRelationFilter, FoodItemWhereInput>
  }

  export type MealFoodItemOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodItemId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meal?: MealOrderByWithRelationInput
    foodItem?: FoodItemOrderByWithRelationInput
  }

  export type MealFoodItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealFoodItemWhereInput | MealFoodItemWhereInput[]
    OR?: MealFoodItemWhereInput[]
    NOT?: MealFoodItemWhereInput | MealFoodItemWhereInput[]
    mealId?: StringFilter<"MealFoodItem"> | string
    foodItemId?: StringFilter<"MealFoodItem"> | string
    quantity?: IntFilter<"MealFoodItem"> | number
    createdAt?: DateTimeFilter<"MealFoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"MealFoodItem"> | Date | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    foodItem?: XOR<FoodItemScalarRelationFilter, FoodItemWhereInput>
  }, "id">

  export type MealFoodItemOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodItemId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MealFoodItemCountOrderByAggregateInput
    _avg?: MealFoodItemAvgOrderByAggregateInput
    _max?: MealFoodItemMaxOrderByAggregateInput
    _min?: MealFoodItemMinOrderByAggregateInput
    _sum?: MealFoodItemSumOrderByAggregateInput
  }

  export type MealFoodItemScalarWhereWithAggregatesInput = {
    AND?: MealFoodItemScalarWhereWithAggregatesInput | MealFoodItemScalarWhereWithAggregatesInput[]
    OR?: MealFoodItemScalarWhereWithAggregatesInput[]
    NOT?: MealFoodItemScalarWhereWithAggregatesInput | MealFoodItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealFoodItem"> | string
    mealId?: StringWithAggregatesFilter<"MealFoodItem"> | string
    foodItemId?: StringWithAggregatesFilter<"MealFoodItem"> | string
    quantity?: IntWithAggregatesFilter<"MealFoodItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MealFoodItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MealFoodItem"> | Date | string
  }

  export type UserMealWhereInput = {
    AND?: UserMealWhereInput | UserMealWhereInput[]
    OR?: UserMealWhereInput[]
    NOT?: UserMealWhereInput | UserMealWhereInput[]
    id?: StringFilter<"UserMeal"> | string
    mealId?: StringFilter<"UserMeal"> | string
    userId?: StringFilter<"UserMeal"> | string
    dateConsumed?: DateTimeFilter<"UserMeal"> | Date | string
    createdAt?: DateTimeFilter<"UserMeal"> | Date | string
    updatedAt?: DateTimeFilter<"UserMeal"> | Date | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserMealOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    userId?: SortOrder
    dateConsumed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meal?: MealOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserMealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserMealWhereInput | UserMealWhereInput[]
    OR?: UserMealWhereInput[]
    NOT?: UserMealWhereInput | UserMealWhereInput[]
    mealId?: StringFilter<"UserMeal"> | string
    userId?: StringFilter<"UserMeal"> | string
    dateConsumed?: DateTimeFilter<"UserMeal"> | Date | string
    createdAt?: DateTimeFilter<"UserMeal"> | Date | string
    updatedAt?: DateTimeFilter<"UserMeal"> | Date | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserMealOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    userId?: SortOrder
    dateConsumed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserMealCountOrderByAggregateInput
    _max?: UserMealMaxOrderByAggregateInput
    _min?: UserMealMinOrderByAggregateInput
  }

  export type UserMealScalarWhereWithAggregatesInput = {
    AND?: UserMealScalarWhereWithAggregatesInput | UserMealScalarWhereWithAggregatesInput[]
    OR?: UserMealScalarWhereWithAggregatesInput[]
    NOT?: UserMealScalarWhereWithAggregatesInput | UserMealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserMeal"> | string
    mealId?: StringWithAggregatesFilter<"UserMeal"> | string
    userId?: StringWithAggregatesFilter<"UserMeal"> | string
    dateConsumed?: DateTimeWithAggregatesFilter<"UserMeal"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserMeal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserMeal"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    publicId?: StringFilter<"Image"> | string
    description?: StringNullableFilter<"Image"> | string | null
    altText?: StringNullableFilter<"Image"> | string | null
    mealId?: StringNullableFilter<"Image"> | string | null
    isPrimary?: BoolFilter<"Image"> | boolean
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    meal?: XOR<MealNullableScalarRelationFilter, MealWhereInput> | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    description?: SortOrderInput | SortOrder
    altText?: SortOrderInput | SortOrder
    mealId?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meal?: MealOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    url?: string
    publicId?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    description?: StringNullableFilter<"Image"> | string | null
    altText?: StringNullableFilter<"Image"> | string | null
    mealId?: StringNullableFilter<"Image"> | string | null
    isPrimary?: BoolFilter<"Image"> | boolean
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    meal?: XOR<MealNullableScalarRelationFilter, MealWhereInput> | null
  }, "id" | "url" | "publicId">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    description?: SortOrderInput | SortOrder
    altText?: SortOrderInput | SortOrder
    mealId?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    publicId?: StringWithAggregatesFilter<"Image"> | string
    description?: StringNullableWithAggregatesFilter<"Image"> | string | null
    altText?: StringNullableWithAggregatesFilter<"Image"> | string | null
    mealId?: StringNullableWithAggregatesFilter<"Image"> | string | null
    isPrimary?: BoolWithAggregatesFilter<"Image"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCreateInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentCreateNestedManyWithoutExercisesInput
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
    owner?: UserCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutExercisesInput
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
    owner?: UserUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUncheckedUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleCreateInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutMusclesInput
    aliases?: MuscleAliasCreateNestedManyWithoutMuscleInput
  }

  export type MuscleUncheckedCreateInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutMusclesInput
    aliases?: MuscleAliasUncheckedCreateNestedManyWithoutMuscleInput
  }

  export type MuscleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutMusclesNestedInput
    aliases?: MuscleAliasUpdateManyWithoutMuscleNestedInput
  }

  export type MuscleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutMusclesNestedInput
    aliases?: MuscleAliasUncheckedUpdateManyWithoutMuscleNestedInput
  }

  export type MuscleCreateManyInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasCreateInput = {
    id?: string
    name: string
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    muscle: MuscleCreateNestedOneWithoutAliasesInput
  }

  export type MuscleAliasUncheckedCreateInput = {
    id?: string
    name: string
    language?: string | null
    muscleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAliasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    muscle?: MuscleUpdateOneRequiredWithoutAliasesNestedInput
  }

  export type MuscleAliasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    muscleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasCreateManyInput = {
    id?: string
    name: string
    language?: string | null
    muscleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAliasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    muscleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutEquipmentInput
    categories?: EquipmentCategoryCreateNestedManyWithoutEquipmentsInput
  }

  export type EquipmentUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutEquipmentInput
    categories?: EquipmentCategoryUncheckedCreateNestedManyWithoutEquipmentsInput
  }

  export type EquipmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutEquipmentNestedInput
    categories?: EquipmentCategoryUpdateManyWithoutEquipmentsNestedInput
  }

  export type EquipmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutEquipmentNestedInput
    categories?: EquipmentCategoryUncheckedUpdateManyWithoutEquipmentsNestedInput
  }

  export type EquipmentCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    equipments?: EquipmentCreateNestedManyWithoutCategoriesInput
  }

  export type EquipmentCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    equipments?: EquipmentUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type EquipmentCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipments?: EquipmentUpdateManyWithoutCategoriesNestedInput
  }

  export type EquipmentCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipments?: EquipmentUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type EquipmentCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipmentCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetCreateInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercise: UserWorkoutExerciseCreateNestedOneWithoutUserCardioSetsInput
  }

  export type UserCardioSetUncheckedCreateInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    userWorkoutExerciseId: string
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercise?: UserWorkoutExerciseUpdateOneRequiredWithoutUserCardioSetsNestedInput
  }

  export type UserCardioSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetCreateManyInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    userWorkoutExerciseId: string
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetCreateInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercise: UserWorkoutExerciseCreateNestedOneWithoutUserStrengthSetsInput
  }

  export type UserStrengthSetUncheckedCreateInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    userWorkoutExerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercise?: UserWorkoutExerciseUpdateOneRequiredWithoutUserStrengthSetsNestedInput
  }

  export type UserStrengthSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetCreateManyInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    userWorkoutExerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutExerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramCreateInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramCreateManyInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateInput = {
    id?: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutProgramWorkoutsInput
    workout: WorkoutCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateInput = {
    id?: string
    programId: string
    workoutId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateManyInput = {
    id?: string
    programId: string
    workoutId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutCreateInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutCreateManyInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseCreateManyInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateInput = {
    id?: string
    skippedReason?: string | null
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSets?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
    userWorkoutId: string
    userStrengthSets?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSets?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSets?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseCreateManyInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
    userWorkoutId: string
  }

  export type UserWorkoutExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserWorkoutExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
  }

  export type UserWorkoutCreateInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutCreateManyInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type UserWorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCreateInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: FoodItemBrandCreateNestedOneWithoutFoodItemsInput
    categories?: FoodItemCategoryCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: FoodItemBrandUpdateOneWithoutFoodItemsNestedInput
    categories?: FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemCreateManyInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemLabelCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemCreateNestedManyWithoutLabelsInput
  }

  export type FoodItemLabelUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutLabelsInput
  }

  export type FoodItemLabelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUpdateManyWithoutLabelsNestedInput
  }

  export type FoodItemLabelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUncheckedUpdateManyWithoutLabelsNestedInput
  }

  export type FoodItemLabelCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemLabelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemLabelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgCreateInput = {
    id?: string
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItem: FoodItemCreateNestedOneWithoutImagesInput
  }

  export type FoodItemImgUncheckedCreateInput = {
    id?: string
    url: string
    altText?: string | null
    foodItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemImgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItem?: FoodItemUpdateOneRequiredWithoutImagesNestedInput
  }

  export type FoodItemImgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    foodItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgCreateManyInput = {
    id?: string
    url: string
    altText?: string | null
    foodItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemImgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    foodItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemBrandCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemCreateNestedManyWithoutBrandInput
  }

  export type FoodItemBrandUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type FoodItemBrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUpdateManyWithoutBrandNestedInput
  }

  export type FoodItemBrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type FoodItemBrandCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemBrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemBrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemCreateNestedManyWithoutCategoriesInput
  }

  export type FoodItemCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItems?: FoodItemUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type FoodItemCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUpdateManyWithoutCategoriesNestedInput
  }

  export type FoodItemCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItems?: FoodItemUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type FoodItemCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealCreateInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutMealsInput
    mealFoodItems?: MealFoodItemCreateNestedManyWithoutMealInput
    userMeals?: UserMealCreateNestedManyWithoutMealInput
    images?: ImageCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    ownerId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoodItems?: MealFoodItemUncheckedCreateNestedManyWithoutMealInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutMealInput
    images?: ImageUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutMealsNestedInput
    mealFoodItems?: MealFoodItemUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUpdateManyWithoutMealNestedInput
    images?: ImageUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoodItems?: MealFoodItemUncheckedUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutMealNestedInput
    images?: ImageUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealCreateManyInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    ownerId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemCreateInput = {
    id?: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    meal: MealCreateNestedOneWithoutMealFoodItemsInput
    foodItem: FoodItemCreateNestedOneWithoutMealFoodItemInput
  }

  export type MealFoodItemUncheckedCreateInput = {
    id?: string
    mealId: string
    foodItemId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutMealFoodItemsNestedInput
    foodItem?: FoodItemUpdateOneRequiredWithoutMealFoodItemNestedInput
  }

  export type MealFoodItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    foodItemId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemCreateManyInput = {
    id?: string
    mealId: string
    foodItemId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    foodItemId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealCreateInput = {
    id?: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meal: MealCreateNestedOneWithoutUserMealsInput
    user: UserCreateNestedOneWithoutUserMealsInput
  }

  export type UserMealUncheckedCreateInput = {
    id?: string
    mealId: string
    userId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutUserMealsNestedInput
    user?: UserUpdateOneRequiredWithoutUserMealsNestedInput
  }

  export type UserMealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealCreateManyInput = {
    id?: string
    mealId: string
    userId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    meal?: MealCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    mealId?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    mealId?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateManyInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    mealId?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    mealId?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProgramListRelationFilter = {
    every?: ProgramWhereInput
    some?: ProgramWhereInput
    none?: ProgramWhereInput
  }

  export type WorkoutListRelationFilter = {
    every?: WorkoutWhereInput
    some?: WorkoutWhereInput
    none?: WorkoutWhereInput
  }

  export type UserWorkoutListRelationFilter = {
    every?: UserWorkoutWhereInput
    some?: UserWorkoutWhereInput
    none?: UserWorkoutWhereInput
  }

  export type MealListRelationFilter = {
    every?: MealWhereInput
    some?: MealWhereInput
    none?: MealWhereInput
  }

  export type UserMealListRelationFilter = {
    every?: UserMealWhereInput
    some?: UserMealWhereInput
    none?: UserMealWhereInput
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    imgUrl?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type EquipmentListRelationFilter = {
    every?: EquipmentWhereInput
    some?: EquipmentWhereInput
    none?: EquipmentWhereInput
  }

  export type MuscleListRelationFilter = {
    every?: MuscleWhereInput
    some?: MuscleWhereInput
    none?: MuscleWhereInput
  }

  export type WorkoutExerciseListRelationFilter = {
    every?: WorkoutExerciseWhereInput
    some?: WorkoutExerciseWhereInput
    none?: WorkoutExerciseWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type EquipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MuscleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    notes?: SortOrder
    isCompounded?: SortOrder
    type?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    notes?: SortOrder
    isCompounded?: SortOrder
    type?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    youtubeUrl?: SortOrder
    notes?: SortOrder
    isCompounded?: SortOrder
    type?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type MuscleAliasListRelationFilter = {
    every?: MuscleAliasWhereInput
    some?: MuscleAliasWhereInput
    none?: MuscleAliasWhereInput
  }

  export type MuscleAliasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MuscleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type MuscleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type MuscleScalarRelationFilter = {
    is?: MuscleWhereInput
    isNot?: MuscleWhereInput
  }

  export type MuscleAliasCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    language?: SortOrder
    muscleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAliasMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    language?: SortOrder
    muscleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MuscleAliasMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    language?: SortOrder
    muscleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentCategoryListRelationFilter = {
    every?: EquipmentCategoryWhereInput
    some?: EquipmentCategoryWhereInput
    none?: EquipmentCategoryWhereInput
  }

  export type EquipmentCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EquipmentCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserWorkoutExerciseScalarRelationFilter = {
    is?: UserWorkoutExerciseWhereInput
    isNot?: UserWorkoutExerciseWhereInput
  }

  export type UserCardioSetCountOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    caloriesBurned?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetAvgOrderByAggregateInput = {
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    caloriesBurned?: SortOrder
  }

  export type UserCardioSetMaxOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    caloriesBurned?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetMinOrderByAggregateInput = {
    id?: SortOrder
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    caloriesBurned?: SortOrder
    userWorkoutExerciseId?: SortOrder
    skippedReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardioSetSumOrderByAggregateInput = {
    warmupTime?: SortOrder
    workTime?: SortOrder
    avgHeartRate?: SortOrder
    avgSpeed?: SortOrder
    distance?: SortOrder
    order?: SortOrder
    caloriesBurned?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UserStrengthSetCountOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetAvgOrderByAggregateInput = {
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type UserStrengthSetMaxOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetMinOrderByAggregateInput = {
    id?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
    isCompleted?: SortOrder
    isWarmup?: SortOrder
    isMuscleFailure?: SortOrder
    isJointPain?: SortOrder
    skippedReason?: SortOrder
    userWorkoutExerciseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStrengthSetSumOrderByAggregateInput = {
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type ProgramWorkoutListRelationFilter = {
    every?: ProgramWorkoutWhereInput
    some?: ProgramWorkoutWhereInput
    none?: ProgramWorkoutWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProgramWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumWorkoutLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutLevel | EnumWorkoutLevelFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutLevelFilter<$PrismaModel> | $Enums.WorkoutLevel
  }

  export type EnumWorkoutGoalFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutGoal | EnumWorkoutGoalFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutGoalFilter<$PrismaModel> | $Enums.WorkoutGoal
  }

  export type EnumDaysOfWeekNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel> | null
    has?: $Enums.DaysOfWeek | EnumDaysOfWeekFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel>
    hasSome?: $Enums.DaysOfWeek[] | ListEnumDaysOfWeekFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProgramScalarRelationFilter = {
    is?: ProgramWhereInput
    isNot?: ProgramWhereInput
  }

  export type WorkoutScalarRelationFilter = {
    is?: WorkoutWhereInput
    isNot?: WorkoutWhereInput
  }

  export type ProgramWorkoutProgramIdWorkoutIdCompoundUniqueInput = {
    programId: string
    workoutId: string
  }

  export type ProgramWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    workoutLevel?: SortOrder
    workoutGoal?: SortOrder
    daysOfWeek?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    workoutLevel?: SortOrder
    workoutGoal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    workoutLevel?: SortOrder
    workoutGoal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumWorkoutLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutLevel | EnumWorkoutLevelFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutLevelWithAggregatesFilter<$PrismaModel> | $Enums.WorkoutLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkoutLevelFilter<$PrismaModel>
    _max?: NestedEnumWorkoutLevelFilter<$PrismaModel>
  }

  export type EnumWorkoutGoalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutGoal | EnumWorkoutGoalFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutGoalWithAggregatesFilter<$PrismaModel> | $Enums.WorkoutGoal
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkoutGoalFilter<$PrismaModel>
    _max?: NestedEnumWorkoutGoalFilter<$PrismaModel>
  }

  export type WorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isTemplate?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isTemplate?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isTemplate?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseScalarRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type UserWorkoutExerciseListRelationFilter = {
    every?: UserWorkoutExerciseWhereInput
    some?: UserWorkoutExerciseWhereInput
    none?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    hasWarmup?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseAvgOrderByAggregateInput = {
    order?: SortOrder
    restTime?: SortOrder
  }

  export type WorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    hasWarmup?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    notes?: SortOrder
    hasWarmup?: SortOrder
    isBodyWeight?: SortOrder
    restTime?: SortOrder
    exerciseId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkoutExerciseSumOrderByAggregateInput = {
    order?: SortOrder
    restTime?: SortOrder
  }

  export type WorkoutExerciseScalarRelationFilter = {
    is?: WorkoutExerciseWhereInput
    isNot?: WorkoutExerciseWhereInput
  }

  export type UserWorkoutScalarRelationFilter = {
    is?: UserWorkoutWhereInput
    isNot?: UserWorkoutWhereInput
  }

  export type UserStrengthSetListRelationFilter = {
    every?: UserStrengthSetWhereInput
    some?: UserStrengthSetWhereInput
    none?: UserStrengthSetWhereInput
  }

  export type UserCardioSetListRelationFilter = {
    every?: UserCardioSetWhereInput
    some?: UserCardioSetWhereInput
    none?: UserCardioSetWhereInput
  }

  export type UserStrengthSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCardioSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    skippedReason?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type UserWorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    skippedReason?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type UserWorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    skippedReason?: SortOrder
    workoutExerciseId?: SortOrder
    userWorkoutId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProgramNullableScalarRelationFilter = {
    is?: ProgramWhereInput | null
    isNot?: ProgramWhereInput | null
  }

  export type WorkoutNullableScalarRelationFilter = {
    is?: WorkoutWhereInput | null
    isNot?: WorkoutWhereInput | null
  }

  export type UserWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    dateCompleted?: SortOrder
    ownerId?: SortOrder
    programId?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FoodItemBrandNullableScalarRelationFilter = {
    is?: FoodItemBrandWhereInput | null
    isNot?: FoodItemBrandWhereInput | null
  }

  export type FoodItemCategoryListRelationFilter = {
    every?: FoodItemCategoryWhereInput
    some?: FoodItemCategoryWhereInput
    none?: FoodItemCategoryWhereInput
  }

  export type FoodItemLabelListRelationFilter = {
    every?: FoodItemLabelWhereInput
    some?: FoodItemLabelWhereInput
    none?: FoodItemLabelWhereInput
  }

  export type MealFoodItemListRelationFilter = {
    every?: MealFoodItemWhereInput
    some?: MealFoodItemWhereInput
    none?: MealFoodItemWhereInput
  }

  export type FoodItemImgListRelationFilter = {
    every?: FoodItemImgWhereInput
    some?: FoodItemImgWhereInput
    none?: FoodItemImgWhereInput
  }

  export type FoodItemCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodItemLabelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealFoodItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodItemImgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodItemCountOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    servingSize?: SortOrder
    calories?: SortOrder
    proteins?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    fat?: SortOrder
    saturatedFat?: SortOrder
    fiber?: SortOrder
    salt?: SortOrder
    cholesterol?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemAvgOrderByAggregateInput = {
    servingSize?: SortOrder
    calories?: SortOrder
    proteins?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    fat?: SortOrder
    saturatedFat?: SortOrder
    fiber?: SortOrder
    salt?: SortOrder
    cholesterol?: SortOrder
  }

  export type FoodItemMaxOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    servingSize?: SortOrder
    calories?: SortOrder
    proteins?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    fat?: SortOrder
    saturatedFat?: SortOrder
    fiber?: SortOrder
    salt?: SortOrder
    cholesterol?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemMinOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    servingSize?: SortOrder
    calories?: SortOrder
    proteins?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    fat?: SortOrder
    saturatedFat?: SortOrder
    fiber?: SortOrder
    salt?: SortOrder
    cholesterol?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemSumOrderByAggregateInput = {
    servingSize?: SortOrder
    calories?: SortOrder
    proteins?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    fat?: SortOrder
    saturatedFat?: SortOrder
    fiber?: SortOrder
    salt?: SortOrder
    cholesterol?: SortOrder
  }

  export type FoodItemListRelationFilter = {
    every?: FoodItemWhereInput
    some?: FoodItemWhereInput
    none?: FoodItemWhereInput
  }

  export type FoodItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodItemLabelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemLabelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemLabelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemScalarRelationFilter = {
    is?: FoodItemWhereInput
    isNot?: FoodItemWhereInput
  }

  export type FoodItemImgCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    foodItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemImgMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    foodItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemImgMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    foodItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemBrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemBrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemBrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodItemCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mealType?: SortOrder
    ownerId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mealType?: SortOrder
    ownerId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mealType?: SortOrder
    ownerId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type MealScalarRelationFilter = {
    is?: MealWhereInput
    isNot?: MealWhereInput
  }

  export type MealFoodItemCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodItemId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type MealFoodItemMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodItemId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodItemMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    foodItemId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodItemSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type UserMealCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    userId?: SortOrder
    dateConsumed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMealMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    userId?: SortOrder
    dateConsumed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMealMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    userId?: SortOrder
    dateConsumed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealNullableScalarRelationFilter = {
    is?: MealWhereInput | null
    isNot?: MealWhereInput | null
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    description?: SortOrder
    altText?: SortOrder
    mealId?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    description?: SortOrder
    altText?: SortOrder
    mealId?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    description?: SortOrder
    altText?: SortOrder
    mealId?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type WorkoutCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutOwnerInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type MealCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput> | MealCreateWithoutOwnerInput[] | MealUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MealCreateOrConnectWithoutOwnerInput | MealCreateOrConnectWithoutOwnerInput[]
    createMany?: MealCreateManyOwnerInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type UserMealCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput> | UserMealCreateWithoutUserInput[] | UserMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutUserInput | UserMealCreateOrConnectWithoutUserInput[]
    createMany?: UserMealCreateManyUserInputEnvelope
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput> | ExerciseCreateWithoutOwnerInput[] | ExerciseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutOwnerInput | ExerciseCreateOrConnectWithoutOwnerInput[]
    createMany?: ExerciseCreateManyOwnerInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ProgramUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type WorkoutUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type MealUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput> | MealCreateWithoutOwnerInput[] | MealUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MealCreateOrConnectWithoutOwnerInput | MealCreateOrConnectWithoutOwnerInput[]
    createMany?: MealCreateManyOwnerInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type UserMealUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput> | UserMealCreateWithoutUserInput[] | UserMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutUserInput | UserMealCreateOrConnectWithoutUserInput[]
    createMany?: UserMealCreateManyUserInputEnvelope
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput> | ExerciseCreateWithoutOwnerInput[] | ExerciseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutOwnerInput | ExerciseCreateOrConnectWithoutOwnerInput[]
    createMany?: ExerciseCreateManyOwnerInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProgramUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutOwnerInput | ProgramUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutOwnerInput | ProgramUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutOwnerInput | ProgramUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type WorkoutUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutOwnerInput | WorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutOwnerInput | WorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutOwnerInput | WorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput | UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput | UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutOwnerInput | UserWorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type MealUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput> | MealCreateWithoutOwnerInput[] | MealUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MealCreateOrConnectWithoutOwnerInput | MealCreateOrConnectWithoutOwnerInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutOwnerInput | MealUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MealCreateManyOwnerInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutOwnerInput | MealUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MealUpdateManyWithWhereWithoutOwnerInput | MealUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type UserMealUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput> | UserMealCreateWithoutUserInput[] | UserMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutUserInput | UserMealCreateOrConnectWithoutUserInput[]
    upsert?: UserMealUpsertWithWhereUniqueWithoutUserInput | UserMealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMealCreateManyUserInputEnvelope
    set?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    disconnect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    delete?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    update?: UserMealUpdateWithWhereUniqueWithoutUserInput | UserMealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMealUpdateManyWithWhereWithoutUserInput | UserMealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput> | ExerciseCreateWithoutOwnerInput[] | ExerciseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutOwnerInput | ExerciseCreateOrConnectWithoutOwnerInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutOwnerInput | ExerciseUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ExerciseCreateManyOwnerInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutOwnerInput | ExerciseUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutOwnerInput | ExerciseUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ProgramUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput> | ProgramCreateWithoutOwnerInput[] | ProgramUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutOwnerInput | ProgramCreateOrConnectWithoutOwnerInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutOwnerInput | ProgramUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProgramCreateManyOwnerInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutOwnerInput | ProgramUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutOwnerInput | ProgramUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type WorkoutUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput> | WorkoutCreateWithoutOwnerInput[] | WorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutOwnerInput | WorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutOwnerInput | WorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: WorkoutCreateManyOwnerInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutOwnerInput | WorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutOwnerInput | WorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput> | UserWorkoutCreateWithoutOwnerInput[] | UserWorkoutUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutOwnerInput | UserWorkoutCreateOrConnectWithoutOwnerInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput | UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: UserWorkoutCreateManyOwnerInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput | UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutOwnerInput | UserWorkoutUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type MealUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput> | MealCreateWithoutOwnerInput[] | MealUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MealCreateOrConnectWithoutOwnerInput | MealCreateOrConnectWithoutOwnerInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutOwnerInput | MealUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MealCreateManyOwnerInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutOwnerInput | MealUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MealUpdateManyWithWhereWithoutOwnerInput | MealUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type UserMealUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput> | UserMealCreateWithoutUserInput[] | UserMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutUserInput | UserMealCreateOrConnectWithoutUserInput[]
    upsert?: UserMealUpsertWithWhereUniqueWithoutUserInput | UserMealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMealCreateManyUserInputEnvelope
    set?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    disconnect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    delete?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    update?: UserMealUpdateWithWhereUniqueWithoutUserInput | UserMealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMealUpdateManyWithWhereWithoutUserInput | UserMealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput> | ExerciseCreateWithoutOwnerInput[] | ExerciseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutOwnerInput | ExerciseCreateOrConnectWithoutOwnerInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutOwnerInput | ExerciseUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ExerciseCreateManyOwnerInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutOwnerInput | ExerciseUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutOwnerInput | ExerciseUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type EquipmentCreateNestedManyWithoutExercisesInput = {
    create?: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput> | EquipmentCreateWithoutExercisesInput[] | EquipmentUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutExercisesInput | EquipmentCreateOrConnectWithoutExercisesInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type MuscleCreateNestedManyWithoutExercisesInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type WorkoutExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutExercisesInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    connect?: UserWhereUniqueInput
  }

  export type EquipmentUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput> | EquipmentCreateWithoutExercisesInput[] | EquipmentUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutExercisesInput | EquipmentCreateOrConnectWithoutExercisesInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type MuscleUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type EnumExerciseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ExerciseType
  }

  export type EquipmentUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput> | EquipmentCreateWithoutExercisesInput[] | EquipmentUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutExercisesInput | EquipmentCreateOrConnectWithoutExercisesInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutExercisesInput | EquipmentUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutExercisesInput | EquipmentUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutExercisesInput | EquipmentUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type MuscleUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutExercisesInput | MuscleUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutExercisesInput | MuscleUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutExercisesInput | MuscleUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type WorkoutExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type UserUpdateOneWithoutExercisesNestedInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    upsert?: UserUpsertWithoutExercisesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExercisesInput, UserUpdateWithoutExercisesInput>, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type EquipmentUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput> | EquipmentCreateWithoutExercisesInput[] | EquipmentUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutExercisesInput | EquipmentCreateOrConnectWithoutExercisesInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutExercisesInput | EquipmentUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutExercisesInput | EquipmentUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutExercisesInput | EquipmentUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type MuscleUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutExercisesInput | MuscleUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutExercisesInput | MuscleUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutExercisesInput | MuscleUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type ExerciseCreateNestedManyWithoutMusclesInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type MuscleAliasCreateNestedManyWithoutMuscleInput = {
    create?: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput> | MuscleAliasCreateWithoutMuscleInput[] | MuscleAliasUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: MuscleAliasCreateOrConnectWithoutMuscleInput | MuscleAliasCreateOrConnectWithoutMuscleInput[]
    createMany?: MuscleAliasCreateManyMuscleInputEnvelope
    connect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutMusclesInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type MuscleAliasUncheckedCreateNestedManyWithoutMuscleInput = {
    create?: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput> | MuscleAliasCreateWithoutMuscleInput[] | MuscleAliasUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: MuscleAliasCreateOrConnectWithoutMuscleInput | MuscleAliasCreateOrConnectWithoutMuscleInput[]
    createMany?: MuscleAliasCreateManyMuscleInputEnvelope
    connect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExerciseUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutMusclesInput | ExerciseUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutMusclesInput | ExerciseUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutMusclesInput | ExerciseUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type MuscleAliasUpdateManyWithoutMuscleNestedInput = {
    create?: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput> | MuscleAliasCreateWithoutMuscleInput[] | MuscleAliasUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: MuscleAliasCreateOrConnectWithoutMuscleInput | MuscleAliasCreateOrConnectWithoutMuscleInput[]
    upsert?: MuscleAliasUpsertWithWhereUniqueWithoutMuscleInput | MuscleAliasUpsertWithWhereUniqueWithoutMuscleInput[]
    createMany?: MuscleAliasCreateManyMuscleInputEnvelope
    set?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    disconnect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    delete?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    connect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    update?: MuscleAliasUpdateWithWhereUniqueWithoutMuscleInput | MuscleAliasUpdateWithWhereUniqueWithoutMuscleInput[]
    updateMany?: MuscleAliasUpdateManyWithWhereWithoutMuscleInput | MuscleAliasUpdateManyWithWhereWithoutMuscleInput[]
    deleteMany?: MuscleAliasScalarWhereInput | MuscleAliasScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutMusclesInput | ExerciseUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutMusclesInput | ExerciseUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutMusclesInput | ExerciseUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type MuscleAliasUncheckedUpdateManyWithoutMuscleNestedInput = {
    create?: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput> | MuscleAliasCreateWithoutMuscleInput[] | MuscleAliasUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: MuscleAliasCreateOrConnectWithoutMuscleInput | MuscleAliasCreateOrConnectWithoutMuscleInput[]
    upsert?: MuscleAliasUpsertWithWhereUniqueWithoutMuscleInput | MuscleAliasUpsertWithWhereUniqueWithoutMuscleInput[]
    createMany?: MuscleAliasCreateManyMuscleInputEnvelope
    set?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    disconnect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    delete?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    connect?: MuscleAliasWhereUniqueInput | MuscleAliasWhereUniqueInput[]
    update?: MuscleAliasUpdateWithWhereUniqueWithoutMuscleInput | MuscleAliasUpdateWithWhereUniqueWithoutMuscleInput[]
    updateMany?: MuscleAliasUpdateManyWithWhereWithoutMuscleInput | MuscleAliasUpdateManyWithWhereWithoutMuscleInput[]
    deleteMany?: MuscleAliasScalarWhereInput | MuscleAliasScalarWhereInput[]
  }

  export type MuscleCreateNestedOneWithoutAliasesInput = {
    create?: XOR<MuscleCreateWithoutAliasesInput, MuscleUncheckedCreateWithoutAliasesInput>
    connectOrCreate?: MuscleCreateOrConnectWithoutAliasesInput
    connect?: MuscleWhereUniqueInput
  }

  export type MuscleUpdateOneRequiredWithoutAliasesNestedInput = {
    create?: XOR<MuscleCreateWithoutAliasesInput, MuscleUncheckedCreateWithoutAliasesInput>
    connectOrCreate?: MuscleCreateOrConnectWithoutAliasesInput
    upsert?: MuscleUpsertWithoutAliasesInput
    connect?: MuscleWhereUniqueInput
    update?: XOR<XOR<MuscleUpdateToOneWithWhereWithoutAliasesInput, MuscleUpdateWithoutAliasesInput>, MuscleUncheckedUpdateWithoutAliasesInput>
  }

  export type ExerciseCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput> | ExerciseCreateWithoutEquipmentInput[] | ExerciseUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutEquipmentInput | ExerciseCreateOrConnectWithoutEquipmentInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type EquipmentCategoryCreateNestedManyWithoutEquipmentsInput = {
    create?: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput> | EquipmentCategoryCreateWithoutEquipmentsInput[] | EquipmentCategoryUncheckedCreateWithoutEquipmentsInput[]
    connectOrCreate?: EquipmentCategoryCreateOrConnectWithoutEquipmentsInput | EquipmentCategoryCreateOrConnectWithoutEquipmentsInput[]
    connect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput> | ExerciseCreateWithoutEquipmentInput[] | ExerciseUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutEquipmentInput | ExerciseCreateOrConnectWithoutEquipmentInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type EquipmentCategoryUncheckedCreateNestedManyWithoutEquipmentsInput = {
    create?: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput> | EquipmentCategoryCreateWithoutEquipmentsInput[] | EquipmentCategoryUncheckedCreateWithoutEquipmentsInput[]
    connectOrCreate?: EquipmentCategoryCreateOrConnectWithoutEquipmentsInput | EquipmentCategoryCreateOrConnectWithoutEquipmentsInput[]
    connect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
  }

  export type ExerciseUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput> | ExerciseCreateWithoutEquipmentInput[] | ExerciseUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutEquipmentInput | ExerciseCreateOrConnectWithoutEquipmentInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutEquipmentInput | ExerciseUpsertWithWhereUniqueWithoutEquipmentInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutEquipmentInput | ExerciseUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutEquipmentInput | ExerciseUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type EquipmentCategoryUpdateManyWithoutEquipmentsNestedInput = {
    create?: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput> | EquipmentCategoryCreateWithoutEquipmentsInput[] | EquipmentCategoryUncheckedCreateWithoutEquipmentsInput[]
    connectOrCreate?: EquipmentCategoryCreateOrConnectWithoutEquipmentsInput | EquipmentCategoryCreateOrConnectWithoutEquipmentsInput[]
    upsert?: EquipmentCategoryUpsertWithWhereUniqueWithoutEquipmentsInput | EquipmentCategoryUpsertWithWhereUniqueWithoutEquipmentsInput[]
    set?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    disconnect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    delete?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    connect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    update?: EquipmentCategoryUpdateWithWhereUniqueWithoutEquipmentsInput | EquipmentCategoryUpdateWithWhereUniqueWithoutEquipmentsInput[]
    updateMany?: EquipmentCategoryUpdateManyWithWhereWithoutEquipmentsInput | EquipmentCategoryUpdateManyWithWhereWithoutEquipmentsInput[]
    deleteMany?: EquipmentCategoryScalarWhereInput | EquipmentCategoryScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput> | ExerciseCreateWithoutEquipmentInput[] | ExerciseUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutEquipmentInput | ExerciseCreateOrConnectWithoutEquipmentInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutEquipmentInput | ExerciseUpsertWithWhereUniqueWithoutEquipmentInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutEquipmentInput | ExerciseUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutEquipmentInput | ExerciseUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type EquipmentCategoryUncheckedUpdateManyWithoutEquipmentsNestedInput = {
    create?: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput> | EquipmentCategoryCreateWithoutEquipmentsInput[] | EquipmentCategoryUncheckedCreateWithoutEquipmentsInput[]
    connectOrCreate?: EquipmentCategoryCreateOrConnectWithoutEquipmentsInput | EquipmentCategoryCreateOrConnectWithoutEquipmentsInput[]
    upsert?: EquipmentCategoryUpsertWithWhereUniqueWithoutEquipmentsInput | EquipmentCategoryUpsertWithWhereUniqueWithoutEquipmentsInput[]
    set?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    disconnect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    delete?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    connect?: EquipmentCategoryWhereUniqueInput | EquipmentCategoryWhereUniqueInput[]
    update?: EquipmentCategoryUpdateWithWhereUniqueWithoutEquipmentsInput | EquipmentCategoryUpdateWithWhereUniqueWithoutEquipmentsInput[]
    updateMany?: EquipmentCategoryUpdateManyWithWhereWithoutEquipmentsInput | EquipmentCategoryUpdateManyWithWhereWithoutEquipmentsInput[]
    deleteMany?: EquipmentCategoryScalarWhereInput | EquipmentCategoryScalarWhereInput[]
  }

  export type EquipmentCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput> | EquipmentCreateWithoutCategoriesInput[] | EquipmentUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutCategoriesInput | EquipmentCreateOrConnectWithoutCategoriesInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type EquipmentUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput> | EquipmentCreateWithoutCategoriesInput[] | EquipmentUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutCategoriesInput | EquipmentCreateOrConnectWithoutCategoriesInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type EquipmentUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput> | EquipmentCreateWithoutCategoriesInput[] | EquipmentUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutCategoriesInput | EquipmentCreateOrConnectWithoutCategoriesInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutCategoriesInput | EquipmentUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutCategoriesInput | EquipmentUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutCategoriesInput | EquipmentUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type EquipmentUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput> | EquipmentCreateWithoutCategoriesInput[] | EquipmentUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutCategoriesInput | EquipmentCreateOrConnectWithoutCategoriesInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutCategoriesInput | EquipmentUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutCategoriesInput | EquipmentUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutCategoriesInput | EquipmentUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type UserWorkoutExerciseCreateNestedOneWithoutUserCardioSetsInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetsInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetsInput
    connect?: UserWorkoutExerciseWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserWorkoutExerciseUpdateOneRequiredWithoutUserCardioSetsNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetsInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetsInput
    upsert?: UserWorkoutExerciseUpsertWithoutUserCardioSetsInput
    connect?: UserWorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<UserWorkoutExerciseUpdateToOneWithWhereWithoutUserCardioSetsInput, UserWorkoutExerciseUpdateWithoutUserCardioSetsInput>, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetsInput>
  }

  export type UserWorkoutExerciseCreateNestedOneWithoutUserStrengthSetsInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetsInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetsInput
    connect?: UserWorkoutExerciseWhereUniqueInput
  }

  export type UserWorkoutExerciseUpdateOneRequiredWithoutUserStrengthSetsNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetsInput>
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetsInput
    upsert?: UserWorkoutExerciseUpsertWithoutUserStrengthSetsInput
    connect?: UserWorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<UserWorkoutExerciseUpdateToOneWithWhereWithoutUserStrengthSetsInput, UserWorkoutExerciseUpdateWithoutUserStrengthSetsInput>, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetsInput>
  }

  export type ProgramWorkoutCreateNestedManyWithoutProgramInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutProgramInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutProgramsInput = {
    create?: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgramsInput
    connect?: UserWhereUniqueInput
  }

  export type ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type ProgramWorkoutUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutProgramInput | ProgramWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutProgramNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutProgramInput | UserWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutProgramInput | UserWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutProgramInput | UserWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutProgramsNestedInput = {
    create?: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgramsInput
    upsert?: UserUpsertWithoutProgramsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProgramsInput, UserUpdateWithoutProgramsInput>, UserUncheckedUpdateWithoutProgramsInput>
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput> | ProgramWorkoutCreateWithoutProgramInput[] | ProgramWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutProgramInput | ProgramWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ProgramWorkoutCreateManyProgramInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput | ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutProgramInput | ProgramWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput> | UserWorkoutCreateWithoutProgramInput[] | UserWorkoutUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutProgramInput | UserWorkoutCreateOrConnectWithoutProgramInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutProgramInput | UserWorkoutUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: UserWorkoutCreateManyProgramInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutProgramInput | UserWorkoutUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutProgramInput | UserWorkoutUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type ProgramWorkoutCreatedaysOfWeekInput = {
    set: $Enums.DaysOfWeek[]
  }

  export type ProgramCreateNestedOneWithoutProgramWorkoutsInput = {
    create?: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutProgramWorkoutsInput
    connect?: ProgramWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutProgramWorkoutsInput = {
    create?: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgramWorkoutsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type EnumWorkoutLevelFieldUpdateOperationsInput = {
    set?: $Enums.WorkoutLevel
  }

  export type EnumWorkoutGoalFieldUpdateOperationsInput = {
    set?: $Enums.WorkoutGoal
  }

  export type ProgramWorkoutUpdatedaysOfWeekInput = {
    set?: $Enums.DaysOfWeek[]
    push?: $Enums.DaysOfWeek | $Enums.DaysOfWeek[]
  }

  export type ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput = {
    create?: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutProgramWorkoutsInput
    upsert?: ProgramUpsertWithoutProgramWorkoutsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutProgramWorkoutsInput, ProgramUpdateWithoutProgramWorkoutsInput>, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput = {
    create?: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgramWorkoutsInput
    upsert?: WorkoutUpsertWithoutProgramWorkoutsInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutProgramWorkoutsInput, WorkoutUpdateWithoutProgramWorkoutsInput>, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type UserCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutExerciseCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
  }

  export type UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutWorkoutsNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    upsert?: UserUpsertWithoutWorkoutsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutsInput, UserUpdateWithoutWorkoutsInput>, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type WorkoutExerciseUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type ProgramWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput | ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutWorkoutInput | UserWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput> | ProgramWorkoutCreateWithoutWorkoutInput[] | ProgramWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgramWorkoutCreateOrConnectWithoutWorkoutInput | ProgramWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgramWorkoutCreateManyWorkoutInputEnvelope
    set?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    disconnect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    delete?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    connect?: ProgramWorkoutWhereUniqueInput | ProgramWorkoutWhereUniqueInput[]
    update?: ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput | ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
  }

  export type UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput> | UserWorkoutCreateWithoutWorkoutInput[] | UserWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutWorkoutInput | UserWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: UserWorkoutCreateManyWorkoutInputEnvelope
    set?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    disconnect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    delete?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    connect?: UserWorkoutWhereUniqueInput | UserWorkoutWhereUniqueInput[]
    update?: UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: UserWorkoutUpdateManyWithWhereWithoutWorkoutInput | UserWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
  }

  export type ExerciseCreateNestedOneWithoutWorkoutExercisesInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutExercisesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutWorkoutExercisesInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutExercisesInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutExercisesInput
    upsert?: ExerciseUpsertWithoutWorkoutExercisesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutWorkoutExercisesInput, ExerciseUpdateWithoutWorkoutExercisesInput>, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutExercisesInput
    upsert?: WorkoutUpsertWithoutWorkoutExercisesInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutWorkoutExercisesInput, WorkoutUpdateWithoutWorkoutExercisesInput>, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput> | UserWorkoutExerciseCreateWithoutWorkoutExerciseInput[] | UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput | UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput[]
    createMany?: UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput | UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput = {
    create?: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput
    connect?: WorkoutExerciseWhereUniqueInput
  }

  export type UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput = {
    create?: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput
    connect?: UserWorkoutWhereUniqueInput
  }

  export type UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
  }

  export type UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
  }

  export type UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
  }

  export type UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
  }

  export type WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput
    upsert?: WorkoutExerciseUpsertWithoutUserWorkoutExercisesInput
    connect?: WorkoutExerciseWhereUniqueInput
    update?: XOR<XOR<WorkoutExerciseUpdateToOneWithWhereWithoutUserWorkoutExercisesInput, WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput>, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput = {
    create?: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    connectOrCreate?: UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput
    upsert?: UserWorkoutUpsertWithoutUserWorkoutExercisesInput
    connect?: UserWorkoutWhereUniqueInput
    update?: XOR<XOR<UserWorkoutUpdateToOneWithWhereWithoutUserWorkoutExercisesInput, UserWorkoutUpdateWithoutUserWorkoutExercisesInput>, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    disconnect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    delete?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    update?: UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
  }

  export type UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    disconnect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    delete?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    update?: UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
  }

  export type UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserStrengthSetCreateWithoutUserWorkoutExerciseInput[] | UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    disconnect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    delete?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    connect?: UserStrengthSetWhereUniqueInput | UserStrengthSetWhereUniqueInput[]
    update?: UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
  }

  export type UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput = {
    create?: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput> | UserCardioSetCreateWithoutUserWorkoutExerciseInput[] | UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput[]
    connectOrCreate?: UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput | UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput[]
    upsert?: UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    createMany?: UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope
    set?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    disconnect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    delete?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    connect?: UserCardioSetWhereUniqueInput | UserCardioSetWhereUniqueInput[]
    update?: UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput | UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput[]
    updateMany?: UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput | UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput[]
    deleteMany?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserWorkoutInput = {
    create?: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWorkoutInput
    connect?: UserWhereUniqueInput
  }

  export type UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type ProgramCreateNestedOneWithoutUserWorkoutInput = {
    create?: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutUserWorkoutInput
    connect?: ProgramWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutUserWorkoutsInput = {
    create?: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserWorkoutsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutUserWorkoutNestedInput = {
    create?: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWorkoutInput
    upsert?: UserUpsertWithoutUserWorkoutInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserWorkoutInput, UserUpdateWithoutUserWorkoutInput>, UserUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput | UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type ProgramUpdateOneWithoutUserWorkoutNestedInput = {
    create?: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutUserWorkoutInput
    upsert?: ProgramUpsertWithoutUserWorkoutInput
    disconnect?: ProgramWhereInput | boolean
    delete?: ProgramWhereInput | boolean
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutUserWorkoutInput, ProgramUpdateWithoutUserWorkoutInput>, ProgramUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type WorkoutUpdateOneWithoutUserWorkoutsNestedInput = {
    create?: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserWorkoutsInput
    upsert?: WorkoutUpsertWithoutUserWorkoutsInput
    disconnect?: WorkoutWhereInput | boolean
    delete?: WorkoutWhereInput | boolean
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutUserWorkoutsInput, WorkoutUpdateWithoutUserWorkoutsInput>, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput = {
    create?: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput> | UserWorkoutExerciseCreateWithoutUserWorkoutInput[] | UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput[]
    connectOrCreate?: UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput | UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput[]
    upsert?: UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput[]
    createMany?: UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope
    set?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    disconnect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    delete?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    connect?: UserWorkoutExerciseWhereUniqueInput | UserWorkoutExerciseWhereUniqueInput[]
    update?: UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput | UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput[]
    updateMany?: UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput | UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput[]
    deleteMany?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
  }

  export type FoodItemBrandCreateNestedOneWithoutFoodItemsInput = {
    create?: XOR<FoodItemBrandCreateWithoutFoodItemsInput, FoodItemBrandUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: FoodItemBrandCreateOrConnectWithoutFoodItemsInput
    connect?: FoodItemBrandWhereUniqueInput
  }

  export type FoodItemCategoryCreateNestedManyWithoutFoodItemsInput = {
    create?: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput> | FoodItemCategoryCreateWithoutFoodItemsInput[] | FoodItemCategoryUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemCategoryCreateOrConnectWithoutFoodItemsInput | FoodItemCategoryCreateOrConnectWithoutFoodItemsInput[]
    connect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
  }

  export type FoodItemLabelCreateNestedManyWithoutFoodItemsInput = {
    create?: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput> | FoodItemLabelCreateWithoutFoodItemsInput[] | FoodItemLabelUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemLabelCreateOrConnectWithoutFoodItemsInput | FoodItemLabelCreateOrConnectWithoutFoodItemsInput[]
    connect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
  }

  export type MealFoodItemCreateNestedManyWithoutFoodItemInput = {
    create?: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput> | MealFoodItemCreateWithoutFoodItemInput[] | MealFoodItemUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutFoodItemInput | MealFoodItemCreateOrConnectWithoutFoodItemInput[]
    createMany?: MealFoodItemCreateManyFoodItemInputEnvelope
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
  }

  export type FoodItemImgCreateNestedManyWithoutFoodItemInput = {
    create?: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput> | FoodItemImgCreateWithoutFoodItemInput[] | FoodItemImgUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: FoodItemImgCreateOrConnectWithoutFoodItemInput | FoodItemImgCreateOrConnectWithoutFoodItemInput[]
    createMany?: FoodItemImgCreateManyFoodItemInputEnvelope
    connect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
  }

  export type FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput = {
    create?: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput> | FoodItemCategoryCreateWithoutFoodItemsInput[] | FoodItemCategoryUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemCategoryCreateOrConnectWithoutFoodItemsInput | FoodItemCategoryCreateOrConnectWithoutFoodItemsInput[]
    connect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
  }

  export type FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput = {
    create?: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput> | FoodItemLabelCreateWithoutFoodItemsInput[] | FoodItemLabelUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemLabelCreateOrConnectWithoutFoodItemsInput | FoodItemLabelCreateOrConnectWithoutFoodItemsInput[]
    connect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
  }

  export type MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput = {
    create?: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput> | MealFoodItemCreateWithoutFoodItemInput[] | MealFoodItemUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutFoodItemInput | MealFoodItemCreateOrConnectWithoutFoodItemInput[]
    createMany?: MealFoodItemCreateManyFoodItemInputEnvelope
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
  }

  export type FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput = {
    create?: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput> | FoodItemImgCreateWithoutFoodItemInput[] | FoodItemImgUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: FoodItemImgCreateOrConnectWithoutFoodItemInput | FoodItemImgCreateOrConnectWithoutFoodItemInput[]
    createMany?: FoodItemImgCreateManyFoodItemInputEnvelope
    connect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
  }

  export type FoodItemBrandUpdateOneWithoutFoodItemsNestedInput = {
    create?: XOR<FoodItemBrandCreateWithoutFoodItemsInput, FoodItemBrandUncheckedCreateWithoutFoodItemsInput>
    connectOrCreate?: FoodItemBrandCreateOrConnectWithoutFoodItemsInput
    upsert?: FoodItemBrandUpsertWithoutFoodItemsInput
    disconnect?: FoodItemBrandWhereInput | boolean
    delete?: FoodItemBrandWhereInput | boolean
    connect?: FoodItemBrandWhereUniqueInput
    update?: XOR<XOR<FoodItemBrandUpdateToOneWithWhereWithoutFoodItemsInput, FoodItemBrandUpdateWithoutFoodItemsInput>, FoodItemBrandUncheckedUpdateWithoutFoodItemsInput>
  }

  export type FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput = {
    create?: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput> | FoodItemCategoryCreateWithoutFoodItemsInput[] | FoodItemCategoryUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemCategoryCreateOrConnectWithoutFoodItemsInput | FoodItemCategoryCreateOrConnectWithoutFoodItemsInput[]
    upsert?: FoodItemCategoryUpsertWithWhereUniqueWithoutFoodItemsInput | FoodItemCategoryUpsertWithWhereUniqueWithoutFoodItemsInput[]
    set?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    disconnect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    delete?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    connect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    update?: FoodItemCategoryUpdateWithWhereUniqueWithoutFoodItemsInput | FoodItemCategoryUpdateWithWhereUniqueWithoutFoodItemsInput[]
    updateMany?: FoodItemCategoryUpdateManyWithWhereWithoutFoodItemsInput | FoodItemCategoryUpdateManyWithWhereWithoutFoodItemsInput[]
    deleteMany?: FoodItemCategoryScalarWhereInput | FoodItemCategoryScalarWhereInput[]
  }

  export type FoodItemLabelUpdateManyWithoutFoodItemsNestedInput = {
    create?: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput> | FoodItemLabelCreateWithoutFoodItemsInput[] | FoodItemLabelUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemLabelCreateOrConnectWithoutFoodItemsInput | FoodItemLabelCreateOrConnectWithoutFoodItemsInput[]
    upsert?: FoodItemLabelUpsertWithWhereUniqueWithoutFoodItemsInput | FoodItemLabelUpsertWithWhereUniqueWithoutFoodItemsInput[]
    set?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    disconnect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    delete?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    connect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    update?: FoodItemLabelUpdateWithWhereUniqueWithoutFoodItemsInput | FoodItemLabelUpdateWithWhereUniqueWithoutFoodItemsInput[]
    updateMany?: FoodItemLabelUpdateManyWithWhereWithoutFoodItemsInput | FoodItemLabelUpdateManyWithWhereWithoutFoodItemsInput[]
    deleteMany?: FoodItemLabelScalarWhereInput | FoodItemLabelScalarWhereInput[]
  }

  export type MealFoodItemUpdateManyWithoutFoodItemNestedInput = {
    create?: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput> | MealFoodItemCreateWithoutFoodItemInput[] | MealFoodItemUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutFoodItemInput | MealFoodItemCreateOrConnectWithoutFoodItemInput[]
    upsert?: MealFoodItemUpsertWithWhereUniqueWithoutFoodItemInput | MealFoodItemUpsertWithWhereUniqueWithoutFoodItemInput[]
    createMany?: MealFoodItemCreateManyFoodItemInputEnvelope
    set?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    disconnect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    delete?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    update?: MealFoodItemUpdateWithWhereUniqueWithoutFoodItemInput | MealFoodItemUpdateWithWhereUniqueWithoutFoodItemInput[]
    updateMany?: MealFoodItemUpdateManyWithWhereWithoutFoodItemInput | MealFoodItemUpdateManyWithWhereWithoutFoodItemInput[]
    deleteMany?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
  }

  export type FoodItemImgUpdateManyWithoutFoodItemNestedInput = {
    create?: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput> | FoodItemImgCreateWithoutFoodItemInput[] | FoodItemImgUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: FoodItemImgCreateOrConnectWithoutFoodItemInput | FoodItemImgCreateOrConnectWithoutFoodItemInput[]
    upsert?: FoodItemImgUpsertWithWhereUniqueWithoutFoodItemInput | FoodItemImgUpsertWithWhereUniqueWithoutFoodItemInput[]
    createMany?: FoodItemImgCreateManyFoodItemInputEnvelope
    set?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    disconnect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    delete?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    connect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    update?: FoodItemImgUpdateWithWhereUniqueWithoutFoodItemInput | FoodItemImgUpdateWithWhereUniqueWithoutFoodItemInput[]
    updateMany?: FoodItemImgUpdateManyWithWhereWithoutFoodItemInput | FoodItemImgUpdateManyWithWhereWithoutFoodItemInput[]
    deleteMany?: FoodItemImgScalarWhereInput | FoodItemImgScalarWhereInput[]
  }

  export type FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput = {
    create?: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput> | FoodItemCategoryCreateWithoutFoodItemsInput[] | FoodItemCategoryUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemCategoryCreateOrConnectWithoutFoodItemsInput | FoodItemCategoryCreateOrConnectWithoutFoodItemsInput[]
    upsert?: FoodItemCategoryUpsertWithWhereUniqueWithoutFoodItemsInput | FoodItemCategoryUpsertWithWhereUniqueWithoutFoodItemsInput[]
    set?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    disconnect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    delete?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    connect?: FoodItemCategoryWhereUniqueInput | FoodItemCategoryWhereUniqueInput[]
    update?: FoodItemCategoryUpdateWithWhereUniqueWithoutFoodItemsInput | FoodItemCategoryUpdateWithWhereUniqueWithoutFoodItemsInput[]
    updateMany?: FoodItemCategoryUpdateManyWithWhereWithoutFoodItemsInput | FoodItemCategoryUpdateManyWithWhereWithoutFoodItemsInput[]
    deleteMany?: FoodItemCategoryScalarWhereInput | FoodItemCategoryScalarWhereInput[]
  }

  export type FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput = {
    create?: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput> | FoodItemLabelCreateWithoutFoodItemsInput[] | FoodItemLabelUncheckedCreateWithoutFoodItemsInput[]
    connectOrCreate?: FoodItemLabelCreateOrConnectWithoutFoodItemsInput | FoodItemLabelCreateOrConnectWithoutFoodItemsInput[]
    upsert?: FoodItemLabelUpsertWithWhereUniqueWithoutFoodItemsInput | FoodItemLabelUpsertWithWhereUniqueWithoutFoodItemsInput[]
    set?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    disconnect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    delete?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    connect?: FoodItemLabelWhereUniqueInput | FoodItemLabelWhereUniqueInput[]
    update?: FoodItemLabelUpdateWithWhereUniqueWithoutFoodItemsInput | FoodItemLabelUpdateWithWhereUniqueWithoutFoodItemsInput[]
    updateMany?: FoodItemLabelUpdateManyWithWhereWithoutFoodItemsInput | FoodItemLabelUpdateManyWithWhereWithoutFoodItemsInput[]
    deleteMany?: FoodItemLabelScalarWhereInput | FoodItemLabelScalarWhereInput[]
  }

  export type MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput = {
    create?: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput> | MealFoodItemCreateWithoutFoodItemInput[] | MealFoodItemUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutFoodItemInput | MealFoodItemCreateOrConnectWithoutFoodItemInput[]
    upsert?: MealFoodItemUpsertWithWhereUniqueWithoutFoodItemInput | MealFoodItemUpsertWithWhereUniqueWithoutFoodItemInput[]
    createMany?: MealFoodItemCreateManyFoodItemInputEnvelope
    set?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    disconnect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    delete?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    update?: MealFoodItemUpdateWithWhereUniqueWithoutFoodItemInput | MealFoodItemUpdateWithWhereUniqueWithoutFoodItemInput[]
    updateMany?: MealFoodItemUpdateManyWithWhereWithoutFoodItemInput | MealFoodItemUpdateManyWithWhereWithoutFoodItemInput[]
    deleteMany?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
  }

  export type FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput = {
    create?: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput> | FoodItemImgCreateWithoutFoodItemInput[] | FoodItemImgUncheckedCreateWithoutFoodItemInput[]
    connectOrCreate?: FoodItemImgCreateOrConnectWithoutFoodItemInput | FoodItemImgCreateOrConnectWithoutFoodItemInput[]
    upsert?: FoodItemImgUpsertWithWhereUniqueWithoutFoodItemInput | FoodItemImgUpsertWithWhereUniqueWithoutFoodItemInput[]
    createMany?: FoodItemImgCreateManyFoodItemInputEnvelope
    set?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    disconnect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    delete?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    connect?: FoodItemImgWhereUniqueInput | FoodItemImgWhereUniqueInput[]
    update?: FoodItemImgUpdateWithWhereUniqueWithoutFoodItemInput | FoodItemImgUpdateWithWhereUniqueWithoutFoodItemInput[]
    updateMany?: FoodItemImgUpdateManyWithWhereWithoutFoodItemInput | FoodItemImgUpdateManyWithWhereWithoutFoodItemInput[]
    deleteMany?: FoodItemImgScalarWhereInput | FoodItemImgScalarWhereInput[]
  }

  export type FoodItemCreateNestedManyWithoutLabelsInput = {
    create?: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput> | FoodItemCreateWithoutLabelsInput[] | FoodItemUncheckedCreateWithoutLabelsInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLabelsInput | FoodItemCreateOrConnectWithoutLabelsInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUncheckedCreateNestedManyWithoutLabelsInput = {
    create?: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput> | FoodItemCreateWithoutLabelsInput[] | FoodItemUncheckedCreateWithoutLabelsInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLabelsInput | FoodItemCreateOrConnectWithoutLabelsInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUpdateManyWithoutLabelsNestedInput = {
    create?: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput> | FoodItemCreateWithoutLabelsInput[] | FoodItemUncheckedCreateWithoutLabelsInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLabelsInput | FoodItemCreateOrConnectWithoutLabelsInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutLabelsInput | FoodItemUpsertWithWhereUniqueWithoutLabelsInput[]
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutLabelsInput | FoodItemUpdateWithWhereUniqueWithoutLabelsInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutLabelsInput | FoodItemUpdateManyWithWhereWithoutLabelsInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type FoodItemUncheckedUpdateManyWithoutLabelsNestedInput = {
    create?: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput> | FoodItemCreateWithoutLabelsInput[] | FoodItemUncheckedCreateWithoutLabelsInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutLabelsInput | FoodItemCreateOrConnectWithoutLabelsInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutLabelsInput | FoodItemUpsertWithWhereUniqueWithoutLabelsInput[]
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutLabelsInput | FoodItemUpdateWithWhereUniqueWithoutLabelsInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutLabelsInput | FoodItemUpdateManyWithWhereWithoutLabelsInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type FoodItemCreateNestedOneWithoutImagesInput = {
    create?: XOR<FoodItemCreateWithoutImagesInput, FoodItemUncheckedCreateWithoutImagesInput>
    connectOrCreate?: FoodItemCreateOrConnectWithoutImagesInput
    connect?: FoodItemWhereUniqueInput
  }

  export type FoodItemUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<FoodItemCreateWithoutImagesInput, FoodItemUncheckedCreateWithoutImagesInput>
    connectOrCreate?: FoodItemCreateOrConnectWithoutImagesInput
    upsert?: FoodItemUpsertWithoutImagesInput
    connect?: FoodItemWhereUniqueInput
    update?: XOR<XOR<FoodItemUpdateToOneWithWhereWithoutImagesInput, FoodItemUpdateWithoutImagesInput>, FoodItemUncheckedUpdateWithoutImagesInput>
  }

  export type FoodItemCreateNestedManyWithoutBrandInput = {
    create?: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput> | FoodItemCreateWithoutBrandInput[] | FoodItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutBrandInput | FoodItemCreateOrConnectWithoutBrandInput[]
    createMany?: FoodItemCreateManyBrandInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput> | FoodItemCreateWithoutBrandInput[] | FoodItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutBrandInput | FoodItemCreateOrConnectWithoutBrandInput[]
    createMany?: FoodItemCreateManyBrandInputEnvelope
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUpdateManyWithoutBrandNestedInput = {
    create?: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput> | FoodItemCreateWithoutBrandInput[] | FoodItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutBrandInput | FoodItemCreateOrConnectWithoutBrandInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutBrandInput | FoodItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: FoodItemCreateManyBrandInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutBrandInput | FoodItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutBrandInput | FoodItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type FoodItemUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput> | FoodItemCreateWithoutBrandInput[] | FoodItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutBrandInput | FoodItemCreateOrConnectWithoutBrandInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutBrandInput | FoodItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: FoodItemCreateManyBrandInputEnvelope
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutBrandInput | FoodItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutBrandInput | FoodItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type FoodItemCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput> | FoodItemCreateWithoutCategoriesInput[] | FoodItemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoriesInput | FoodItemCreateOrConnectWithoutCategoriesInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput> | FoodItemCreateWithoutCategoriesInput[] | FoodItemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoriesInput | FoodItemCreateOrConnectWithoutCategoriesInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
  }

  export type FoodItemUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput> | FoodItemCreateWithoutCategoriesInput[] | FoodItemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoriesInput | FoodItemCreateOrConnectWithoutCategoriesInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutCategoriesInput | FoodItemUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutCategoriesInput | FoodItemUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutCategoriesInput | FoodItemUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type FoodItemUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput> | FoodItemCreateWithoutCategoriesInput[] | FoodItemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FoodItemCreateOrConnectWithoutCategoriesInput | FoodItemCreateOrConnectWithoutCategoriesInput[]
    upsert?: FoodItemUpsertWithWhereUniqueWithoutCategoriesInput | FoodItemUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    disconnect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    delete?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    connect?: FoodItemWhereUniqueInput | FoodItemWhereUniqueInput[]
    update?: FoodItemUpdateWithWhereUniqueWithoutCategoriesInput | FoodItemUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: FoodItemUpdateManyWithWhereWithoutCategoriesInput | FoodItemUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMealsInput = {
    create?: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealsInput
    connect?: UserWhereUniqueInput
  }

  export type MealFoodItemCreateNestedManyWithoutMealInput = {
    create?: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput> | MealFoodItemCreateWithoutMealInput[] | MealFoodItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutMealInput | MealFoodItemCreateOrConnectWithoutMealInput[]
    createMany?: MealFoodItemCreateManyMealInputEnvelope
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
  }

  export type UserMealCreateNestedManyWithoutMealInput = {
    create?: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput> | UserMealCreateWithoutMealInput[] | UserMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutMealInput | UserMealCreateOrConnectWithoutMealInput[]
    createMany?: UserMealCreateManyMealInputEnvelope
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutMealInput = {
    create?: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput> | ImageCreateWithoutMealInput[] | ImageUncheckedCreateWithoutMealInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutMealInput | ImageCreateOrConnectWithoutMealInput[]
    createMany?: ImageCreateManyMealInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type MealFoodItemUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput> | MealFoodItemCreateWithoutMealInput[] | MealFoodItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutMealInput | MealFoodItemCreateOrConnectWithoutMealInput[]
    createMany?: MealFoodItemCreateManyMealInputEnvelope
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
  }

  export type UserMealUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput> | UserMealCreateWithoutMealInput[] | UserMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutMealInput | UserMealCreateOrConnectWithoutMealInput[]
    createMany?: UserMealCreateManyMealInputEnvelope
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput> | ImageCreateWithoutMealInput[] | ImageUncheckedCreateWithoutMealInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutMealInput | ImageCreateOrConnectWithoutMealInput[]
    createMany?: ImageCreateManyMealInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type EnumMealTypeFieldUpdateOperationsInput = {
    set?: $Enums.MealType
  }

  export type UserUpdateOneWithoutMealsNestedInput = {
    create?: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealsInput
    upsert?: UserUpsertWithoutMealsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealsInput, UserUpdateWithoutMealsInput>, UserUncheckedUpdateWithoutMealsInput>
  }

  export type MealFoodItemUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput> | MealFoodItemCreateWithoutMealInput[] | MealFoodItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutMealInput | MealFoodItemCreateOrConnectWithoutMealInput[]
    upsert?: MealFoodItemUpsertWithWhereUniqueWithoutMealInput | MealFoodItemUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealFoodItemCreateManyMealInputEnvelope
    set?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    disconnect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    delete?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    update?: MealFoodItemUpdateWithWhereUniqueWithoutMealInput | MealFoodItemUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealFoodItemUpdateManyWithWhereWithoutMealInput | MealFoodItemUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
  }

  export type UserMealUpdateManyWithoutMealNestedInput = {
    create?: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput> | UserMealCreateWithoutMealInput[] | UserMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutMealInput | UserMealCreateOrConnectWithoutMealInput[]
    upsert?: UserMealUpsertWithWhereUniqueWithoutMealInput | UserMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: UserMealCreateManyMealInputEnvelope
    set?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    disconnect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    delete?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    update?: UserMealUpdateWithWhereUniqueWithoutMealInput | UserMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: UserMealUpdateManyWithWhereWithoutMealInput | UserMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutMealNestedInput = {
    create?: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput> | ImageCreateWithoutMealInput[] | ImageUncheckedCreateWithoutMealInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutMealInput | ImageCreateOrConnectWithoutMealInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutMealInput | ImageUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: ImageCreateManyMealInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutMealInput | ImageUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutMealInput | ImageUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MealFoodItemUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput> | MealFoodItemCreateWithoutMealInput[] | MealFoodItemUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealFoodItemCreateOrConnectWithoutMealInput | MealFoodItemCreateOrConnectWithoutMealInput[]
    upsert?: MealFoodItemUpsertWithWhereUniqueWithoutMealInput | MealFoodItemUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealFoodItemCreateManyMealInputEnvelope
    set?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    disconnect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    delete?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    connect?: MealFoodItemWhereUniqueInput | MealFoodItemWhereUniqueInput[]
    update?: MealFoodItemUpdateWithWhereUniqueWithoutMealInput | MealFoodItemUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealFoodItemUpdateManyWithWhereWithoutMealInput | MealFoodItemUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
  }

  export type UserMealUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput> | UserMealCreateWithoutMealInput[] | UserMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: UserMealCreateOrConnectWithoutMealInput | UserMealCreateOrConnectWithoutMealInput[]
    upsert?: UserMealUpsertWithWhereUniqueWithoutMealInput | UserMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: UserMealCreateManyMealInputEnvelope
    set?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    disconnect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    delete?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    connect?: UserMealWhereUniqueInput | UserMealWhereUniqueInput[]
    update?: UserMealUpdateWithWhereUniqueWithoutMealInput | UserMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: UserMealUpdateManyWithWhereWithoutMealInput | UserMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput> | ImageCreateWithoutMealInput[] | ImageUncheckedCreateWithoutMealInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutMealInput | ImageCreateOrConnectWithoutMealInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutMealInput | ImageUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: ImageCreateManyMealInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutMealInput | ImageUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutMealInput | ImageUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MealCreateNestedOneWithoutMealFoodItemsInput = {
    create?: XOR<MealCreateWithoutMealFoodItemsInput, MealUncheckedCreateWithoutMealFoodItemsInput>
    connectOrCreate?: MealCreateOrConnectWithoutMealFoodItemsInput
    connect?: MealWhereUniqueInput
  }

  export type FoodItemCreateNestedOneWithoutMealFoodItemInput = {
    create?: XOR<FoodItemCreateWithoutMealFoodItemInput, FoodItemUncheckedCreateWithoutMealFoodItemInput>
    connectOrCreate?: FoodItemCreateOrConnectWithoutMealFoodItemInput
    connect?: FoodItemWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutMealFoodItemsNestedInput = {
    create?: XOR<MealCreateWithoutMealFoodItemsInput, MealUncheckedCreateWithoutMealFoodItemsInput>
    connectOrCreate?: MealCreateOrConnectWithoutMealFoodItemsInput
    upsert?: MealUpsertWithoutMealFoodItemsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutMealFoodItemsInput, MealUpdateWithoutMealFoodItemsInput>, MealUncheckedUpdateWithoutMealFoodItemsInput>
  }

  export type FoodItemUpdateOneRequiredWithoutMealFoodItemNestedInput = {
    create?: XOR<FoodItemCreateWithoutMealFoodItemInput, FoodItemUncheckedCreateWithoutMealFoodItemInput>
    connectOrCreate?: FoodItemCreateOrConnectWithoutMealFoodItemInput
    upsert?: FoodItemUpsertWithoutMealFoodItemInput
    connect?: FoodItemWhereUniqueInput
    update?: XOR<XOR<FoodItemUpdateToOneWithWhereWithoutMealFoodItemInput, FoodItemUpdateWithoutMealFoodItemInput>, FoodItemUncheckedUpdateWithoutMealFoodItemInput>
  }

  export type MealCreateNestedOneWithoutUserMealsInput = {
    create?: XOR<MealCreateWithoutUserMealsInput, MealUncheckedCreateWithoutUserMealsInput>
    connectOrCreate?: MealCreateOrConnectWithoutUserMealsInput
    connect?: MealWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserMealsInput = {
    create?: XOR<UserCreateWithoutUserMealsInput, UserUncheckedCreateWithoutUserMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMealsInput
    connect?: UserWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutUserMealsNestedInput = {
    create?: XOR<MealCreateWithoutUserMealsInput, MealUncheckedCreateWithoutUserMealsInput>
    connectOrCreate?: MealCreateOrConnectWithoutUserMealsInput
    upsert?: MealUpsertWithoutUserMealsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutUserMealsInput, MealUpdateWithoutUserMealsInput>, MealUncheckedUpdateWithoutUserMealsInput>
  }

  export type UserUpdateOneRequiredWithoutUserMealsNestedInput = {
    create?: XOR<UserCreateWithoutUserMealsInput, UserUncheckedCreateWithoutUserMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMealsInput
    upsert?: UserUpsertWithoutUserMealsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserMealsInput, UserUpdateWithoutUserMealsInput>, UserUncheckedUpdateWithoutUserMealsInput>
  }

  export type MealCreateNestedOneWithoutImagesInput = {
    create?: XOR<MealCreateWithoutImagesInput, MealUncheckedCreateWithoutImagesInput>
    connectOrCreate?: MealCreateOrConnectWithoutImagesInput
    connect?: MealWhereUniqueInput
  }

  export type MealUpdateOneWithoutImagesNestedInput = {
    create?: XOR<MealCreateWithoutImagesInput, MealUncheckedCreateWithoutImagesInput>
    connectOrCreate?: MealCreateOrConnectWithoutImagesInput
    upsert?: MealUpsertWithoutImagesInput
    disconnect?: MealWhereInput | boolean
    delete?: MealWhereInput | boolean
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutImagesInput, MealUpdateWithoutImagesInput>, MealUncheckedUpdateWithoutImagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumWorkoutLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutLevel | EnumWorkoutLevelFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutLevelFilter<$PrismaModel> | $Enums.WorkoutLevel
  }

  export type NestedEnumWorkoutGoalFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutGoal | EnumWorkoutGoalFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutGoalFilter<$PrismaModel> | $Enums.WorkoutGoal
  }

  export type NestedEnumWorkoutLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutLevel | EnumWorkoutLevelFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutLevel[] | ListEnumWorkoutLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutLevelWithAggregatesFilter<$PrismaModel> | $Enums.WorkoutLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkoutLevelFilter<$PrismaModel>
    _max?: NestedEnumWorkoutLevelFilter<$PrismaModel>
  }

  export type NestedEnumWorkoutGoalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkoutGoal | EnumWorkoutGoalFieldRefInput<$PrismaModel>
    in?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkoutGoal[] | ListEnumWorkoutGoalFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkoutGoalWithAggregatesFilter<$PrismaModel> | $Enums.WorkoutGoal
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkoutGoalFilter<$PrismaModel>
    _max?: NestedEnumWorkoutGoalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type NestedEnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type ProgramCreateWithoutOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput>
  }

  export type ProgramCreateManyOwnerInputEnvelope = {
    data: ProgramCreateManyOwnerInput | ProgramCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type WorkoutCreateManyOwnerInputEnvelope = {
    data: WorkoutCreateManyOwnerInput | WorkoutCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type UserWorkoutCreateManyOwnerInputEnvelope = {
    data: UserWorkoutCreateManyOwnerInput | UserWorkoutCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type MealCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoodItems?: MealFoodItemCreateNestedManyWithoutMealInput
    userMeals?: UserMealCreateNestedManyWithoutMealInput
    images?: ImageCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutOwnerInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoodItems?: MealFoodItemUncheckedCreateNestedManyWithoutMealInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutMealInput
    images?: ImageUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutOwnerInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput>
  }

  export type MealCreateManyOwnerInputEnvelope = {
    data: MealCreateManyOwnerInput | MealCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UserMealCreateWithoutUserInput = {
    id?: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meal: MealCreateNestedOneWithoutUserMealsInput
  }

  export type UserMealUncheckedCreateWithoutUserInput = {
    id?: string
    mealId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealCreateOrConnectWithoutUserInput = {
    where: UserMealWhereUniqueInput
    create: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput>
  }

  export type UserMealCreateManyUserInputEnvelope = {
    data: UserMealCreateManyUserInput | UserMealCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutOwnerInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentCreateNestedManyWithoutExercisesInput
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutExercisesInput
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutOwnerInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput>
  }

  export type ExerciseCreateManyOwnerInputEnvelope = {
    data: ExerciseCreateManyOwnerInput | ExerciseCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ProgramUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    update: XOR<ProgramUpdateWithoutOwnerInput, ProgramUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProgramCreateWithoutOwnerInput, ProgramUncheckedCreateWithoutOwnerInput>
  }

  export type ProgramUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProgramWhereUniqueInput
    data: XOR<ProgramUpdateWithoutOwnerInput, ProgramUncheckedUpdateWithoutOwnerInput>
  }

  export type ProgramUpdateManyWithWhereWithoutOwnerInput = {
    where: ProgramScalarWhereInput
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ProgramScalarWhereInput = {
    AND?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    OR?: ProgramScalarWhereInput[]
    NOT?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    notes?: StringNullableFilter<"Program"> | string | null
    startDate?: DateTimeFilter<"Program"> | Date | string
    endDate?: DateTimeFilter<"Program"> | Date | string
    isActive?: BoolFilter<"Program"> | boolean
    ownerId?: StringFilter<"Program"> | string
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
  }

  export type WorkoutUpsertWithWhereUniqueWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutOwnerInput, WorkoutUncheckedUpdateWithoutOwnerInput>
    create: XOR<WorkoutCreateWithoutOwnerInput, WorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutOwnerInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutOwnerInput, WorkoutUncheckedUpdateWithoutOwnerInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutOwnerInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutOwnerInput>
  }

  export type WorkoutScalarWhereInput = {
    AND?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    OR?: WorkoutScalarWhereInput[]
    NOT?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringNullableFilter<"Workout"> | string | null
    isTemplate?: BoolFilter<"Workout"> | boolean
    notes?: StringNullableFilter<"Workout"> | string | null
    ownerId?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutOwnerInput, UserWorkoutUncheckedUpdateWithoutOwnerInput>
    create: XOR<UserWorkoutCreateWithoutOwnerInput, UserWorkoutUncheckedCreateWithoutOwnerInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutOwnerInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutOwnerInput, UserWorkoutUncheckedUpdateWithoutOwnerInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutOwnerInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutOwnerInput>
  }

  export type UserWorkoutScalarWhereInput = {
    AND?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
    OR?: UserWorkoutScalarWhereInput[]
    NOT?: UserWorkoutScalarWhereInput | UserWorkoutScalarWhereInput[]
    id?: StringFilter<"UserWorkout"> | string
    dateCompleted?: DateTimeNullableFilter<"UserWorkout"> | Date | string | null
    ownerId?: StringFilter<"UserWorkout"> | string
    programId?: StringNullableFilter<"UserWorkout"> | string | null
    workoutId?: StringNullableFilter<"UserWorkout"> | string | null
    createdAt?: DateTimeFilter<"UserWorkout"> | Date | string
  }

  export type MealUpsertWithWhereUniqueWithoutOwnerInput = {
    where: MealWhereUniqueInput
    update: XOR<MealUpdateWithoutOwnerInput, MealUncheckedUpdateWithoutOwnerInput>
    create: XOR<MealCreateWithoutOwnerInput, MealUncheckedCreateWithoutOwnerInput>
  }

  export type MealUpdateWithWhereUniqueWithoutOwnerInput = {
    where: MealWhereUniqueInput
    data: XOR<MealUpdateWithoutOwnerInput, MealUncheckedUpdateWithoutOwnerInput>
  }

  export type MealUpdateManyWithWhereWithoutOwnerInput = {
    where: MealScalarWhereInput
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyWithoutOwnerInput>
  }

  export type MealScalarWhereInput = {
    AND?: MealScalarWhereInput | MealScalarWhereInput[]
    OR?: MealScalarWhereInput[]
    NOT?: MealScalarWhereInput | MealScalarWhereInput[]
    id?: StringFilter<"Meal"> | string
    name?: StringNullableFilter<"Meal"> | string | null
    mealType?: EnumMealTypeFilter<"Meal"> | $Enums.MealType
    ownerId?: StringNullableFilter<"Meal"> | string | null
    notes?: StringNullableFilter<"Meal"> | string | null
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
  }

  export type UserMealUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMealWhereUniqueInput
    update: XOR<UserMealUpdateWithoutUserInput, UserMealUncheckedUpdateWithoutUserInput>
    create: XOR<UserMealCreateWithoutUserInput, UserMealUncheckedCreateWithoutUserInput>
  }

  export type UserMealUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMealWhereUniqueInput
    data: XOR<UserMealUpdateWithoutUserInput, UserMealUncheckedUpdateWithoutUserInput>
  }

  export type UserMealUpdateManyWithWhereWithoutUserInput = {
    where: UserMealScalarWhereInput
    data: XOR<UserMealUpdateManyMutationInput, UserMealUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMealScalarWhereInput = {
    AND?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
    OR?: UserMealScalarWhereInput[]
    NOT?: UserMealScalarWhereInput | UserMealScalarWhereInput[]
    id?: StringFilter<"UserMeal"> | string
    mealId?: StringFilter<"UserMeal"> | string
    userId?: StringFilter<"UserMeal"> | string
    dateConsumed?: DateTimeFilter<"UserMeal"> | Date | string
    createdAt?: DateTimeFilter<"UserMeal"> | Date | string
    updatedAt?: DateTimeFilter<"UserMeal"> | Date | string
  }

  export type ExerciseUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutOwnerInput, ExerciseUncheckedUpdateWithoutOwnerInput>
    create: XOR<ExerciseCreateWithoutOwnerInput, ExerciseUncheckedCreateWithoutOwnerInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutOwnerInput, ExerciseUncheckedUpdateWithoutOwnerInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutOwnerInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    youtubeUrl?: StringFilter<"Exercise"> | string
    notes?: StringNullableFilter<"Exercise"> | string | null
    isCompounded?: BoolFilter<"Exercise"> | boolean
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    ownerId?: StringNullableFilter<"Exercise"> | string | null
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
  }

  export type EquipmentCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: EquipmentCategoryCreateNestedManyWithoutEquipmentsInput
  }

  export type EquipmentUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: EquipmentCategoryUncheckedCreateNestedManyWithoutEquipmentsInput
  }

  export type EquipmentCreateOrConnectWithoutExercisesInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput>
  }

  export type MuscleCreateWithoutExercisesInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    aliases?: MuscleAliasCreateNestedManyWithoutMuscleInput
  }

  export type MuscleUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    aliases?: MuscleAliasUncheckedCreateNestedManyWithoutMuscleInput
  }

  export type MuscleCreateOrConnectWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    create: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput>
  }

  export type WorkoutExerciseCreateWithoutExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseCreateManyExerciseInputEnvelope = {
    data: WorkoutExerciseCreateManyExerciseInput | WorkoutExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutExercisesInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExercisesInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExercisesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
  }

  export type EquipmentUpsertWithWhereUniqueWithoutExercisesInput = {
    where: EquipmentWhereUniqueInput
    update: XOR<EquipmentUpdateWithoutExercisesInput, EquipmentUncheckedUpdateWithoutExercisesInput>
    create: XOR<EquipmentCreateWithoutExercisesInput, EquipmentUncheckedCreateWithoutExercisesInput>
  }

  export type EquipmentUpdateWithWhereUniqueWithoutExercisesInput = {
    where: EquipmentWhereUniqueInput
    data: XOR<EquipmentUpdateWithoutExercisesInput, EquipmentUncheckedUpdateWithoutExercisesInput>
  }

  export type EquipmentUpdateManyWithWhereWithoutExercisesInput = {
    where: EquipmentScalarWhereInput
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyWithoutExercisesInput>
  }

  export type EquipmentScalarWhereInput = {
    AND?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
    OR?: EquipmentScalarWhereInput[]
    NOT?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
    id?: StringFilter<"Equipment"> | string
    name?: StringFilter<"Equipment"> | string
    createdAt?: DateTimeFilter<"Equipment"> | Date | string
    updatedAt?: DateTimeFilter<"Equipment"> | Date | string
  }

  export type MuscleUpsertWithWhereUniqueWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    update: XOR<MuscleUpdateWithoutExercisesInput, MuscleUncheckedUpdateWithoutExercisesInput>
    create: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput>
  }

  export type MuscleUpdateWithWhereUniqueWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    data: XOR<MuscleUpdateWithoutExercisesInput, MuscleUncheckedUpdateWithoutExercisesInput>
  }

  export type MuscleUpdateManyWithWhereWithoutExercisesInput = {
    where: MuscleScalarWhereInput
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyWithoutExercisesInput>
  }

  export type MuscleScalarWhereInput = {
    AND?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
    OR?: MuscleScalarWhereInput[]
    NOT?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
    id?: StringFilter<"Muscle"> | string
    name?: StringFilter<"Muscle"> | string
    order?: IntFilter<"Muscle"> | number
    createdAt?: DateTimeFilter<"Muscle"> | Date | string
    updatedAt?: DateTimeFilter<"Muscle"> | Date | string
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutExerciseScalarWhereInput = {
    AND?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    OR?: WorkoutExerciseScalarWhereInput[]
    NOT?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    id?: StringFilter<"WorkoutExercise"> | string
    order?: IntFilter<"WorkoutExercise"> | number
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    hasWarmup?: BoolFilter<"WorkoutExercise"> | boolean
    isBodyWeight?: BoolFilter<"WorkoutExercise"> | boolean
    restTime?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: StringFilter<"WorkoutExercise"> | string
    workoutId?: StringFilter<"WorkoutExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
    updatedAt?: DateTimeFilter<"WorkoutExercise"> | Date | string
  }

  export type UserUpsertWithoutExercisesInput = {
    update: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExercisesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type UserUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ExerciseCreateWithoutMusclesInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
    owner?: UserCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutMusclesInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput>
  }

  export type MuscleAliasCreateWithoutMuscleInput = {
    id?: string
    name: string
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAliasUncheckedCreateWithoutMuscleInput = {
    id?: string
    name: string
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MuscleAliasCreateOrConnectWithoutMuscleInput = {
    where: MuscleAliasWhereUniqueInput
    create: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput>
  }

  export type MuscleAliasCreateManyMuscleInputEnvelope = {
    data: MuscleAliasCreateManyMuscleInput | MuscleAliasCreateManyMuscleInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithWhereUniqueWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutMusclesInput, ExerciseUncheckedUpdateWithoutMusclesInput>
    create: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutMusclesInput, ExerciseUncheckedUpdateWithoutMusclesInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutMusclesInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutMusclesInput>
  }

  export type MuscleAliasUpsertWithWhereUniqueWithoutMuscleInput = {
    where: MuscleAliasWhereUniqueInput
    update: XOR<MuscleAliasUpdateWithoutMuscleInput, MuscleAliasUncheckedUpdateWithoutMuscleInput>
    create: XOR<MuscleAliasCreateWithoutMuscleInput, MuscleAliasUncheckedCreateWithoutMuscleInput>
  }

  export type MuscleAliasUpdateWithWhereUniqueWithoutMuscleInput = {
    where: MuscleAliasWhereUniqueInput
    data: XOR<MuscleAliasUpdateWithoutMuscleInput, MuscleAliasUncheckedUpdateWithoutMuscleInput>
  }

  export type MuscleAliasUpdateManyWithWhereWithoutMuscleInput = {
    where: MuscleAliasScalarWhereInput
    data: XOR<MuscleAliasUpdateManyMutationInput, MuscleAliasUncheckedUpdateManyWithoutMuscleInput>
  }

  export type MuscleAliasScalarWhereInput = {
    AND?: MuscleAliasScalarWhereInput | MuscleAliasScalarWhereInput[]
    OR?: MuscleAliasScalarWhereInput[]
    NOT?: MuscleAliasScalarWhereInput | MuscleAliasScalarWhereInput[]
    id?: StringFilter<"MuscleAlias"> | string
    name?: StringFilter<"MuscleAlias"> | string
    language?: StringNullableFilter<"MuscleAlias"> | string | null
    muscleId?: StringFilter<"MuscleAlias"> | string
    createdAt?: DateTimeFilter<"MuscleAlias"> | Date | string
    updatedAt?: DateTimeFilter<"MuscleAlias"> | Date | string
  }

  export type MuscleCreateWithoutAliasesInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutMusclesInput
  }

  export type MuscleUncheckedCreateWithoutAliasesInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutMusclesInput
  }

  export type MuscleCreateOrConnectWithoutAliasesInput = {
    where: MuscleWhereUniqueInput
    create: XOR<MuscleCreateWithoutAliasesInput, MuscleUncheckedCreateWithoutAliasesInput>
  }

  export type MuscleUpsertWithoutAliasesInput = {
    update: XOR<MuscleUpdateWithoutAliasesInput, MuscleUncheckedUpdateWithoutAliasesInput>
    create: XOR<MuscleCreateWithoutAliasesInput, MuscleUncheckedCreateWithoutAliasesInput>
    where?: MuscleWhereInput
  }

  export type MuscleUpdateToOneWithWhereWithoutAliasesInput = {
    where?: MuscleWhereInput
    data: XOR<MuscleUpdateWithoutAliasesInput, MuscleUncheckedUpdateWithoutAliasesInput>
  }

  export type MuscleUpdateWithoutAliasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateWithoutAliasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutMusclesNestedInput
  }

  export type ExerciseCreateWithoutEquipmentInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
    owner?: UserCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutEquipmentInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutEquipmentInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput>
  }

  export type EquipmentCategoryCreateWithoutEquipmentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipmentCategoryUncheckedCreateWithoutEquipmentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipmentCategoryCreateOrConnectWithoutEquipmentsInput = {
    where: EquipmentCategoryWhereUniqueInput
    create: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput>
  }

  export type ExerciseUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutEquipmentInput, ExerciseUncheckedUpdateWithoutEquipmentInput>
    create: XOR<ExerciseCreateWithoutEquipmentInput, ExerciseUncheckedCreateWithoutEquipmentInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutEquipmentInput, ExerciseUncheckedUpdateWithoutEquipmentInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutEquipmentInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type EquipmentCategoryUpsertWithWhereUniqueWithoutEquipmentsInput = {
    where: EquipmentCategoryWhereUniqueInput
    update: XOR<EquipmentCategoryUpdateWithoutEquipmentsInput, EquipmentCategoryUncheckedUpdateWithoutEquipmentsInput>
    create: XOR<EquipmentCategoryCreateWithoutEquipmentsInput, EquipmentCategoryUncheckedCreateWithoutEquipmentsInput>
  }

  export type EquipmentCategoryUpdateWithWhereUniqueWithoutEquipmentsInput = {
    where: EquipmentCategoryWhereUniqueInput
    data: XOR<EquipmentCategoryUpdateWithoutEquipmentsInput, EquipmentCategoryUncheckedUpdateWithoutEquipmentsInput>
  }

  export type EquipmentCategoryUpdateManyWithWhereWithoutEquipmentsInput = {
    where: EquipmentCategoryScalarWhereInput
    data: XOR<EquipmentCategoryUpdateManyMutationInput, EquipmentCategoryUncheckedUpdateManyWithoutEquipmentsInput>
  }

  export type EquipmentCategoryScalarWhereInput = {
    AND?: EquipmentCategoryScalarWhereInput | EquipmentCategoryScalarWhereInput[]
    OR?: EquipmentCategoryScalarWhereInput[]
    NOT?: EquipmentCategoryScalarWhereInput | EquipmentCategoryScalarWhereInput[]
    id?: StringFilter<"EquipmentCategory"> | string
    name?: StringFilter<"EquipmentCategory"> | string
    createdAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
    updatedAt?: DateTimeFilter<"EquipmentCategory"> | Date | string
  }

  export type EquipmentCreateWithoutCategoriesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentCreateOrConnectWithoutCategoriesInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput>
  }

  export type EquipmentUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: EquipmentWhereUniqueInput
    update: XOR<EquipmentUpdateWithoutCategoriesInput, EquipmentUncheckedUpdateWithoutCategoriesInput>
    create: XOR<EquipmentCreateWithoutCategoriesInput, EquipmentUncheckedCreateWithoutCategoriesInput>
  }

  export type EquipmentUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: EquipmentWhereUniqueInput
    data: XOR<EquipmentUpdateWithoutCategoriesInput, EquipmentUncheckedUpdateWithoutCategoriesInput>
  }

  export type EquipmentUpdateManyWithWhereWithoutCategoriesInput = {
    where: EquipmentScalarWhereInput
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type UserWorkoutExerciseCreateWithoutUserCardioSetsInput = {
    id?: string
    skippedReason?: string | null
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSets?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetsInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
    userWorkoutId: string
    userStrengthSets?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserCardioSetsInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetsInput>
  }

  export type UserWorkoutExerciseUpsertWithoutUserCardioSetsInput = {
    update: XOR<UserWorkoutExerciseUpdateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetsInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserCardioSetsInput>
    where?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseUpdateToOneWithWhereWithoutUserCardioSetsInput = {
    where?: UserWorkoutExerciseWhereInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserCardioSetsInput, UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetsInput>
  }

  export type UserWorkoutExerciseUpdateWithoutUserCardioSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSets?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserCardioSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSets?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseCreateWithoutUserStrengthSetsInput = {
    id?: string
    skippedReason?: string | null
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userCardioSets?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetsInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
    userWorkoutId: string
    userCardioSets?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserStrengthSetsInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetsInput>
  }

  export type UserWorkoutExerciseUpsertWithoutUserStrengthSetsInput = {
    update: XOR<UserWorkoutExerciseUpdateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetsInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedCreateWithoutUserStrengthSetsInput>
    where?: UserWorkoutExerciseWhereInput
  }

  export type UserWorkoutExerciseUpdateToOneWithWhereWithoutUserStrengthSetsInput = {
    where?: UserWorkoutExerciseWhereInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserStrengthSetsInput, UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetsInput>
  }

  export type UserWorkoutExerciseUpdateWithoutUserStrengthSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userCardioSets?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserStrengthSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userCardioSets?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type ProgramWorkoutCreateWithoutProgramInput = {
    id?: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateWithoutProgramInput = {
    id?: string
    workoutId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateOrConnectWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    create: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type ProgramWorkoutCreateManyProgramInputEnvelope = {
    data: ProgramWorkoutCreateManyProgramInput | ProgramWorkoutCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    workoutId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type UserWorkoutCreateManyProgramInputEnvelope = {
    data: UserWorkoutCreateManyProgramInput | UserWorkoutCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProgramsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutProgramsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutProgramsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
  }

  export type ProgramWorkoutUpsertWithWhereUniqueWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    update: XOR<ProgramWorkoutUpdateWithoutProgramInput, ProgramWorkoutUncheckedUpdateWithoutProgramInput>
    create: XOR<ProgramWorkoutCreateWithoutProgramInput, ProgramWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type ProgramWorkoutUpdateWithWhereUniqueWithoutProgramInput = {
    where: ProgramWorkoutWhereUniqueInput
    data: XOR<ProgramWorkoutUpdateWithoutProgramInput, ProgramWorkoutUncheckedUpdateWithoutProgramInput>
  }

  export type ProgramWorkoutUpdateManyWithWhereWithoutProgramInput = {
    where: ProgramWorkoutScalarWhereInput
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyWithoutProgramInput>
  }

  export type ProgramWorkoutScalarWhereInput = {
    AND?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
    OR?: ProgramWorkoutScalarWhereInput[]
    NOT?: ProgramWorkoutScalarWhereInput | ProgramWorkoutScalarWhereInput[]
    id?: StringFilter<"ProgramWorkout"> | string
    programId?: StringFilter<"ProgramWorkout"> | string
    workoutId?: StringFilter<"ProgramWorkout"> | string
    workoutLevel?: EnumWorkoutLevelFilter<"ProgramWorkout"> | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFilter<"ProgramWorkout"> | $Enums.WorkoutGoal
    daysOfWeek?: EnumDaysOfWeekNullableListFilter<"ProgramWorkout">
    createdAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
    updatedAt?: DateTimeFilter<"ProgramWorkout"> | Date | string
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutProgramInput, UserWorkoutUncheckedUpdateWithoutProgramInput>
    create: XOR<UserWorkoutCreateWithoutProgramInput, UserWorkoutUncheckedCreateWithoutProgramInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutProgramInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutProgramInput, UserWorkoutUncheckedUpdateWithoutProgramInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutProgramInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutProgramInput>
  }

  export type UserUpsertWithoutProgramsInput = {
    update: XOR<UserUpdateWithoutProgramsInput, UserUncheckedUpdateWithoutProgramsInput>
    create: XOR<UserCreateWithoutProgramsInput, UserUncheckedCreateWithoutProgramsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProgramsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProgramsInput, UserUncheckedUpdateWithoutProgramsInput>
  }

  export type UserUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type ProgramCreateWithoutProgramWorkoutsInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkout?: UserWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateWithoutProgramWorkoutsInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutProgramWorkoutsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
  }

  export type WorkoutCreateWithoutProgramWorkoutsInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutProgramWorkoutsInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutProgramWorkoutsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
  }

  export type ProgramUpsertWithoutProgramWorkoutsInput = {
    update: XOR<ProgramUpdateWithoutProgramWorkoutsInput, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
    create: XOR<ProgramCreateWithoutProgramWorkoutsInput, ProgramUncheckedCreateWithoutProgramWorkoutsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutProgramWorkoutsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutProgramWorkoutsInput, ProgramUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type ProgramUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WorkoutUpsertWithoutProgramWorkoutsInput = {
    update: XOR<WorkoutUpdateWithoutProgramWorkoutsInput, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
    create: XOR<WorkoutCreateWithoutProgramWorkoutsInput, WorkoutUncheckedCreateWithoutProgramWorkoutsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutProgramWorkoutsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutProgramWorkoutsInput, WorkoutUncheckedUpdateWithoutProgramWorkoutsInput>
  }

  export type WorkoutUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutProgramWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserCreateWithoutWorkoutsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutWorkoutsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutWorkoutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
  }

  export type WorkoutExerciseCreateWithoutWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    exerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutExerciseInput
  }

  export type WorkoutExerciseCreateOrConnectWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseCreateManyWorkoutInputEnvelope = {
    data: WorkoutExerciseCreateManyWorkoutInput | WorkoutExerciseCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ProgramWorkoutCreateWithoutWorkoutInput = {
    id?: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutProgramWorkoutsInput
  }

  export type ProgramWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: string
    programId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    create: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgramWorkoutCreateManyWorkoutInputEnvelope = {
    data: ProgramWorkoutCreateManyWorkoutInput | ProgramWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserWorkoutCreateWithoutWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    userWorkoutExercises?: UserWorkoutExerciseCreateNestedManyWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
  }

  export type UserWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    createdAt?: Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedCreateNestedManyWithoutUserWorkoutInput
  }

  export type UserWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type UserWorkoutCreateManyWorkoutInputEnvelope = {
    data: UserWorkoutCreateManyWorkoutInput | UserWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutsInput = {
    update: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type UserUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    update: XOR<ProgramWorkoutUpdateWithoutWorkoutInput, ProgramWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<ProgramWorkoutCreateWithoutWorkoutInput, ProgramWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: ProgramWorkoutWhereUniqueInput
    data: XOR<ProgramWorkoutUpdateWithoutWorkoutInput, ProgramWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type ProgramWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: ProgramWorkoutScalarWhereInput
    data: XOR<ProgramWorkoutUpdateManyMutationInput, ProgramWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type UserWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    update: XOR<UserWorkoutUpdateWithoutWorkoutInput, UserWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<UserWorkoutCreateWithoutWorkoutInput, UserWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type UserWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: UserWorkoutWhereUniqueInput
    data: XOR<UserWorkoutUpdateWithoutWorkoutInput, UserWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type UserWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: UserWorkoutScalarWhereInput
    data: XOR<UserWorkoutUpdateManyMutationInput, UserWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ExerciseCreateWithoutWorkoutExercisesInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentCreateNestedManyWithoutExercisesInput
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    owner?: UserCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutWorkoutExercisesInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutExercisesInput
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutWorkoutExercisesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
  }

  export type WorkoutCreateWithoutWorkoutExercisesInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutWorkoutExercisesInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    userWorkouts?: UserWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutWorkoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
  }

  export type UserWorkoutExerciseCreateWithoutWorkoutExerciseInput = {
    id?: string
    skippedReason?: string | null
    userWorkout: UserWorkoutCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSets?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput = {
    id?: string
    skippedReason?: string | null
    userWorkoutId: string
    userStrengthSets?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseCreateManyWorkoutExerciseInputEnvelope = {
    data: UserWorkoutExerciseCreateManyWorkoutExerciseInput | UserWorkoutExerciseCreateManyWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithoutWorkoutExercisesInput = {
    update: XOR<ExerciseUpdateWithoutWorkoutExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
    create: XOR<ExerciseCreateWithoutWorkoutExercisesInput, ExerciseUncheckedCreateWithoutWorkoutExercisesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutWorkoutExercisesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutWorkoutExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type ExerciseUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    owner?: UserUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUncheckedUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type WorkoutUpsertWithoutWorkoutExercisesInput = {
    update: XOR<WorkoutUpdateWithoutWorkoutExercisesInput, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
    create: XOR<WorkoutCreateWithoutWorkoutExercisesInput, WorkoutUncheckedCreateWithoutWorkoutExercisesInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutWorkoutExercisesInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutWorkoutExercisesInput, WorkoutUncheckedUpdateWithoutWorkoutExercisesInput>
  }

  export type WorkoutUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserWorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    update: XOR<UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput>
    create: XOR<UserWorkoutExerciseCreateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedCreateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    data: XOR<UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput, UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseUpdateManyWithWhereWithoutWorkoutExerciseInput = {
    where: UserWorkoutExerciseScalarWhereInput
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseInput>
  }

  export type UserWorkoutExerciseScalarWhereInput = {
    AND?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
    OR?: UserWorkoutExerciseScalarWhereInput[]
    NOT?: UserWorkoutExerciseScalarWhereInput | UserWorkoutExerciseScalarWhereInput[]
    id?: StringFilter<"UserWorkoutExercise"> | string
    skippedReason?: StringNullableFilter<"UserWorkoutExercise"> | string | null
    workoutExerciseId?: StringFilter<"UserWorkoutExercise"> | string
    userWorkoutId?: StringFilter<"UserWorkoutExercise"> | string
  }

  export type WorkoutExerciseCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutWorkoutExercisesInput
    workout: WorkoutCreateNestedOneWithoutWorkoutExercisesInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    exerciseId: string
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseCreateOrConnectWithoutUserWorkoutExercisesInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    dateCompleted?: Date | string | null
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutUserWorkoutInput
    program?: ProgramCreateNestedOneWithoutUserWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutUserWorkoutsInput
  }

  export type UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type UserWorkoutCreateOrConnectWithoutUserWorkoutExercisesInput = {
    where: UserWorkoutWhereUniqueInput
    create: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
  }

  export type UserStrengthSetCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetCreateOrConnectWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    create: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetCreateManyUserWorkoutExerciseInputEnvelope = {
    data: UserStrengthSetCreateManyUserWorkoutExerciseInput | UserStrengthSetCreateManyUserWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserCardioSetCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetCreateOrConnectWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    create: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetCreateManyUserWorkoutExerciseInputEnvelope = {
    data: UserCardioSetCreateManyUserWorkoutExerciseInput | UserCardioSetCreateManyUserWorkoutExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithoutUserWorkoutExercisesInput = {
    update: XOR<WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
    create: XOR<WorkoutExerciseCreateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedCreateWithoutUserWorkoutExercisesInput>
    where?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseUpdateToOneWithWhereWithoutUserWorkoutExercisesInput = {
    where?: WorkoutExerciseWhereInput
    data: XOR<WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput, WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type WorkoutExerciseUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpsertWithoutUserWorkoutExercisesInput = {
    update: XOR<UserWorkoutUpdateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
    create: XOR<UserWorkoutCreateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedCreateWithoutUserWorkoutExercisesInput>
    where?: UserWorkoutWhereInput
  }

  export type UserWorkoutUpdateToOneWithWhereWithoutUserWorkoutExercisesInput = {
    where?: UserWorkoutWhereInput
    data: XOR<UserWorkoutUpdateWithoutUserWorkoutExercisesInput, UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput>
  }

  export type UserWorkoutUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutUserWorkoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    update: XOR<UserStrengthSetUpdateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
    create: XOR<UserStrengthSetCreateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetWhereUniqueInput
    data: XOR<UserStrengthSetUpdateWithoutUserWorkoutExerciseInput, UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput = {
    where: UserStrengthSetScalarWhereInput
    data: XOR<UserStrengthSetUpdateManyMutationInput, UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput>
  }

  export type UserStrengthSetScalarWhereInput = {
    AND?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
    OR?: UserStrengthSetScalarWhereInput[]
    NOT?: UserStrengthSetScalarWhereInput | UserStrengthSetScalarWhereInput[]
    id?: StringFilter<"UserStrengthSet"> | string
    reps?: IntNullableFilter<"UserStrengthSet"> | number | null
    weight?: FloatNullableFilter<"UserStrengthSet"> | number | null
    isBodyWeight?: BoolFilter<"UserStrengthSet"> | boolean
    restTime?: IntFilter<"UserStrengthSet"> | number
    order?: IntFilter<"UserStrengthSet"> | number
    isCompleted?: BoolFilter<"UserStrengthSet"> | boolean
    isWarmup?: BoolFilter<"UserStrengthSet"> | boolean
    isMuscleFailure?: BoolFilter<"UserStrengthSet"> | boolean
    isJointPain?: BoolFilter<"UserStrengthSet"> | boolean
    skippedReason?: StringNullableFilter<"UserStrengthSet"> | string | null
    userWorkoutExerciseId?: StringFilter<"UserStrengthSet"> | string
    createdAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserStrengthSet"> | Date | string
  }

  export type UserCardioSetUpsertWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    update: XOR<UserCardioSetUpdateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
    create: XOR<UserCardioSetCreateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedCreateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetUpdateWithWhereUniqueWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetWhereUniqueInput
    data: XOR<UserCardioSetUpdateWithoutUserWorkoutExerciseInput, UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetUpdateManyWithWhereWithoutUserWorkoutExerciseInput = {
    where: UserCardioSetScalarWhereInput
    data: XOR<UserCardioSetUpdateManyMutationInput, UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput>
  }

  export type UserCardioSetScalarWhereInput = {
    AND?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
    OR?: UserCardioSetScalarWhereInput[]
    NOT?: UserCardioSetScalarWhereInput | UserCardioSetScalarWhereInput[]
    id?: StringFilter<"UserCardioSet"> | string
    warmupTime?: IntNullableFilter<"UserCardioSet"> | number | null
    workTime?: IntNullableFilter<"UserCardioSet"> | number | null
    avgHeartRate?: IntNullableFilter<"UserCardioSet"> | number | null
    avgSpeed?: FloatNullableFilter<"UserCardioSet"> | number | null
    distance?: FloatNullableFilter<"UserCardioSet"> | number | null
    order?: IntFilter<"UserCardioSet"> | number
    isCompleted?: BoolFilter<"UserCardioSet"> | boolean
    caloriesBurned?: IntNullableFilter<"UserCardioSet"> | number | null
    userWorkoutExerciseId?: StringFilter<"UserCardioSet"> | string
    skippedReason?: StringNullableFilter<"UserCardioSet"> | string | null
    createdAt?: DateTimeFilter<"UserCardioSet"> | Date | string
    updatedAt?: DateTimeFilter<"UserCardioSet"> | Date | string
  }

  export type UserCreateWithoutUserWorkoutInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutUserWorkoutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseCreateWithoutUserWorkoutInput = {
    id?: string
    skippedReason?: string | null
    workoutExercise: WorkoutExerciseCreateNestedOneWithoutUserWorkoutExercisesInput
    userStrengthSets?: UserStrengthSetCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
    userStrengthSets?: UserStrengthSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
    userCardioSets?: UserCardioSetUncheckedCreateNestedManyWithoutUserWorkoutExerciseInput
  }

  export type UserWorkoutExerciseCreateOrConnectWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    create: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseCreateManyUserWorkoutInputEnvelope = {
    data: UserWorkoutExerciseCreateManyUserWorkoutInput | UserWorkoutExerciseCreateManyUserWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ProgramCreateWithoutUserWorkoutInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutProgramInput
    owner: UserCreateNestedOneWithoutProgramsInput
  }

  export type ProgramUncheckedCreateWithoutUserWorkoutInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutUserWorkoutInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
  }

  export type WorkoutCreateWithoutUserWorkoutsInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutWorkoutsInput
    workoutExercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutUserWorkoutsInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    ownerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workoutExercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    programWorkouts?: ProgramWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutUserWorkoutsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
  }

  export type UserUpsertWithoutUserWorkoutInput = {
    update: XOR<UserUpdateWithoutUserWorkoutInput, UserUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<UserCreateWithoutUserWorkoutInput, UserUncheckedCreateWithoutUserWorkoutInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserWorkoutInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserWorkoutInput, UserUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserWorkoutExerciseUpsertWithWhereUniqueWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    update: XOR<UserWorkoutExerciseUpdateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<UserWorkoutExerciseCreateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedCreateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateWithWhereUniqueWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseWhereUniqueInput
    data: XOR<UserWorkoutExerciseUpdateWithoutUserWorkoutInput, UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type UserWorkoutExerciseUpdateManyWithWhereWithoutUserWorkoutInput = {
    where: UserWorkoutExerciseScalarWhereInput
    data: XOR<UserWorkoutExerciseUpdateManyMutationInput, UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutInput>
  }

  export type ProgramUpsertWithoutUserWorkoutInput = {
    update: XOR<ProgramUpdateWithoutUserWorkoutInput, ProgramUncheckedUpdateWithoutUserWorkoutInput>
    create: XOR<ProgramCreateWithoutUserWorkoutInput, ProgramUncheckedCreateWithoutUserWorkoutInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutUserWorkoutInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutUserWorkoutInput, ProgramUncheckedUpdateWithoutUserWorkoutInput>
  }

  export type ProgramUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    owner?: UserUpdateOneRequiredWithoutProgramsNestedInput
  }

  export type ProgramUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WorkoutUpsertWithoutUserWorkoutsInput = {
    update: XOR<WorkoutUpdateWithoutUserWorkoutsInput, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
    create: XOR<WorkoutCreateWithoutUserWorkoutsInput, WorkoutUncheckedCreateWithoutUserWorkoutsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutUserWorkoutsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutUserWorkoutsInput, WorkoutUncheckedUpdateWithoutUserWorkoutsInput>
  }

  export type WorkoutUpdateWithoutUserWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutWorkoutsNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutUserWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type FoodItemBrandCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemBrandUncheckedCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemBrandCreateOrConnectWithoutFoodItemsInput = {
    where: FoodItemBrandWhereUniqueInput
    create: XOR<FoodItemBrandCreateWithoutFoodItemsInput, FoodItemBrandUncheckedCreateWithoutFoodItemsInput>
  }

  export type FoodItemCategoryCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemCategoryUncheckedCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemCategoryCreateOrConnectWithoutFoodItemsInput = {
    where: FoodItemCategoryWhereUniqueInput
    create: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput>
  }

  export type FoodItemLabelCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemLabelUncheckedCreateWithoutFoodItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemLabelCreateOrConnectWithoutFoodItemsInput = {
    where: FoodItemLabelWhereUniqueInput
    create: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput>
  }

  export type MealFoodItemCreateWithoutFoodItemInput = {
    id?: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    meal: MealCreateNestedOneWithoutMealFoodItemsInput
  }

  export type MealFoodItemUncheckedCreateWithoutFoodItemInput = {
    id?: string
    mealId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodItemCreateOrConnectWithoutFoodItemInput = {
    where: MealFoodItemWhereUniqueInput
    create: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput>
  }

  export type MealFoodItemCreateManyFoodItemInputEnvelope = {
    data: MealFoodItemCreateManyFoodItemInput | MealFoodItemCreateManyFoodItemInput[]
    skipDuplicates?: boolean
  }

  export type FoodItemImgCreateWithoutFoodItemInput = {
    id?: string
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemImgUncheckedCreateWithoutFoodItemInput = {
    id?: string
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemImgCreateOrConnectWithoutFoodItemInput = {
    where: FoodItemImgWhereUniqueInput
    create: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput>
  }

  export type FoodItemImgCreateManyFoodItemInputEnvelope = {
    data: FoodItemImgCreateManyFoodItemInput | FoodItemImgCreateManyFoodItemInput[]
    skipDuplicates?: boolean
  }

  export type FoodItemBrandUpsertWithoutFoodItemsInput = {
    update: XOR<FoodItemBrandUpdateWithoutFoodItemsInput, FoodItemBrandUncheckedUpdateWithoutFoodItemsInput>
    create: XOR<FoodItemBrandCreateWithoutFoodItemsInput, FoodItemBrandUncheckedCreateWithoutFoodItemsInput>
    where?: FoodItemBrandWhereInput
  }

  export type FoodItemBrandUpdateToOneWithWhereWithoutFoodItemsInput = {
    where?: FoodItemBrandWhereInput
    data: XOR<FoodItemBrandUpdateWithoutFoodItemsInput, FoodItemBrandUncheckedUpdateWithoutFoodItemsInput>
  }

  export type FoodItemBrandUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemBrandUncheckedUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCategoryUpsertWithWhereUniqueWithoutFoodItemsInput = {
    where: FoodItemCategoryWhereUniqueInput
    update: XOR<FoodItemCategoryUpdateWithoutFoodItemsInput, FoodItemCategoryUncheckedUpdateWithoutFoodItemsInput>
    create: XOR<FoodItemCategoryCreateWithoutFoodItemsInput, FoodItemCategoryUncheckedCreateWithoutFoodItemsInput>
  }

  export type FoodItemCategoryUpdateWithWhereUniqueWithoutFoodItemsInput = {
    where: FoodItemCategoryWhereUniqueInput
    data: XOR<FoodItemCategoryUpdateWithoutFoodItemsInput, FoodItemCategoryUncheckedUpdateWithoutFoodItemsInput>
  }

  export type FoodItemCategoryUpdateManyWithWhereWithoutFoodItemsInput = {
    where: FoodItemCategoryScalarWhereInput
    data: XOR<FoodItemCategoryUpdateManyMutationInput, FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsInput>
  }

  export type FoodItemCategoryScalarWhereInput = {
    AND?: FoodItemCategoryScalarWhereInput | FoodItemCategoryScalarWhereInput[]
    OR?: FoodItemCategoryScalarWhereInput[]
    NOT?: FoodItemCategoryScalarWhereInput | FoodItemCategoryScalarWhereInput[]
    id?: StringFilter<"FoodItemCategory"> | string
    name?: StringFilter<"FoodItemCategory"> | string
    createdAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemCategory"> | Date | string
  }

  export type FoodItemLabelUpsertWithWhereUniqueWithoutFoodItemsInput = {
    where: FoodItemLabelWhereUniqueInput
    update: XOR<FoodItemLabelUpdateWithoutFoodItemsInput, FoodItemLabelUncheckedUpdateWithoutFoodItemsInput>
    create: XOR<FoodItemLabelCreateWithoutFoodItemsInput, FoodItemLabelUncheckedCreateWithoutFoodItemsInput>
  }

  export type FoodItemLabelUpdateWithWhereUniqueWithoutFoodItemsInput = {
    where: FoodItemLabelWhereUniqueInput
    data: XOR<FoodItemLabelUpdateWithoutFoodItemsInput, FoodItemLabelUncheckedUpdateWithoutFoodItemsInput>
  }

  export type FoodItemLabelUpdateManyWithWhereWithoutFoodItemsInput = {
    where: FoodItemLabelScalarWhereInput
    data: XOR<FoodItemLabelUpdateManyMutationInput, FoodItemLabelUncheckedUpdateManyWithoutFoodItemsInput>
  }

  export type FoodItemLabelScalarWhereInput = {
    AND?: FoodItemLabelScalarWhereInput | FoodItemLabelScalarWhereInput[]
    OR?: FoodItemLabelScalarWhereInput[]
    NOT?: FoodItemLabelScalarWhereInput | FoodItemLabelScalarWhereInput[]
    id?: StringFilter<"FoodItemLabel"> | string
    name?: StringFilter<"FoodItemLabel"> | string
    createdAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemLabel"> | Date | string
  }

  export type MealFoodItemUpsertWithWhereUniqueWithoutFoodItemInput = {
    where: MealFoodItemWhereUniqueInput
    update: XOR<MealFoodItemUpdateWithoutFoodItemInput, MealFoodItemUncheckedUpdateWithoutFoodItemInput>
    create: XOR<MealFoodItemCreateWithoutFoodItemInput, MealFoodItemUncheckedCreateWithoutFoodItemInput>
  }

  export type MealFoodItemUpdateWithWhereUniqueWithoutFoodItemInput = {
    where: MealFoodItemWhereUniqueInput
    data: XOR<MealFoodItemUpdateWithoutFoodItemInput, MealFoodItemUncheckedUpdateWithoutFoodItemInput>
  }

  export type MealFoodItemUpdateManyWithWhereWithoutFoodItemInput = {
    where: MealFoodItemScalarWhereInput
    data: XOR<MealFoodItemUpdateManyMutationInput, MealFoodItemUncheckedUpdateManyWithoutFoodItemInput>
  }

  export type MealFoodItemScalarWhereInput = {
    AND?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
    OR?: MealFoodItemScalarWhereInput[]
    NOT?: MealFoodItemScalarWhereInput | MealFoodItemScalarWhereInput[]
    id?: StringFilter<"MealFoodItem"> | string
    mealId?: StringFilter<"MealFoodItem"> | string
    foodItemId?: StringFilter<"MealFoodItem"> | string
    quantity?: IntFilter<"MealFoodItem"> | number
    createdAt?: DateTimeFilter<"MealFoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"MealFoodItem"> | Date | string
  }

  export type FoodItemImgUpsertWithWhereUniqueWithoutFoodItemInput = {
    where: FoodItemImgWhereUniqueInput
    update: XOR<FoodItemImgUpdateWithoutFoodItemInput, FoodItemImgUncheckedUpdateWithoutFoodItemInput>
    create: XOR<FoodItemImgCreateWithoutFoodItemInput, FoodItemImgUncheckedCreateWithoutFoodItemInput>
  }

  export type FoodItemImgUpdateWithWhereUniqueWithoutFoodItemInput = {
    where: FoodItemImgWhereUniqueInput
    data: XOR<FoodItemImgUpdateWithoutFoodItemInput, FoodItemImgUncheckedUpdateWithoutFoodItemInput>
  }

  export type FoodItemImgUpdateManyWithWhereWithoutFoodItemInput = {
    where: FoodItemImgScalarWhereInput
    data: XOR<FoodItemImgUpdateManyMutationInput, FoodItemImgUncheckedUpdateManyWithoutFoodItemInput>
  }

  export type FoodItemImgScalarWhereInput = {
    AND?: FoodItemImgScalarWhereInput | FoodItemImgScalarWhereInput[]
    OR?: FoodItemImgScalarWhereInput[]
    NOT?: FoodItemImgScalarWhereInput | FoodItemImgScalarWhereInput[]
    id?: StringFilter<"FoodItemImg"> | string
    url?: StringFilter<"FoodItemImg"> | string
    altText?: StringNullableFilter<"FoodItemImg"> | string | null
    foodItemId?: StringFilter<"FoodItemImg"> | string
    createdAt?: DateTimeFilter<"FoodItemImg"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItemImg"> | Date | string
  }

  export type FoodItemCreateWithoutLabelsInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: FoodItemBrandCreateNestedOneWithoutFoodItemsInput
    categories?: FoodItemCategoryCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateWithoutLabelsInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemCreateOrConnectWithoutLabelsInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput>
  }

  export type FoodItemUpsertWithWhereUniqueWithoutLabelsInput = {
    where: FoodItemWhereUniqueInput
    update: XOR<FoodItemUpdateWithoutLabelsInput, FoodItemUncheckedUpdateWithoutLabelsInput>
    create: XOR<FoodItemCreateWithoutLabelsInput, FoodItemUncheckedCreateWithoutLabelsInput>
  }

  export type FoodItemUpdateWithWhereUniqueWithoutLabelsInput = {
    where: FoodItemWhereUniqueInput
    data: XOR<FoodItemUpdateWithoutLabelsInput, FoodItemUncheckedUpdateWithoutLabelsInput>
  }

  export type FoodItemUpdateManyWithWhereWithoutLabelsInput = {
    where: FoodItemScalarWhereInput
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyWithoutLabelsInput>
  }

  export type FoodItemScalarWhereInput = {
    AND?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
    OR?: FoodItemScalarWhereInput[]
    NOT?: FoodItemScalarWhereInput | FoodItemScalarWhereInput[]
    id?: StringFilter<"FoodItem"> | string
    barcode?: StringFilter<"FoodItem"> | string
    name?: StringFilter<"FoodItem"> | string
    servingSize?: FloatNullableFilter<"FoodItem"> | number | null
    calories?: FloatNullableFilter<"FoodItem"> | number | null
    proteins?: FloatNullableFilter<"FoodItem"> | number | null
    carbohydrates?: FloatNullableFilter<"FoodItem"> | number | null
    sugars?: FloatNullableFilter<"FoodItem"> | number | null
    fat?: FloatNullableFilter<"FoodItem"> | number | null
    saturatedFat?: FloatNullableFilter<"FoodItem"> | number | null
    fiber?: FloatNullableFilter<"FoodItem"> | number | null
    salt?: FloatNullableFilter<"FoodItem"> | number | null
    cholesterol?: FloatNullableFilter<"FoodItem"> | number | null
    brandId?: StringNullableFilter<"FoodItem"> | string | null
    createdAt?: DateTimeFilter<"FoodItem"> | Date | string
    updatedAt?: DateTimeFilter<"FoodItem"> | Date | string
  }

  export type FoodItemCreateWithoutImagesInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: FoodItemBrandCreateNestedOneWithoutFoodItemsInput
    categories?: FoodItemCategoryCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateWithoutImagesInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemCreateOrConnectWithoutImagesInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutImagesInput, FoodItemUncheckedCreateWithoutImagesInput>
  }

  export type FoodItemUpsertWithoutImagesInput = {
    update: XOR<FoodItemUpdateWithoutImagesInput, FoodItemUncheckedUpdateWithoutImagesInput>
    create: XOR<FoodItemCreateWithoutImagesInput, FoodItemUncheckedCreateWithoutImagesInput>
    where?: FoodItemWhereInput
  }

  export type FoodItemUpdateToOneWithWhereWithoutImagesInput = {
    where?: FoodItemWhereInput
    data: XOR<FoodItemUpdateWithoutImagesInput, FoodItemUncheckedUpdateWithoutImagesInput>
  }

  export type FoodItemUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: FoodItemBrandUpdateOneWithoutFoodItemsNestedInput
    categories?: FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemCreateWithoutBrandInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateWithoutBrandInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemCreateOrConnectWithoutBrandInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput>
  }

  export type FoodItemCreateManyBrandInputEnvelope = {
    data: FoodItemCreateManyBrandInput | FoodItemCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type FoodItemUpsertWithWhereUniqueWithoutBrandInput = {
    where: FoodItemWhereUniqueInput
    update: XOR<FoodItemUpdateWithoutBrandInput, FoodItemUncheckedUpdateWithoutBrandInput>
    create: XOR<FoodItemCreateWithoutBrandInput, FoodItemUncheckedCreateWithoutBrandInput>
  }

  export type FoodItemUpdateWithWhereUniqueWithoutBrandInput = {
    where: FoodItemWhereUniqueInput
    data: XOR<FoodItemUpdateWithoutBrandInput, FoodItemUncheckedUpdateWithoutBrandInput>
  }

  export type FoodItemUpdateManyWithWhereWithoutBrandInput = {
    where: FoodItemScalarWhereInput
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyWithoutBrandInput>
  }

  export type FoodItemCreateWithoutCategoriesInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: FoodItemBrandCreateNestedOneWithoutFoodItemsInput
    labels?: FoodItemLabelCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateWithoutCategoriesInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    labels?: FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput
    mealFoodItem?: MealFoodItemUncheckedCreateNestedManyWithoutFoodItemInput
    images?: FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemCreateOrConnectWithoutCategoriesInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput>
  }

  export type FoodItemUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: FoodItemWhereUniqueInput
    update: XOR<FoodItemUpdateWithoutCategoriesInput, FoodItemUncheckedUpdateWithoutCategoriesInput>
    create: XOR<FoodItemCreateWithoutCategoriesInput, FoodItemUncheckedCreateWithoutCategoriesInput>
  }

  export type FoodItemUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: FoodItemWhereUniqueInput
    data: XOR<FoodItemUpdateWithoutCategoriesInput, FoodItemUncheckedUpdateWithoutCategoriesInput>
  }

  export type FoodItemUpdateManyWithWhereWithoutCategoriesInput = {
    where: FoodItemScalarWhereInput
    data: XOR<FoodItemUpdateManyMutationInput, FoodItemUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type UserCreateWithoutMealsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealCreateNestedManyWithoutUserInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutMealsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutUserInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutMealsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
  }

  export type MealFoodItemCreateWithoutMealInput = {
    id?: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foodItem: FoodItemCreateNestedOneWithoutMealFoodItemInput
  }

  export type MealFoodItemUncheckedCreateWithoutMealInput = {
    id?: string
    foodItemId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodItemCreateOrConnectWithoutMealInput = {
    where: MealFoodItemWhereUniqueInput
    create: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput>
  }

  export type MealFoodItemCreateManyMealInputEnvelope = {
    data: MealFoodItemCreateManyMealInput | MealFoodItemCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type UserMealCreateWithoutMealInput = {
    id?: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserMealsInput
  }

  export type UserMealUncheckedCreateWithoutMealInput = {
    id?: string
    userId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealCreateOrConnectWithoutMealInput = {
    where: UserMealWhereUniqueInput
    create: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput>
  }

  export type UserMealCreateManyMealInputEnvelope = {
    data: UserMealCreateManyMealInput | UserMealCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutMealInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUncheckedCreateWithoutMealInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageCreateOrConnectWithoutMealInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput>
  }

  export type ImageCreateManyMealInputEnvelope = {
    data: ImageCreateManyMealInput | ImageCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMealsInput = {
    update: XOR<UserUpdateWithoutMealsInput, UserUncheckedUpdateWithoutMealsInput>
    create: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealsInput, UserUncheckedUpdateWithoutMealsInput>
  }

  export type UserUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutUserNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MealFoodItemUpsertWithWhereUniqueWithoutMealInput = {
    where: MealFoodItemWhereUniqueInput
    update: XOR<MealFoodItemUpdateWithoutMealInput, MealFoodItemUncheckedUpdateWithoutMealInput>
    create: XOR<MealFoodItemCreateWithoutMealInput, MealFoodItemUncheckedCreateWithoutMealInput>
  }

  export type MealFoodItemUpdateWithWhereUniqueWithoutMealInput = {
    where: MealFoodItemWhereUniqueInput
    data: XOR<MealFoodItemUpdateWithoutMealInput, MealFoodItemUncheckedUpdateWithoutMealInput>
  }

  export type MealFoodItemUpdateManyWithWhereWithoutMealInput = {
    where: MealFoodItemScalarWhereInput
    data: XOR<MealFoodItemUpdateManyMutationInput, MealFoodItemUncheckedUpdateManyWithoutMealInput>
  }

  export type UserMealUpsertWithWhereUniqueWithoutMealInput = {
    where: UserMealWhereUniqueInput
    update: XOR<UserMealUpdateWithoutMealInput, UserMealUncheckedUpdateWithoutMealInput>
    create: XOR<UserMealCreateWithoutMealInput, UserMealUncheckedCreateWithoutMealInput>
  }

  export type UserMealUpdateWithWhereUniqueWithoutMealInput = {
    where: UserMealWhereUniqueInput
    data: XOR<UserMealUpdateWithoutMealInput, UserMealUncheckedUpdateWithoutMealInput>
  }

  export type UserMealUpdateManyWithWhereWithoutMealInput = {
    where: UserMealScalarWhereInput
    data: XOR<UserMealUpdateManyMutationInput, UserMealUncheckedUpdateManyWithoutMealInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutMealInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutMealInput, ImageUncheckedUpdateWithoutMealInput>
    create: XOR<ImageCreateWithoutMealInput, ImageUncheckedCreateWithoutMealInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutMealInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutMealInput, ImageUncheckedUpdateWithoutMealInput>
  }

  export type ImageUpdateManyWithWhereWithoutMealInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutMealInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    publicId?: StringFilter<"Image"> | string
    description?: StringNullableFilter<"Image"> | string | null
    altText?: StringNullableFilter<"Image"> | string | null
    mealId?: StringNullableFilter<"Image"> | string | null
    isPrimary?: BoolFilter<"Image"> | boolean
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
  }

  export type MealCreateWithoutMealFoodItemsInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutMealsInput
    userMeals?: UserMealCreateNestedManyWithoutMealInput
    images?: ImageCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutMealFoodItemsInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    ownerId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userMeals?: UserMealUncheckedCreateNestedManyWithoutMealInput
    images?: ImageUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutMealFoodItemsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutMealFoodItemsInput, MealUncheckedCreateWithoutMealFoodItemsInput>
  }

  export type FoodItemCreateWithoutMealFoodItemInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: FoodItemBrandCreateNestedOneWithoutFoodItemsInput
    categories?: FoodItemCategoryCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelCreateNestedManyWithoutFoodItemsInput
    images?: FoodItemImgCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemUncheckedCreateWithoutMealFoodItemInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: FoodItemCategoryUncheckedCreateNestedManyWithoutFoodItemsInput
    labels?: FoodItemLabelUncheckedCreateNestedManyWithoutFoodItemsInput
    images?: FoodItemImgUncheckedCreateNestedManyWithoutFoodItemInput
  }

  export type FoodItemCreateOrConnectWithoutMealFoodItemInput = {
    where: FoodItemWhereUniqueInput
    create: XOR<FoodItemCreateWithoutMealFoodItemInput, FoodItemUncheckedCreateWithoutMealFoodItemInput>
  }

  export type MealUpsertWithoutMealFoodItemsInput = {
    update: XOR<MealUpdateWithoutMealFoodItemsInput, MealUncheckedUpdateWithoutMealFoodItemsInput>
    create: XOR<MealCreateWithoutMealFoodItemsInput, MealUncheckedCreateWithoutMealFoodItemsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutMealFoodItemsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutMealFoodItemsInput, MealUncheckedUpdateWithoutMealFoodItemsInput>
  }

  export type MealUpdateWithoutMealFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutMealsNestedInput
    userMeals?: UserMealUpdateManyWithoutMealNestedInput
    images?: ImageUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutMealFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userMeals?: UserMealUncheckedUpdateManyWithoutMealNestedInput
    images?: ImageUncheckedUpdateManyWithoutMealNestedInput
  }

  export type FoodItemUpsertWithoutMealFoodItemInput = {
    update: XOR<FoodItemUpdateWithoutMealFoodItemInput, FoodItemUncheckedUpdateWithoutMealFoodItemInput>
    create: XOR<FoodItemCreateWithoutMealFoodItemInput, FoodItemUncheckedCreateWithoutMealFoodItemInput>
    where?: FoodItemWhereInput
  }

  export type FoodItemUpdateToOneWithWhereWithoutMealFoodItemInput = {
    where?: FoodItemWhereInput
    data: XOR<FoodItemUpdateWithoutMealFoodItemInput, FoodItemUncheckedUpdateWithoutMealFoodItemInput>
  }

  export type FoodItemUpdateWithoutMealFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: FoodItemBrandUpdateOneWithoutFoodItemsNestedInput
    categories?: FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUpdateManyWithoutFoodItemsNestedInput
    images?: FoodItemImgUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutMealFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput
    images?: FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type MealCreateWithoutUserMealsInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutMealsInput
    mealFoodItems?: MealFoodItemCreateNestedManyWithoutMealInput
    images?: ImageCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutUserMealsInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    ownerId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoodItems?: MealFoodItemUncheckedCreateNestedManyWithoutMealInput
    images?: ImageUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutUserMealsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutUserMealsInput, MealUncheckedCreateWithoutUserMealsInput>
  }

  export type UserCreateWithoutUserMealsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutCreateNestedManyWithoutOwnerInput
    meals?: MealCreateNestedManyWithoutOwnerInput
    exercises?: ExerciseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutUserMealsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    googleId?: string | null
    firstName?: string | null
    lastName?: string | null
    imgUrl?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    programs?: ProgramUncheckedCreateNestedManyWithoutOwnerInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutOwnerInput
    userWorkout?: UserWorkoutUncheckedCreateNestedManyWithoutOwnerInput
    meals?: MealUncheckedCreateNestedManyWithoutOwnerInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutUserMealsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserMealsInput, UserUncheckedCreateWithoutUserMealsInput>
  }

  export type MealUpsertWithoutUserMealsInput = {
    update: XOR<MealUpdateWithoutUserMealsInput, MealUncheckedUpdateWithoutUserMealsInput>
    create: XOR<MealCreateWithoutUserMealsInput, MealUncheckedCreateWithoutUserMealsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutUserMealsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutUserMealsInput, MealUncheckedUpdateWithoutUserMealsInput>
  }

  export type MealUpdateWithoutUserMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutMealsNestedInput
    mealFoodItems?: MealFoodItemUpdateManyWithoutMealNestedInput
    images?: ImageUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutUserMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoodItems?: MealFoodItemUncheckedUpdateManyWithoutMealNestedInput
    images?: ImageUncheckedUpdateManyWithoutMealNestedInput
  }

  export type UserUpsertWithoutUserMealsInput = {
    update: XOR<UserUpdateWithoutUserMealsInput, UserUncheckedUpdateWithoutUserMealsInput>
    create: XOR<UserCreateWithoutUserMealsInput, UserUncheckedCreateWithoutUserMealsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserMealsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserMealsInput, UserUncheckedUpdateWithoutUserMealsInput>
  }

  export type UserUpdateWithoutUserMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutOwnerNestedInput
    meals?: MealUpdateManyWithoutOwnerNestedInput
    exercises?: ExerciseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutUserMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programs?: ProgramUncheckedUpdateManyWithoutOwnerNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutOwnerNestedInput
    meals?: MealUncheckedUpdateManyWithoutOwnerNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MealCreateWithoutImagesInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner?: UserCreateNestedOneWithoutMealsInput
    mealFoodItems?: MealFoodItemCreateNestedManyWithoutMealInput
    userMeals?: UserMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutImagesInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    ownerId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoodItems?: MealFoodItemUncheckedCreateNestedManyWithoutMealInput
    userMeals?: UserMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutImagesInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutImagesInput, MealUncheckedCreateWithoutImagesInput>
  }

  export type MealUpsertWithoutImagesInput = {
    update: XOR<MealUpdateWithoutImagesInput, MealUncheckedUpdateWithoutImagesInput>
    create: XOR<MealCreateWithoutImagesInput, MealUncheckedCreateWithoutImagesInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutImagesInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutImagesInput, MealUncheckedUpdateWithoutImagesInput>
  }

  export type MealUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneWithoutMealsNestedInput
    mealFoodItems?: MealFoodItemUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoodItems?: MealFoodItemUncheckedUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type ProgramCreateManyOwnerInput = {
    id?: string
    name: string
    notes?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutCreateManyOwnerInput = {
    id?: string
    name?: string | null
    isTemplate?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyOwnerInput = {
    id?: string
    dateCompleted?: Date | string | null
    programId?: string | null
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type MealCreateManyOwnerInput = {
    id?: string
    name?: string | null
    mealType?: $Enums.MealType
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealCreateManyUserInput = {
    id?: string
    mealId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseCreateManyOwnerInput = {
    id?: string
    name: string
    youtubeUrl: string
    notes?: string | null
    isCompounded?: boolean
    type?: $Enums.ExerciseType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutProgramNestedInput
    userWorkout?: UserWorkoutUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    programWorkouts?: ProgramWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    userWorkouts?: UserWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoodItems?: MealFoodItemUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUpdateManyWithoutMealNestedInput
    images?: ImageUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoodItems?: MealFoodItemUncheckedUpdateManyWithoutMealNestedInput
    userMeals?: UserMealUncheckedUpdateManyWithoutMealNestedInput
    images?: ImageUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    mealType?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutUserMealsNestedInput
  }

  export type UserMealUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUncheckedUpdateManyWithoutExercisesNestedInput
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyExerciseInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    workoutId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EquipmentUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: EquipmentCategoryUpdateManyWithoutEquipmentsNestedInput
  }

  export type EquipmentUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: EquipmentCategoryUncheckedUpdateManyWithoutEquipmentsNestedInput
  }

  export type EquipmentUncheckedUpdateManyWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aliases?: MuscleAliasUpdateManyWithoutMuscleNestedInput
  }

  export type MuscleUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aliases?: MuscleAliasUncheckedUpdateManyWithoutMuscleNestedInput
  }

  export type MuscleUncheckedUpdateManyWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasCreateManyMuscleInput = {
    id?: string
    name: string
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
    owner?: UserUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipment?: EquipmentUncheckedUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasUpdateWithoutMuscleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasUncheckedUpdateWithoutMuscleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MuscleAliasUncheckedUpdateManyWithoutMuscleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
    owner?: UserUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    workoutExercises?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    youtubeUrl?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isCompounded?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCategoryUpdateWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCategoryUncheckedUpdateWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentCategoryUncheckedUpdateManyWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutCreateManyProgramInput = {
    id?: string
    workoutId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyProgramInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    workoutId?: string | null
    createdAt?: Date | string
  }

  export type ProgramWorkoutUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutUserWorkoutsNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    workoutId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyWorkoutInput = {
    id?: string
    order?: number
    notes?: string | null
    hasWarmup?: boolean
    isBodyWeight?: boolean
    restTime?: number
    exerciseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramWorkoutCreateManyWorkoutInput = {
    id?: string
    programId: string
    workoutLevel?: $Enums.WorkoutLevel
    workoutGoal?: $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutCreatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserWorkoutCreateManyWorkoutInput = {
    id?: string
    dateCompleted?: Date | string | null
    ownerId: string
    programId?: string | null
    createdAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutExercisesNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasWarmup?: BoolFieldUpdateOperationsInput | boolean
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutProgramWorkoutsNestedInput
  }

  export type ProgramWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    programId?: StringFieldUpdateOperationsInput | string
    workoutLevel?: EnumWorkoutLevelFieldUpdateOperationsInput | $Enums.WorkoutLevel
    workoutGoal?: EnumWorkoutGoalFieldUpdateOperationsInput | $Enums.WorkoutGoal
    daysOfWeek?: ProgramWorkoutUpdatedaysOfWeekInput | $Enums.DaysOfWeek[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutUserWorkoutNestedInput
    userWorkoutExercises?: UserWorkoutExerciseUpdateManyWithoutUserWorkoutNestedInput
    program?: ProgramUpdateOneWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userWorkoutExercises?: UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutNestedInput
  }

  export type UserWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateManyWorkoutExerciseInput = {
    id?: string
    skippedReason?: string | null
    userWorkoutId: string
  }

  export type UserWorkoutExerciseUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkout?: UserWorkoutUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSets?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutId?: StringFieldUpdateOperationsInput | string
    userStrengthSets?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    userWorkoutId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStrengthSetCreateManyUserWorkoutExerciseInput = {
    id?: string
    reps?: number | null
    weight?: number | null
    isBodyWeight?: boolean
    restTime?: number
    order?: number
    isCompleted?: boolean
    isWarmup?: boolean
    isMuscleFailure?: boolean
    isJointPain?: boolean
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardioSetCreateManyUserWorkoutExerciseInput = {
    id?: string
    warmupTime?: number | null
    workTime?: number | null
    avgHeartRate?: number | null
    avgSpeed?: number | null
    distance?: number | null
    order?: number
    isCompleted?: boolean
    caloriesBurned?: number | null
    skippedReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStrengthSetUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    isBodyWeight?: BoolFieldUpdateOperationsInput | boolean
    restTime?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    isWarmup?: BoolFieldUpdateOperationsInput | boolean
    isMuscleFailure?: BoolFieldUpdateOperationsInput | boolean
    isJointPain?: BoolFieldUpdateOperationsInput | boolean
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warmupTime?: NullableIntFieldUpdateOperationsInput | number | null
    workTime?: NullableIntFieldUpdateOperationsInput | number | null
    avgHeartRate?: NullableIntFieldUpdateOperationsInput | number | null
    avgSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    order?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    caloriesBurned?: NullableIntFieldUpdateOperationsInput | number | null
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserWorkoutExerciseCreateManyUserWorkoutInput = {
    id?: string
    skippedReason?: string | null
    workoutExerciseId: string
  }

  export type UserWorkoutExerciseUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExercise?: WorkoutExerciseUpdateOneRequiredWithoutUserWorkoutExercisesNestedInput
    userStrengthSets?: UserStrengthSetUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
    userStrengthSets?: UserStrengthSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
    userCardioSets?: UserCardioSetUncheckedUpdateManyWithoutUserWorkoutExerciseNestedInput
  }

  export type UserWorkoutExerciseUncheckedUpdateManyWithoutUserWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    skippedReason?: NullableStringFieldUpdateOperationsInput | string | null
    workoutExerciseId?: StringFieldUpdateOperationsInput | string
  }

  export type MealFoodItemCreateManyFoodItemInput = {
    id?: string
    mealId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemImgCreateManyFoodItemInput = {
    id?: string
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemCategoryUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCategoryUncheckedUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemLabelUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemLabelUncheckedUpdateWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemLabelUncheckedUpdateManyWithoutFoodItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemUpdateWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutMealFoodItemsNestedInput
  }

  export type MealFoodItemUncheckedUpdateWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemUncheckedUpdateManyWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgUpdateWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgUncheckedUpdateWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemImgUncheckedUpdateManyWithoutFoodItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemUpdateWithoutLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: FoodItemBrandUpdateOneWithoutFoodItemsNestedInput
    categories?: FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateManyWithoutLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemCreateManyBrandInput = {
    id?: string
    barcode: string
    name: string
    servingSize?: number | null
    calories?: number | null
    proteins?: number | null
    carbohydrates?: number | null
    sugars?: number | null
    fat?: number | null
    saturatedFat?: number | null
    fiber?: number | null
    salt?: number | null
    cholesterol?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodItemUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: FoodItemCategoryUncheckedUpdateManyWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodItemUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: FoodItemBrandUpdateOneWithoutFoodItemsNestedInput
    labels?: FoodItemLabelUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labels?: FoodItemLabelUncheckedUpdateManyWithoutFoodItemsNestedInput
    mealFoodItem?: MealFoodItemUncheckedUpdateManyWithoutFoodItemNestedInput
    images?: FoodItemImgUncheckedUpdateManyWithoutFoodItemNestedInput
  }

  export type FoodItemUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    servingSize?: NullableFloatFieldUpdateOperationsInput | number | null
    calories?: NullableFloatFieldUpdateOperationsInput | number | null
    proteins?: NullableFloatFieldUpdateOperationsInput | number | null
    carbohydrates?: NullableFloatFieldUpdateOperationsInput | number | null
    sugars?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    saturatedFat?: NullableFloatFieldUpdateOperationsInput | number | null
    fiber?: NullableFloatFieldUpdateOperationsInput | number | null
    salt?: NullableFloatFieldUpdateOperationsInput | number | null
    cholesterol?: NullableFloatFieldUpdateOperationsInput | number | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemCreateManyMealInput = {
    id?: string
    foodItemId: string
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMealCreateManyMealInput = {
    id?: string
    userId: string
    dateConsumed?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageCreateManyMealInput = {
    id?: string
    url: string
    publicId: string
    description?: string | null
    altText?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodItemUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodItem?: FoodItemUpdateOneRequiredWithoutMealFoodItemNestedInput
  }

  export type MealFoodItemUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodItemId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodItemUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodItemId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserMealsNestedInput
  }

  export type UserMealUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMealUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateConsumed?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}